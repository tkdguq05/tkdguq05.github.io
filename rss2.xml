<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Unreasonable Effectiveness</title>
    <link>http://tkdguq05.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Wed, 03 Nov 2021 06:03:28 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>EKS-workshop</title>
      <link>http://tkdguq05.github.io/2021/11/03/EKS-workshop/</link>
      <guid>http://tkdguq05.github.io/2021/11/03/EKS-workshop/</guid>
      <pubDate>Wed, 03 Nov 2021 05:40:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;EKS를 다뤄보고 GitOps까지 실습해봤습니다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>EKS를 다뤄보고 GitOps까지 실습해봤습니다.</p><a id="more"></a><ul><li><p>실습 링크 : <a href="https://aws-eks-web-application.workshop.aws/ko/10-intro.html">https://aws-eks-web-application.workshop.aws/ko/10-intro.html</a></p><p>실습 영상 : <a href="https://www.youtube.com/watch?v=kb6s0Tmp2CA&ab_channel=AWS%ED%95%9C%EA%B5%AD%EC%82%AC%EC%9A%A9%EC%9E%90%EB%AA%A8%EC%9E%84-AWSKRUG">https://www.youtube.com/watch?v=kb6s0Tmp2CA&amp;ab_channel=AWS한국사용자모임-AWSKRUG</a></p><blockquote><p>AWS 워크샵에서는 다음 내용을 다룹니다.</p></blockquote><ul><li>AWS Cloud9을 통한 실습 환경 구축</li><li>도커를 이용하여 컨테이너 이미지 생성</li><li>컨테이너 이미지를 ECR에 업로드</li><li>Amazon EKS 클러스터 구축 및 서비스 배포</li><li>Container Insights 사용해보기</li><li>파드 및 클러스터 오토 스케일링</li><li>AWS Fargate로 서비스 올리기</li></ul><p><br></br></p><h2 id="Kubernetes-k8s"><a href="#Kubernetes-k8s" class="headerlink" title="Kubernetes(k8s)"></a>Kubernetes(k8s)</h2><ul><li>쿠버네티스는 컨테이너화된 워크로드와 서비스를 관리하기 위한 이식성이 있고, 확장가능한 오픈소스 플랫폼입니다. 쿠버네티스는 선언적 구성과 자동화를 모두 용이하게 해주는 컨테이너 오케스트레이션 툴입니다.</li></ul><blockquote><p>🌐 쿠버네티스에 대해 더 자세히 알고 싶다면 <a href="https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/">여기</a> 를 클릭하세요.</p></blockquote><p><img src="/images/eks-workshop/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2021-10-29_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_10.59.24.png" alt="쿠버네티스_아키텍쳐"></p><ul><li>쿠버네티스를 배포하면 <strong>클러스터</strong>를 얻습니다. 그리고 이 클러스터는 <strong>노드들의 집합</strong>입니다. 노드들은 크게 두 가지 유형으로 나눠지는데, 각각이 <strong>컨트롤 플레인</strong>과 <strong>데이터 플레인</strong>입니다.<ul><li>컨트롤 플레인(Control Plane)은 워커 노드와 클러스터 내 파드를 관리하고 제어합니다.</li><li>데이터 플레인(Data Plane)은 <strong>워커 노드들</strong>로 구성되어 있으며 컨테이너화된 애플리케이션의 구성 요소인 <strong>파드</strong>를 호스트합니다.</li></ul></li></ul><p><br></br></p><h2 id="Kubernetes-Objects"><a href="#Kubernetes-Objects" class="headerlink" title="Kubernetes Objects"></a>Kubernetes Objects</h2><ul><li>쿠버네티스의 오브젝트는 <strong>바라는 상태(desired state)를 담은 레코드</strong>입니다. 오브젝트를 생성하면 쿠버네티스의 컨트롤 플레인에서 오브젝트의 <strong>현재 상태(current state)</strong> 와 바라는 상태를 일치시키기 위해 끊임없이 관리합니다.</li><li>쿠버네티스의 오브젝트에는 파드(pod), 서비스(service), 디플로이먼트(Deployment) 등이 있습니다.</li></ul></li></ul><p>  <br></br></p><h2 id="EKS"><a href="#EKS" class="headerlink" title="EKS"></a>EKS</h2><ul><li><p><a href="https://docs.aws.amazon.com/eks/latest/userguide/what-is-eks.html">Amazon EKS</a>는 Kubernetes를 쉽게 실행할 수 있는 관리형 서비스입니다. Amazon EKS를 사용하시면 AWS 환경에서 Kubernetes 컨트롤 플레인 또는 노드를 직접 설치, 운영 및 유지할 필요가 없습니다.</p></li><li><p>Amazon EKS는 여러 가용 영역에서 Kubernetes 컨트롤 플레인 인스턴스를 실행하여 고가용성을 보장합니다. 또한, 비정상 컨트롤 플레인 인스턴스를 자동으로 감지하고 교체하며 자동화된 버전 업그레이드 및 패치를 제공합니다.</p></li><li><p>Amazon EKS는 다양한 AWS 서비스들과 연동하여 애플리케이션에 대한 확장성 및 보안을 제공하는 서비스를 제공합니다.</p><ul><li>컨테이너 이미지 저장소인 <strong>Amazon ECR(Elastic Container Registry)</strong></li><li>로드 분산을 위한 <strong>AWS ELB(Elastic Load Balancing)</strong></li><li>인증을 위한 <strong>AWS IAM</strong></li><li>격리된 <strong>Amazon VPC</strong></li></ul></li><li><p>Amazon EKS는 오픈 소스 Kubernetes 소프트웨어의 최신 버전을 실행하므로 <strong>Kubernetes 커뮤니티에서 사용되는 플러그인과 툴을 모두 사용</strong>할 수 있습니다. 온프레미스 데이터 센터에서 실행 중인지 퍼블릭 클라우드에서 실행 중인지에 상관없이, Amazon EKS에서 실행 중인 애플리케이션은 표준 Kubernetes 환경에서 실행 중인 애플리케이션과 완벽하게 호환됩니다. 즉, 코드를 수정하지 않고 표준 Kubernetes 애플리케이션을 Amazon EKS로 손쉽게 마이그레이션할 수 있습니다.</p></li><li><p>이 워크샵을 위해서는 administrator IAM  권한이 필요합니다.</p><p><br></br></p><h2 id="Cloud9"><a href="#Cloud9" class="headerlink" title="Cloud9"></a>Cloud9</h2></li><li><p>AWS Cloud9은 브라우저만으로도 코드를 작성, 실행 및 디버깅할 수 있는 IDE입니다. 코드 편집기, 디버거 및 터미널이 포함되어 있으며 많이 사용되는 프로그래밍 언어를 위한 필수 도구가 사전에 패키징되어 제공되므로, 새로운 프로젝트를 시작하기 위해 파일을 설치하거나 개발 머신을 구성할 필요가 없다는 특징을 가지고 있습니다.</p><p><br></br></p><h3 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h3></li><li><p>쿠버네티스 클러스터에 명령을 내리는 CLI입니다.</p></li><li><p>쿠버네티스는 오브젝트 생성, 수정 혹은 삭제와 관련한 동작을 수행하기 위해 <strong>쿠버네티스 API</strong>를 사용합니다. 이때, kubectl CLI를 사용하면 해당 명령어가 쿠버네티스 API를 호출해 관련 동작을 수행합니다.</p><p><br></br></p><h3 id="eksctl"><a href="#eksctl" class="headerlink" title="eksctl"></a>eksctl</h3></li><li><p><a href="https://eksctl.io/">eksctl</a>이란 EKS 클러스터를 쉽게 생성 및 관리하는 CLI 툴입니다. Go 언어로 쓰여 있으며 CloudFormation 형태로 배포됩니다.</p><h3 id="eksctl로-클러스터-생성하기"><a href="#eksctl로-클러스터-생성하기" class="headerlink" title="eksctl로 클러스터 생성하기"></a>eksctl로 클러스터 생성하기</h3></li><li><p>eksctl을 사용하여 아무 설정 값을 주지 않고 이 명령어(<code>eksctl create cluster</code>)를 실행하면 default parameter로 클러스터가 배포됩니다.</p></li><li><p>원하는 설정이 있다면 yaml파일을 만들어서 배포하면 됩니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span> <span class="string">&gt; eks-demo-cluster.yaml</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string"></span><span class="attr">apiVersion:</span> <span class="string">eksctl.io/v1alpha5</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterConfig</span></span><br><span class="line"></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">eks-demo</span> <span class="comment"># 생성할 EKS 클러스터명</span></span><br><span class="line"><span class="attr">  region:</span> <span class="string">$&#123;AWS_REGION&#125;</span> <span class="comment"># 클러스터를 생성할 리젼</span></span><br><span class="line"><span class="attr">  version:</span> <span class="string">"1.21"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">vpc:</span></span><br><span class="line"><span class="attr">  cidr:</span> <span class="string">"192.168.0.0/16"</span> <span class="comment"># 클러스터에서 사용할 VPC의 CIDR</span></span><br><span class="line"></span><br><span class="line"><span class="attr">managedNodeGroups:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">node-group</span> <span class="comment"># 클러스터의 노드 그룹명</span></span><br><span class="line"><span class="attr">    instanceType:</span> <span class="string">m5.large</span> <span class="comment"># 클러스터 워커 노드의 인스턴스 타입</span></span><br><span class="line"><span class="attr">    desiredCapacity:</span> <span class="number">3</span> <span class="comment"># 클러스터 워커 노드의 갯수</span></span><br><span class="line"><span class="attr">    volumeSize:</span> <span class="number">10</span>  <span class="comment"># 클러스터 워커 노드의 EBS 용량 (단위: GiB)</span></span><br><span class="line"><span class="attr">    ssh:</span></span><br><span class="line"><span class="attr">      enableSsm:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    iam:</span></span><br><span class="line"><span class="attr">      withAddonPolicies:</span></span><br><span class="line"><span class="attr">        imageBuilder:</span> <span class="literal">true</span> <span class="comment"># AWS ECR에 대한 권한 추가</span></span><br><span class="line">        <span class="comment"># albIngress: true  # albIngress에 대한 권한 추가</span></span><br><span class="line"><span class="attr">        cloudWatch:</span> <span class="literal">true</span> <span class="comment"># cloudWatch에 대한 권한 추가</span></span><br><span class="line"><span class="attr">        autoScaler:</span> <span class="literal">true</span> <span class="comment"># auto scaling에 대한 권한 추가</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cloudWatch:</span></span><br><span class="line"><span class="attr">  clusterLogging:</span></span><br><span class="line"><span class="attr">    enableTypes:</span> <span class="string">["*"]</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li><p><code>eksctl create cluster -f eks-demo-cluster.yaml</code> 로 배포</p></li><li><p>노드 확인</p><ul><li><p><code>kubectl get nodes</code></p><p><img src="/images/eks-workshop/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2021-10-29_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_1.17.55.png" alt="EKS클러스터 구성"></p><ul><li>기본적인 EKS 클러스터 구성은 끝났고, 본격적으로 서비스를 배포하고, 유저가 들어오는 통로인 인그레스를 설정해 봅시다.</li></ul></li></ul></li><li><p>이 상태에서는 클러스터의 노드를 UI에서 확인할 수 없습니다. Console Crediential을 더해줘야 합니다.</p></li><li><p>Cloud9의 IAM credential을 통해, 클러스터를 생성하였기 때문에 <a href="https://console.aws.amazon.com/eks">Amazon EKS 콘솔창</a>에서 해당 클러스터 정보를 확인하기 위해서는 실제 콘솔에 접근할 IAM entity(사용자 또는 역할)의 AWS Console credential을 클러스터에 추가하는 작업이 필요합니다.</p><ul><li><code>rolearn=$(aws cloud9 describe-environment-memberships --environment-id=$C9_PID | jq -r &#39;.memberships[].userArn&#39;)</code></li><li><code>assumedrolename=$(echo ${rolearn} | awk -F/ &#39;{print $(NF-1)}&#39;)rolearn=$(aws iam get-role --role-name ${assumedrolename} --query Role.Arn --output text)</code> rolearn에 자신의 arn을 넣어주도록 합시다.</li><li>echo ${rolearn}</li><li><code>eksctl create iamidentitymapping --cluster eks-demo --arn ${rolearn} --group system:masters --username admin</code> identity 맵핑</li><li>kubectl describe configmap -n kube-system aws-auth 적용 확인</li></ul><p><br></br></p><h2 id="Ingress-Controller"><a href="#Ingress-Controller" class="headerlink" title="Ingress Controller"></a>Ingress Controller</h2></li><li><p><strong>AWS Load Balancer Controller</strong>는 <strong>구 AWS ALB Ingress Controller</strong>에서 리브랜드된 개념입니다.</p></li><li><p><strong>인그레스(Ingress)</strong> 는 주로 <strong>클러스터 외부에서 쿠버네티스 내부</strong>로 접근할 때, 요청들을 어떻게 처리할지 정의해놓은 규칙이자 리소스 오브젝트입니다. 한마디로 외부의 요청이 내부로 접근하기 위한 관문의 역할을 하는 것이죠. 외부 요청에 대한 로드 밸런싱, TLS/SSL 인증서 처리, HTTP 경로에 대한 라우팅 등을 설정할 수 있습니다. 인그레스는 L7 영역의 요청을 처리합니다.</p></li><li><p>쿠버네티스에서 서비스 타입 중, NodePort 혹은 LoadBalancer로도 외부로 노출할 수 있지만 인그레스 없이 서비스를 사용할 경우, 모든 서비스에게 라우팅 규칙 및 TLS/SSL 등의 상세한 옵션들을 적용해야 되죠. 그래서 인그레스가 필요합니다.</p><p><img src="/images/eks-workshop/Untitled.png" alt="Ingress"></p></li><li><p>인그레스는 외부 요청 처리에 대한 규칙들을 설정해놓은 것을 의미하며, 이런 설정이 동작하기 위해서 필요한 것이 <strong>인그레스 컨트롤러</strong>입니다. kube-controller-manager의 일부로 실행되는 다른 컨트롤러와 달리 인그레스 컨트롤러는 클러스터와 함께 생성되진 않습니다. 따라서 직접 구현해야 합니다.</p><h3 id="AWS-Load-Balancer-만들기"><a href="#AWS-Load-Balancer-만들기" class="headerlink" title="AWS Load Balancer 만들기"></a>AWS Load Balancer 만들기</h3></li><li><p><a href="https://docs.aws.amazon.com/eks/latest/userguide/alb-ingress.html">Amazon EKS의 Application Load Balancing</a>이란 클러스터에 인그레스 자원이 생성될 때에 ALB(Application Load Balancer) 및 필요한 자원이 생성되도록 트리거하는 컨트롤러입니다. 인그레스 자원들은 ALB를 구성하여 HTTP 또는 HTTPS 트래픽을 클러스터 내 파드로 라우팅합니다.</p><ul><li>쿠버네티스의 <code>Ingress</code>의 경우, <code>Application Load Balancers</code>으로 프로비저닝됩니다.</li><li>쿠버네티스의 <code>Service</code>의 경우, <code>Network Load Balancers</code>으로 프로비저닝됩니다.</li></ul></li><li><p>AWS Load Balancer 컨트롤러에서 지원하는 <strong>트래픽 모드</strong>는 아래의 두 가지입니다.</p><ul><li>Instance(default): 클러스터 내 노드를 ALB의 대상으로 등록합니다. ALB에 도달하는 트래픽은 NodePort로 라우팅된 다음 파드로 프록시됩니다.</li><li>IP: 파드를 ALB 대상으로 등록합니다. ALB에 도달하는 트래픽은 파드로 <strong>직접</strong> 라우팅됩니다. 해당 트래픽 모드를 사용하기 위해선 <strong>ingress.yaml 파일에 주석을 사용하여 명시적으로 지정해야</strong> 합니다.</li></ul><p>![Instance Mode, IP Mode](/images/eks-workshop/Untitled 1.png)</p><ul><li>각종 배포들에 사용할 manifests 디렉토리를 만들어놓고 관리하는 것을 추천합니다.</li></ul></li><li><p>AWS Load Balancer 컨트롤러를 배포하기 전, 우리는 몇 가지 작업을 수행해야 합니다. controller가 워커 노드 위에서 동작되기 때문에 IAM permissions를 통해, AWS ALB/NLB 리소스에 접근할 수 있도록 만들어야 합니다. IAM permissions는 ServiceAccount를 위한 IAM roles를 설치하거나 워커 노드의 IAM roles에 직접적으로 붙일 수 있습니다.</p></li><li><p>먼저, 클러스터에 대한 <strong>IAM OIDC(OpenID Connect) identity Provider</strong>를 생성합니다. Pod와 같은 클러스터 내 쿠버네티스가 생성한 항목이 API Server 또는 외부 서비스에 인증하는데 사용되는 <strong><a href="https://kubernetes.io/ko/docs/reference/access-authn-authz/service-accounts-admin/">service account</a></strong>에 IAM role을 사용하기 위해, 생성한 클러스터(현재 실습에서의 <em>eks-demo</em>)에 <strong>IAM OIDC provider</strong>가 존재해야 합니다.</p><ul><li><p>eksctl utils associate-iam-oidc-provider <br>–region ${AWS_REGION} <br>–cluster eks-demo <br>–approve</p></li><li><p>OIDC provider URL</p><ul><li>aws eks describe-cluster –name eks-demo –query “cluster.identity.oidc.issuer” –output text</li><li>output: <a href="https://oidc.eks.ap-northeast-2.amazonaws.com/id/8A6E78112D7F1C4DC352B1B511DD13CF">https://oidc.eks.ap-northeast-2.amazonaws.com/id/8A6E78112D7F1C4DC352B1B511DD13CF</a><ul><li>뒤에 id 부분을 복사해서 다음과 같이 입력합니다.</li><li>aws iam list-open-id-connect-providers | grep 8A6E78112D7F1C4DC352B1B511DD13CF</li><li>결과 값이 출력되면 <strong>IAM OIDC identity provider</strong>가 클러스터에 생성이 된 것이고, 아무 값도 나타나지 않으면 생성 작업을 수행해야 합니다.</li></ul></li></ul></li><li><p>AWS Load Balancer Controller에 부여할 IAM Policy를 생성하는 작업을 수행합니다.</p><ul><li>aws iam create-policy <br>–policy-name AWSLoadBalancerControllerIAMPolicy <br>–policy-document <a href="https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json">https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json</a></li></ul></li><li><p>AWS Load Balancer Controller를 위한 ServiceAccount를 생성합니다.</p><ul><li>eksctl create iamserviceaccount <br>–cluster eks-demo <br>–namespace kube-system <br>–name aws-load-balancer-controller <br>–attach-policy-arn arn:aws:iam::$ACCOUNT_ID:policy/AWSLoadBalancerControllerIAMPolicy <br>–override-existing-serviceaccounts <br>–approve</li></ul></li><li><p>AWS Load Balancer controller를 클러스터에 추가하는 작업을 수행합니다. 먼저, 인증서 구성을 웹훅에 삽입할 수 있도록 <strong><a href="https://github.com/jetstack/cert-manager">cert-manager</a></strong>를 설치합니다. <strong>Cert-manager</strong>는 쿠버네티스 클러스터 내에서 TLS인증서를 자동으로 프로비저닝 및 관리하는 오픈 소스입니다.</p><ul><li>kubectl apply –validate=false -f <a href="https://github.com/jetstack/cert-manager/releases/download/v1.4.1/cert-manager.yaml">https://github.com/jetstack/cert-manager/releases/download/v1.4.1/cert-manager.yaml</a></li></ul></li><li><p>load balancer controller yaml</p><ul><li>wget <a href="https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.2.1/docs/install/v2_2_1_full.yaml">https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.2.1/docs/install/v2_2_1_full.yaml</a></li></ul></li><li><p>yaml 파일에서 클러스터의 <code>cluster-name</code>을 편집합니다. 본 실습에서는 <strong>eks-demo</strong>로 설정합니다.</p><ul><li>spec:<br>containers:</li><li>args:</li><li>–cluster-name=eks-demo # 생성한 클러스터 이름을 입력</li><li>–ingress-class=alb<br>image: amazon/aws-alb-ingress-controller:v2.2.0</li></ul></li><li><p>ServiceAccount yaml spec 삭제</p><ul><li>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>labels:<br><a href="http://app.kubernetes.io/component:">app.kubernetes.io/component:</a> controller<br><a href="http://app.kubernetes.io/name:">app.kubernetes.io/name:</a> aws-load-balancer-controller<br>name: aws-load-balancer-controller<br>namespace: kube-system</li></ul><hr></li></ul></li><li><p>배포</p><ul><li><code>kubectl apply -f v2_2_1_full.yaml</code></li><li>확인 kubectl get deployment -n kube-system aws-load-balancer-controller</li><li>서비스 어카운드 확인 kubectl get sa aws-load-balancer-controller -n kube-system -o yaml</li></ul></li><li><p>클러스터 내부에서 필요한 기능들을 위해 실행되는 파드들을 <strong>애드온(Addon)</strong> 이라고 합니다. 애드온에 사용되는 파드들은 디플로이먼트, 리플리케이션 컨트롤러 등에 의해 관리됩니다. 그리고 이 애드온이 사용하는 네임스페이스가 <strong>kube-system</strong>입니다. Yaml 파일에서 네임스페이스를 kube-system으로 명시했기에 위의 명령어로 파드 이름이 도출되면 정상적으로 배포된 것입니다. 또한, 아래의 명령어로 관련 로그를 확인할 수 있습니다.</p><ul><li>kubectl logs -n kube-system $(kubectl get po -n kube-system | egrep -o “aws-load-balancer[a-zA-Z0-9-]+”)</li><li>ALBPOD=$(kubectl get pod -n kube-system | egrep -o “aws-load-balancer[a-zA-Z0-9-]+”)</li><li>kubectl describe pod -n kube-system ${ALBPOD}</li></ul><p><br></br></p><h2 id="서비스-배포"><a href="#서비스-배포" class="headerlink" title="서비스 배포"></a>서비스 배포</h2></li><li><p>서비스 배포하는 순서는 다음과 같습니다.</p><p>![서비스 배포 순서](/images/eks-workshop/Untitled 2.png)</p></li><li><p>소스 코드 다운로드</p></li><li><p>Amazon ECR에 각 서비스에 대한 리포지토리 생성</p></li><li><p>Dockerfile을 포함한 소스 코드 위치에서 컨테이너 이미지 빌드 후, 리포지토리에 푸시</p></li><li><p>각 서비스에 대한 Deployment, Service, Ingress 매니페스트 파일 생성 및 배포</p></li><li><p>사용자가 실제 서비스를 접근하는 순서</p><p>![사용자가 접근하는 순서](/images/eks-workshop/Untitled 3.png)</p></li><li><p>우리의 서비스는 두 개의 백엔드가 존재합니다.</p><ul><li>Flask</li><li>Node.js</li></ul></li><li><p>각 백엔드의 API가 잘 동작하는지 확인하고 프론트엔드 배포로 넘어가봅시다.</p></li></ul><p>  <br></br></p><h3 id="Flask-배포"><a href="#Flask-배포" class="headerlink" title="Flask 배포"></a>Flask 배포</h3><ul><li><p>cd ~/environment/manifests/</p></li><li><p>deploy manifest</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF&gt;</span> <span class="string">flask-deployment.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">demo-flask-backend</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">demo-flask-backend</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">demo-flask-backend</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">demo-flask-backend</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/demo-flask-backend:latest</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li><p><strong>service manifest</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF&gt;</span> <span class="string">flask-service.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">demo-flask-backend</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">alb.ingress.kubernetes.io/healthcheck-path:</span> <span class="string">"/contents/aws"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">     app:</span> <span class="string">demo-flask-backend</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Ingress manifest</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF&gt;</span> <span class="string">ingress.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">"backend-ingress"</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">kubernetes.io/ingress.class:</span> <span class="string">alb</span></span><br><span class="line">    <span class="string">alb.ingress.kubernetes.io/scheme:</span> <span class="string">internet-facing</span></span><br><span class="line">    <span class="string">alb.ingress.kubernetes.io/target-type:</span> <span class="string">ip</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">    - http:</span></span><br><span class="line"><span class="attr">        paths:</span></span><br><span class="line"><span class="attr">          - path:</span> <span class="string">/contents</span></span><br><span class="line"><span class="attr">            pathType:</span> <span class="string">Prefix</span></span><br><span class="line"><span class="attr">            backend:</span></span><br><span class="line"><span class="attr">              service:</span></span><br><span class="line"><span class="attr">                name:</span> <span class="string">"demo-flask-backend"</span></span><br><span class="line"><span class="attr">                port:</span></span><br><span class="line"><span class="attr">                  number:</span> <span class="number">8080</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li><p>순서대로 배포</p></li><li><p><code>kubectl apply -f flask-deployment.yamlkubectl apply -f flask-service.yamlkubectl apply -f ingress.yaml</code></p></li><li><p>echo <a href="http://%24/">http://$</a>(kubectl get ingress/backend-ingress -o jsonpath=’{.status.loadBalancer.ingress[*].hostname}’)/contents/aws 여기서 나온 주소로 확인</p><ul><li>ingress object가 배포되는 동안 기다리고 주소로 접속</li></ul><p>![flask 백엔드 배포](/images/eks-workshop/Untitled 4.png)</p><p><br></br></p><h3 id="node-js-배포"><a href="#node-js-배포" class="headerlink" title="node.js 배포"></a>node.js 배포</h3></li><li><p><strong>deploy manifest</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF&gt;</span> <span class="string">nodejs-deployment.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">demo-nodejs-backend</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">demo-nodejs-backend</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">demo-nodejs-backend</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">demo-nodejs-backend</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">public.ecr.aws/y7c9e1d2/joozero-repo:latest</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">3000</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li><p><strong>service manifest</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF&gt;</span> <span class="string">nodejs-service.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">demo-nodejs-backend</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">alb.ingress.kubernetes.io/healthcheck-path:</span> <span class="string">"/services/all"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">     app:</span> <span class="string">demo-nodejs-backend</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">3000</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li><p><strong>ingress manifest</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF&gt;</span> <span class="string">ingress.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">"backend-ingress"</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">kubernetes.io/ingress.class:</span> <span class="string">alb</span></span><br><span class="line">    <span class="string">alb.ingress.kubernetes.io/scheme:</span> <span class="string">internet-facing</span></span><br><span class="line">    <span class="string">alb.ingress.kubernetes.io/target-type:</span> <span class="string">ip</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">    - http:</span></span><br><span class="line"><span class="attr">        paths:</span></span><br><span class="line"><span class="attr">          - path:</span> <span class="string">/contents</span></span><br><span class="line"><span class="attr">            pathType:</span> <span class="string">Prefix</span></span><br><span class="line"><span class="attr">            backend:</span></span><br><span class="line"><span class="attr">              service:</span></span><br><span class="line"><span class="attr">                name:</span> <span class="string">"demo-flask-backend"</span></span><br><span class="line"><span class="attr">                port:</span></span><br><span class="line"><span class="attr">                  number:</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># 추가된 부분 확인</span></span><br><span class="line"><span class="attr">          - path:</span> <span class="string">/services</span></span><br><span class="line"><span class="attr">            pathType:</span> <span class="string">Prefix</span></span><br><span class="line"><span class="attr">            backend:</span></span><br><span class="line"><span class="attr">              service:</span></span><br><span class="line"><span class="attr">                name:</span> <span class="string">"demo-nodejs-backend"</span></span><br><span class="line"><span class="attr">                port:</span></span><br><span class="line"><span class="attr">                  number:</span> <span class="number">8080</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li><p>순서대로 배포</p><ul><li><p><code>kubectl apply -f nodejs-deployment.yamlkubectl apply -f nodejs-service.yamlkubectl apply -f ingress.yaml</code></p></li><li><p>echo <a href="http://%24/">http://$</a>(kubectl get ingress/backend-ingress -o jsonpath=’{.status.loadBalancer.ingress[*].hostname}’)/services/all</p><p>![node.js 백엔드 배포](/images/eks-workshop/Untitled 5.png)</p></li></ul><p><br></br></p><h3 id="프론트엔드-배포"><a href="#프론트엔드-배포" class="headerlink" title="프론트엔드 배포"></a>프론트엔드 배포</h3></li><li><p>프론트엔드 소스 다운</p><p>cd /home/ec2-user/environment<br>git clone <a href="https://github.com/joozero/amazon-eks-frontend.git">https://github.com/joozero/amazon-eks-frontend.git</a></p></li><li><p>ecr repository 생성</p><p>aws ecr create-repository <br>–repository-name demo-frontend <br>–image-scanning-configuration scanOnPush=true <br>–region ${AWS_REGION}</p></li><li><p>프론트엔드 소스에서 url을 백엔드의 ingress 주소로 변경\</p><ul><li>App.js<ul><li>echo <a href="http://%24/">http://$</a>(kubectl get ingress/backend-ingress -o jsonpath=’{.status.loadBalancer.ingress[*].hostname}’)/contents/‘${search}’</li></ul></li><li>page/UpperPage.js<ul><li>echo <a href="http://%24/">http://$</a>(kubectl get ingress/backend-ingress -o jsonpath=’{.status.loadBalancer.ingress[*].hostname}’)/services/all</li></ul></li></ul></li><li><p>cd /home/ec2-user/environment/amazon-eks-frontend<br>npm install<br>npm run build</p></li><li><p>npm audit fix를 해도 안된다면</p><ul><li><code>export NODE_OPTIONS=--openssl-legacy-provider</code></li></ul></li><li><p>ECR demo-fronted 로 네이밍 한 뒤, 푸쉬</p><ul><li>docker build -t demo-frontend .</li><li>docker tag demo-frontend:latest$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/demo-frontend:latest</li><li>docker push $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/demo-frontend:latest</li></ul></li><li><p><strong>fronted배포 manifest</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd</span> <span class="string">/home/ec2-user/environment/manifests</span></span><br><span class="line"></span><br><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF&gt;</span> <span class="string">frontend-deployment.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">demo-frontend</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">demo-frontend</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">demo-frontend</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">demo-frontend</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/demo-frontend:latest</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li><p><strong>service</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF&gt;</span> <span class="string">frontend-service.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">demo-frontend</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">alb.ingress.kubernetes.io/healthcheck-path:</span> <span class="string">"/"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">demo-frontend</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li><p>ingress 배포</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF&gt;</span> <span class="string">ingress.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">"backend-ingress"</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">kubernetes.io/ingress.class:</span> <span class="string">alb</span></span><br><span class="line">    <span class="string">alb.ingress.kubernetes.io/scheme:</span> <span class="string">internet-facing</span></span><br><span class="line">    <span class="string">alb.ingress.kubernetes.io/target-type:</span> <span class="string">ip</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">    - http:</span></span><br><span class="line"><span class="attr">        paths:</span></span><br><span class="line"><span class="attr">          - path:</span> <span class="string">/contents</span></span><br><span class="line"><span class="attr">            pathType:</span> <span class="string">Prefix</span></span><br><span class="line"><span class="attr">            backend:</span></span><br><span class="line"><span class="attr">              service:</span></span><br><span class="line"><span class="attr">                name:</span> <span class="string">"demo-flask-backend"</span></span><br><span class="line"><span class="attr">                port:</span></span><br><span class="line"><span class="attr">                  number:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">          - path:</span> <span class="string">/services</span></span><br><span class="line"><span class="attr">            pathType:</span> <span class="string">Prefix</span></span><br><span class="line"><span class="attr">            backend:</span>  </span><br><span class="line"><span class="attr">              service:</span></span><br><span class="line"><span class="attr">                name:</span> <span class="string">"demo-nodejs-backend"</span></span><br><span class="line"><span class="attr">                port:</span></span><br><span class="line"><span class="attr">                  number:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">          - path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">            pathType:</span> <span class="string">Prefix</span></span><br><span class="line"><span class="attr">            backend:</span></span><br><span class="line"><span class="attr">              service:</span></span><br><span class="line"><span class="attr">                name:</span> <span class="string">"demo-frontend"</span></span><br><span class="line"><span class="attr">                port:</span></span><br><span class="line"><span class="attr">                  number:</span> <span class="number">80</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li><p>배포</p><ul><li><code>kubectl apply -f frontend-deployment.yamlkubectl apply -f frontend-service.yamlkubectl apply -f ingress.yaml</code></li></ul><p>![프론트까지 배포 완료](/images/eks-workshop/Untitled 6.png)</p><img src="/images/eks-workshop/Untitled 7.png" alt="모든 배포가 완료된 모습" style="zoom:80%;" /><p><br></br></p><h2 id="Fargate"><a href="#Fargate" class="headerlink" title="Fargate"></a>Fargate</h2></li></ul><p>  <strong>AWS Fargate</strong>는 컨테이너에 적합한 서버리스 컴퓨팅 엔진으로 Amazon Elastic Container Service(ECS) 및 Amazon Elastic Kubernetes Service(EKS)에서 모두 작동합니다. Fargate는 애플리케이션을 빌드하는 데 보다 쉽게 초점을 맞출 수 있도록 해줍니다. Fargate에서는 서버를 프로비저닝하고 관리할 필요가 없어 애플리케이션별로 리소스를 지정하고 관련 비용을 지불할 수 있으며, 계획적으로 애플리케이션을 격리함으로써 보안 성능을 향상시킬 수 있습니다.</p><ul><li><p>클러스터에 Fargate로 pod를 배포하기 위해서는 pod가 실행될 때 사용하는 하나 이상의 fargate profile을 정의해야 합니다. 즉, fargate profile이란 fargate로 pod를 생성하기 위한 조건을 명시해놓은 프로파일이라고 보시면 됩니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd</span> <span class="string">/home/ec2-user/environment/manifestscat</span> <span class="string">&lt;&lt;EOF&gt;</span> <span class="string">eks-demo-fargate-profile.yaml---apiVersion:</span> <span class="string">eksctl.io/v1alpha5kind:</span> <span class="attr">ClusterConfigmetadata:</span>  <span class="attr">name:</span> <span class="string">eks-demo</span>  <span class="attr">region:</span> <span class="string">$&#123;AWS_REGION&#125;fargateProfiles:</span>  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">frontend-fargate-profile</span>    <span class="attr">selectors:</span>      <span class="bullet">-</span> <span class="attr">namespace:</span> <span class="string">default</span>        <span class="attr">labels:</span>          <span class="attr">app:</span> <span class="string">frontend-fargateEOF</span></span><br></pre></td></tr></table></figure><ul><li>yaml 파일에서 <strong>selectors</strong>에 기재된 조건에 부합하는 pod의 경우, fargate로 배포됩니다.</li></ul></li><li><p>아래의 명령어를 통해, fargate profile을 프로비저닝합니다.</p><ul><li>eksctl create fargateprofile -f eks-demo-fargate-profile.yaml</li><li>정상 동작 확인<ul><li>eksctl get fargateprofile –cluster eks-demo -o json</li></ul></li></ul></li><li><p>배포한 3개의 pod 중, 프론트앤드 pod를 fargate로 프로비저닝하는 작업을 수행하겠습니다. 먼저, 기존의 pod를 삭제하는 작업을 수행합니다. 아래의 명령어를 yaml 파일이 위치한 폴더에서 작업합니다.</p><ul><li>kubectl delete -f frontend-deployment.yaml</li></ul></li><li><p>그리고 frontend-deployment.yaml 파일을 수정합니다. 이 yaml파일에서 미리 등록한 fargate profile을 넣어주겠습니다. label값을 frontend-fargate로 변경해야 합니다. 1번에서 key 값이 app이고 value 값이 frontend-fargate이며 namespace가 default일 때, pod를 fargate로 배포하겠다는 조건을 맞추기 위해 값을 변경하였습니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd</span> <span class="string">/home/ec2-user/environment/manifestscat</span> <span class="string">&lt;&lt;EOF&gt;</span> <span class="string">frontend-deployment.yaml---apiVersion:</span> <span class="string">apps/v1kind:</span> <span class="attr">Deploymentmetadata:</span>  <span class="attr">name:</span> <span class="string">demo-frontend</span>  <span class="attr">namespace:</span> <span class="attr">defaultspec:</span>  <span class="attr">replicas:</span> <span class="number">3</span>  <span class="attr">selector:</span>    <span class="attr">matchLabels:</span>      <span class="attr">app:</span> <span class="string">frontend-fargate</span>  <span class="attr">template:</span>    <span class="attr">metadata:</span>      <span class="attr">labels:</span>        <span class="attr">app:</span> <span class="string">frontend-fargate</span>    <span class="attr">spec:</span>      <span class="attr">containers:</span>        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">demo-frontend</span>          <span class="attr">image:</span> <span class="string">$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/demo-frontend:latest</span>          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span>          <span class="attr">ports:</span>            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li><p>frontend-service.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF&gt;</span> <span class="string">frontend-service.yaml---apiVersion:</span> <span class="attr">v1kind:</span> <span class="attr">Servicemetadata:</span>  <span class="attr">name:</span> <span class="string">demo-frontend</span>  <span class="attr">annotations:</span>    <span class="string">alb.ingress.kubernetes.io/healthcheck-path:</span> <span class="string">"/"</span><span class="attr">spec:</span>  <span class="attr">selector:</span>    <span class="attr">app:</span> <span class="string">frontend-fargate</span>  <span class="attr">type:</span> <span class="string">NodePort</span>  <span class="attr">ports:</span>    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span>      <span class="attr">port:</span> <span class="number">80</span>      <span class="attr">targetPort:</span> <span class="number">80</span><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li><p>매니페스트 배포</p><p><code>kubectl apply -f frontend-deployment.yamlkubectl apply -f frontend-service.yaml</code></p></li><li><p>배포 상태 확인</p><ul><li>kubectl get po -o wide</li></ul></li><li><p>이전과 같은 상태인지 웹 확인</p><ul><li>echo <a href="http://%24/">http://$</a>(kubectl get ingress/backend-ingress -o jsonpath=’{.status.loadBalancer.ingress[*].hostname}’)</li></ul><p><br></br></p><h2 id="GitOps"><a href="#GitOps" class="headerlink" title="GitOps?"></a>GitOps?</h2></li><li><p>쿠버네티스 환경에서 CI/CD를 위해서는 Git과 워크플로우 툴의 연결이 필요하고, 이를 통해서 자동화 하는 방안이 필요합니다.</p></li><li><p>일일이 수정하는 것은 너무나 번거롭습니다.</p></li><li><p>그래서 등장한 것이 GitOps입니다.</p></li><li><p>Github Action, Kustomize, Helm Chart, Argo CD를 활용해 GitOps를 체험해보겠습니다.</p><p><br></br></p><h2 id="GitOps-전에-알아야-할-개념들"><a href="#GitOps-전에-알아야-할-개념들" class="headerlink" title="GitOps 전에 알아야 할 개념들"></a>GitOps 전에 알아야 할 개념들</h2></li><li><p>앞서 소개한 Kustomize나 Argo CD등은 조금 생소해 보입니다.</p></li><li><p>이해를 위해 미리 한번 정리를 하고 넘어가보겠습니다.</p><h3 id="Kustomize"><a href="#Kustomize" class="headerlink" title="Kustomize"></a>Kustomize</h3></li><li><p>Kubernetes에서 app을 배포를 할때 manifest 파일을 작성한다</p></li><li><p>staging 환경에 배포하는 요구사항이 발생하고, 수정사항이 계속 발생한다면, 작업을 반복해야 하는 이슈가 생긴다</p></li><li><p>관리해야할 manifest파일이 3배가 되어버림</p></li><li><p>겹치는 내용이 대부분인데, 이것을 base라고 하고, 환경마다 차이가 나는 부분을 overlay로 관리해보자</p></li><li><p>kustomize는 이렇게, 공통 부분과 차이가 나는 부분을 분리하는 것에서 시작한다.</p></li><li><p>base와 overlay를 머지하면서 환경마다 다른 spec의 리소스를 생성하게 된다.</p></li><li><p>개발 환경마다 소스 구분하여 configmap, secret생성이 가능하다</p></li><li><p>resource이름에 prefix를 추가하는 기능도 제공한다</p></li><li><p>Kustomize를 적용해서 직접 수동으로 배포할 수도 있다</p><ul><li>GitOps로 ArgoCD나 Flux등을 사용해서 배포과정을 자동화 한다.</li><li>Flux 는 쿠버네티스 클러스터가 설정 소스(git..)와 동기화된 상태를 유지하고 새 코드가 추가되면 자동으로 업데이트 해주는 도구</li></ul><p><br></br></p><h3 id="Helm"><a href="#Helm" class="headerlink" title="Helm"></a>Helm</h3></li><li><p>쿠버네티스 패키지 관리를 도와줌</p><ul><li>npm, pip와 비슷한 역할</li></ul></li><li><p>Chart: 헬름 패키지</p><ul><li>kubernetes를 설명하는 파일들의 집합</li><li>kubernetes에서 app이 동작하기 위한 모든 리소스들이 포함되어 있음</li></ul></li><li><p>Repository</p><ul><li>차트 저장소, 차트르 모아두고 공유함</li></ul></li><li><p>Release</p><ul><li>kubernetes 클러스터에서 구동되는 차트 인스턴스</li><li>동일한 차트를 여러번 설치할 수 있고 이는 새 릴리즈로 관리됩니다.</li><li>릴리즈 될 때 패키지된 차트와 config가 결합되어 정상 실행 됩니다</li></ul></li><li><p>작업 순서</p><ul><li>Helm 차트를 원하는 레포에서 검색 후 설치 → 각 설치에 따른 새로운 릴리즈 생성</li></ul><p><br></br></p><h3 id="Argo-CD"><a href="#Argo-CD" class="headerlink" title="Argo CD"></a>Argo CD</h3></li><li><p>Continuous Delivery</p><ul><li>지속적 통합을 통해 테스트 되고 빌드된 코드를 지속적으로 전달하여 제품의 질적 향상을 향하는 것</li></ul></li><li><p>쿠버네티스 운영과 관련된 manifest 파일 관리하고 있는 원격 레포지토리를 조회</p></li><li><p>변경 내역이 감지되면 이를 반영하여 배포함(Auto Sync 옵션)</p></li><li><p>히스토리를 저장하고, 롤백이 가능함</p><p><img src="/images/eks-workshop/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2021-11-03_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_11.46.28.png" alt="Dev, Ops Pipeline"></p></li><li><p>argo의 장점</p><ul><li>실행 단위가 컨테이너기 때문에 고립성이 높다<ul><li>개별 작업마다 실행환경이 다양한 경우 실행환경이 섞이지 않고 단독적인 환경을 제공할 수 있다.</li><li>하나의 역할을 담당하는 Job을 단일하게 개발할 수 있어 재사용성을 높일 수 있다.<ul><li>데이터 입출만 잘 맞춰 놓으면 단일 역할을 하는 Job을 여러개 만들고, 블록처럼 쌓을 수 있다.</li></ul></li></ul></li></ul></li><li><p>argo의 단점</p><ul><li>Pod를 생성하고 삭제하는 비용이 크다.<ul><li>간단한 작업이라면 프로세스 또는 스레드 레벨에서 처리하는 게 효율적일 때가 있다</li></ul></li><li>각 스텝마다 개별적인 컨테이너를 실행해서 Job간에 데이터를 빠르게 공유하는 것이 힘들다.<ul><li>Pod 내부 컨테이너 간에만 volume공유가 가능하다</li></ul></li></ul></li><li><p>데이터 파이프라인 및 기계학습 모델 훈련에 활용 가능</p><ul><li>데이터 타입에 따라 추출하는 소스에 따라 상이한 실행환경<ul><li>데이터 추출 - Apache sqoop(Java runtime, hadoop 라이브러리 필요)<ul><li>S3 - aws cli, boto3…</li></ul></li><li>ML<ul><li>python</li><li>R</li></ul></li></ul></li><li>고립성이 굉장히 좋기 때문에 ML워크플로우 툴로도 활용이 가능함</li></ul><p><br></br></p><h2 id="GitOps-실습"><a href="#GitOps-실습" class="headerlink" title="GitOps 실습"></a>GitOps 실습</h2></li><li><p>목표하는 CI/CD 파이프라인은 다음과 같습니다.</p><img src="/images/eks-workshop/Untitled 8.png" alt="CI/CD" style="zoom:50%;" /></li><li><p>개발에서 작업한 내용은 Github Action을 통해 ECR에 업로드 되고, 이것을 클러스터 Ops쪽에서 Pull을 받아 k8s에 argo CD를 사용해 배포하는 방식입니다.</p></li><li><p>필요한 레포는 두 가지 입니다. application용과 k8s 메니페스트 관리용 레포입니다.</p><ul><li><strong><em>front-app-repo</em></strong>: Frontend 소스가 위치한 레파지토리</li><li><strong><em>k8s-manifest-repo</em></strong>: K8S 관련 메니페스트가 위치한 레파지토리</li></ul></li><li><p>git remote를 위해서 cloud9에 있는 amazon-eks-frontend 디렉토리 git을 초기화 합니다.</p><ul><li>cd ~/environment/amazon-eks-frontend<br>rm -rf .git</li><li>소스 파일들을 푸시합니다.<ul><li>cd ~/environment/amazon-eks-frontend<br>git init<br>git add .<br>git commit -m “first commit”<br>git branch -M main<br>git remote add origin <a href="https://github.com/jinseo-jang/front-app-repo.git">https://github.com/jinseo-jang/front-app-repo.git</a><br>git push -u origin main</li></ul></li></ul></li><li><p>CI/CD 파이프라인을 위해서는 권한이 필요합니다.</p><ul><li><p>front app을 빌드하고 docker image로 만들어지면, 이것을 ECR로 푸시해야 합니다.</p></li><li><p>이 과정은 github Action으로 이루어지기 때문에 최소한의 권한을 넣어줍니다.</p><ul><li><p>IAM  user 생성</p><ul><li>aws iam create-user –user-name github-action</li></ul></li><li><p>ECR policy 생성</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd</span> <span class="string">~/environmentcat</span> <span class="string">&lt;&lt;EOF&gt;</span> <span class="string">ecr-policy.json&#123;</span>    <span class="string">"Version"</span><span class="string">:</span> <span class="string">"2012-10-17"</span><span class="string">,</span>    <span class="string">"Statement"</span><span class="string">:</span> <span class="string">[</span>        <span class="string">&#123;</span>            <span class="string">"Sid"</span><span class="string">:</span> <span class="string">"AllowPush"</span><span class="string">,</span>            <span class="string">"Effect"</span><span class="string">:</span> <span class="string">"Allow"</span><span class="string">,</span>            <span class="string">"Action"</span><span class="string">:</span> <span class="string">[</span>                <span class="string">"ecr:GetDownloadUrlForLayer"</span><span class="string">,</span>                <span class="string">"ecr:BatchGetImage"</span><span class="string">,</span>                <span class="string">"ecr:BatchCheckLayerAvailability"</span><span class="string">,</span>                <span class="string">"ecr:PutImage"</span><span class="string">,</span>                <span class="string">"ecr:InitiateLayerUpload"</span><span class="string">,</span>                <span class="string">"ecr:UploadLayerPart"</span><span class="string">,</span>                <span class="string">"ecr:CompleteLayerUpload"</span>            <span class="string">],</span>            <span class="string">"Resource"</span><span class="string">:</span> <span class="string">"arn:aws:ecr:ap-northeast-2:$&#123;ACCOUNT_ID&#125;:repository/demo-frontend"</span>        <span class="string">&#125;,</span>        <span class="string">&#123;</span>            <span class="string">"Sid"</span><span class="string">:</span> <span class="string">"GetAuthorizationToken"</span><span class="string">,</span>            <span class="string">"Effect"</span><span class="string">:</span> <span class="string">"Allow"</span><span class="string">,</span>            <span class="string">"Action"</span><span class="string">:</span> <span class="string">[</span>                <span class="string">"ecr:GetAuthorizationToken"</span>            <span class="string">],</span>            <span class="string">"Resource"</span><span class="string">:</span> <span class="string">"*"</span>        <span class="string">&#125;</span>    <span class="string">]&#125;EOF</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>이 파일을 사용해 IAM 정책을 생성합니다. 이름은 <code>ecr-policy</code> 입니다.</p><ul><li>aws iam create-policy –policy-name ecr-policy –policy-document file://ecr-policy.json</li></ul></li><li><p>만든 정책을 IAM 유저에게 넣어줍니다.</p><ul><li>aws iam attach-user-policy –user-name github-action –policy-arn arn:aws:iam::${ACCOUNT_ID}:policy/ecr-policy</li></ul></li></ul></li><li><p>Github Secret 생성</p><ul><li>이제 github action에서 사용할 AWS credential, github token을 설정해줍니다.</li><li>AWS credential 생성<ul><li>이 또한 최소한의 권한을 갖는 유저를 만들어 줍니다. 이름은 <code>github-action</code>입니다.</li><li>aws iam create-access-key –user-name github-action</li><li>생성된 accesskey와 secretkey를 저장해놓습니다.</li></ul></li><li>Github으로 들어가서 PAT를 생성해주고 저장해놓습니다.</li><li>front-app-repo로 들어가 Settings에 Secret을 선택합니다.<ul><li>이 레포의 secret을 넣어줍니다.</li><li>Name은 <code>ACTION_TOKEN</code></li><li>Value는 PAT를 넣어줍니다.</li><li>마찬가지로 <code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code> 도 넣어줍니다.</li></ul></li></ul></li><li><p>Github Action을 위한 workflow 스크립트를 생성합니다.</p><ul><li><p>github action을 생성하면 .github/workflows에 만들어지기 때문에 같은 디렉토리를 먼저 만들어줍니다.</p><ul><li>cd ~/environment/amazon-eks-frontend<br>mkdir -p ./.github/workflows</li></ul></li><li><p>실제 build 코드를 작성합니다. <code>build.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd</span> <span class="string">~/environment/amazon-eks-frontend/.github/workflowscat</span> <span class="string">&gt; build.yaml &lt;&lt;EOFname: Build Fronton:  push:    branches: [ main ]jobs:  build:    runs-on: ubuntu-latest    steps:      - name: Checkout source code        uses: actions/checkout@v2      - name: Check Node v        run: node -v      - name: Build front        run: |          npm install          npm run build      - name: Configure AWS credentials        uses: aws-actions/configure-aws-credentials@v1        with:          aws-access-key-id: \$<span class="template-variable">&#123;&#123; secrets.AWS_ACCESS_KEY_ID &#125;&#125;</span>          aws-secret-access-key: \$<span class="template-variable">&#123;&#123; secrets.AWS_SECRET_ACCESS_KEY &#125;&#125;</span>          aws-region: $AWS_REGION      - name: Login to Amazon ECR        id: login-ecr        uses: aws-actions/amazon-ecr-login@v1      - name: Get image tag(verion)        id: image        run: |          VERSION=\$(echo \$<span class="template-variable">&#123;&#123; github.sha &#125;&#125;</span> | cut -c1-8)          echo VERSION=\$VERSION          echo "::set-output name=version::\$VERSION"      - name: Build, tag, and push image to Amazon ECR        id: image-info        env:          ECR_REGISTRY: \$<span class="template-variable">&#123;&#123; steps.login-ecr.outputs.registry &#125;&#125;</span>          ECR_REPOSITORY: demo-frontend          IMAGE_TAG: \$<span class="template-variable">&#123;&#123; steps.image.outputs.version &#125;&#125;</span>        run: |          echo "::set-output name=ecr_repository::\$ECR_REPOSITORY"          echo "::set-output name=image_tag::\$IMAGE_TAG"          docker build -t \$ECR_REGISTRY/\$ECR_REPOSITORY:\$IMAGE_TAG .          docker push \$ECR_REGISTRY/\$ECR_REPOSITORY:\$IMAGE_TAGEOF</span></span><br></pre></td></tr></table></figure><ul><li>IMAGE_TAG값은 랜덤으로 생성되어 ECR로 Push됩니다.<ul><li>$</li></ul></li></ul></li><li><p>github action이 잘 동작하는지 테스트 합니다.</p><ul><li>cd ~/environment/amazon-eks-frontend<br>git add .<br>git commit -m “Add github action build script”<br>git push origin main</li><li></li></ul></li></ul></li><li><p>Kustomize 사용을 위한 k8s manifest 구조화</p><ul><li><p>앞서 설명한 대로, kustomize는 manifest를 base와 overlays로 나뉘어 관리합니다.</p></li><li><p>이 구조를 만들어줍니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd</span> <span class="string">~/environmentmkdir</span> <span class="bullet">-p</span> <span class="string">./k8s-manifest-repo/basemkdir</span> <span class="bullet">-p</span> <span class="string">./k8s-manifest-repo/overlays/devcd</span> <span class="string">~/environment/manifestscp</span> <span class="string">*.yaml</span> <span class="string">../k8s-manifest-repo/basecd</span> <span class="string">../k8s-manifest-repo/basels</span> <span class="bullet">-rlt</span></span><br></pre></td></tr></table></figure></li><li><p><em><code>base</code></em> : kubernetes manifest 원본이 위치한 디렉토리 입니다. 이 안에 위치한 manifest 들은 <em><code>overlays</code></em> 아래에 위치한 <strong>kustomize.yaml</strong> 파일에 담긴 <strong>사용자 지정 설정</strong> 내용에 따라 변경됩니다.</p></li><li><p><em><code>overlays</code></em> : <strong>사용자 입맛에 맞는</strong> 설정 값이 위치한 디렉토리 입니다. 이 설정은 <strong>kustomize.yaml</strong> 에 담습니다. 이 하위에 있는 <em><code>dev</code></em> 디렉토리는 실습을 위해 만든 것으로, 개발 환경에 적용할 설정 파일을 모아 두기 위함 입니다.</p></li></ul></li><li><p>Kustomize manifest 생성</p><ul><li><p>frontend app에 대한 배포 구성을 할 것이기 때문에 frontend부분만 작업 하겠습니다.</p><ul><li>frontend-deployment.yaml 과 frontend-service.yaml 파일을 kustomize 를 통해 배포 시점에 의도한 값(e.g. Image Tag)을 반영 할겁니다</li><li>반영될 값<ul><li><strong><code>metadata.labels</code>:</strong> <code>&quot;env: dev&quot;</code>을 frontend-deployment.yaml, frontend-service.yaml 에 일괄 반영 합니다.</li><li><strong><code>spec.selector</code></strong> : <code>&quot;select.app: frontend-fargate&quot;</code> 를 frontend-deployment.yaml, frontend-service.yaml 에 일괄 반영 합니다.</li><li><strong><code>spec.template.spec.containers.image</code></strong> : <code>&quot;image: &quot;</code> 값을 새롭게 변경된 Image Tag 정보로 업데이트 합니다.</li></ul></li></ul></li><li><p>kustomize.yaml 파일을 만들어서 관리 변경할 manifest대상을 정의합니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd</span> <span class="string">~/environment/k8s-manifest-repo/base</span></span><br><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF&gt;</span> <span class="string">kustomization.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kustomize.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Kustomization</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">frontend-deployment.yaml</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">frontend-service.yaml</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li><p>overlays/dev 부분에 바꿀 부분을 정의합니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd</span> <span class="string">~/environment/k8s-manifest-repo/overlays/dev</span></span><br><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF&gt;</span> <span class="string">front-deployment-patch.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">demo-frontend</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    env:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">frontend-fargate</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">frontend-fargate</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd</span> <span class="string">~/environment/k8s-manifest-repo/overlays/devcat</span> <span class="string">&lt;&lt;EOF&gt;</span> <span class="string">front-service-patch.yamlapiVersion:</span> <span class="attr">v1kind:</span> <span class="attr">Servicemetadata:</span>  <span class="attr">name:</span> <span class="string">demo-frontend</span>  <span class="attr">annotations:</span>    <span class="string">alb.ingress.kubernetes.io/healthcheck-path:</span> <span class="string">"/"</span>  <span class="attr">labels:</span>    <span class="attr">env:</span> <span class="attr">devspec:</span>  <span class="attr">selector:</span>    <span class="attr">app:</span> <span class="string">frontend-fargateEOF</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>마지막으로 위에서 설정 한 파일들(값)을 사용하고 frontend app 빌드에 따라 만들어진 새로운 <strong>Image Tag</strong> 를 사용 하겠다고 정의 하겠습니다. 구체적으로는, <code>name</code> 에 지정된 image는 <code>newName</code>의 image와 <code>newTag</code>의 값으로 사용 하겠다는 의미 입니다.</p></li><li><p>이를 활용해 <code>newTag</code> 값을 변경해 새로운 배포가 이루어질 때 마다 이를 kubernetes 클러스터까지 변경 할 수 있습니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd</span> <span class="string">~/environment/k8s-manifest-repo/overlays/devcat</span> <span class="string">&lt;&lt;EOF&gt;</span> <span class="string">kustomization.yamlapiVersion:</span> <span class="string">kustomize.config.k8s.io/v1beta1kind:</span> <span class="attr">Kustomizationimages:-</span> <span class="attr">name:</span> <span class="string">$&#123;ACCOUNT_ID&#125;.dkr.ecr.ap-northeast-2.amazonaws.com/demo-frontend</span>  <span class="attr">newName:</span> <span class="string">$&#123;ACCOUNT_ID&#125;.dkr.ecr.ap-northeast-2.amazonaws.com/demo-frontend</span>  <span class="attr">newTag:</span> <span class="attr">abcdefgresources:-</span> <span class="string">../../basepatchesStrategicMerge:-</span> <span class="string">front-deployment-patch.yaml-</span> <span class="string">front-service-patch.yamlEOF</span></span><br></pre></td></tr></table></figure><ul><li>이상 -patch.yaml 파일에 정의한 내용들은 배포 과정에서 kustomize 에 의해 자동으로 kubernetes manifest 에 반영 됩니다.</li><li>이미지의 태그명이 abcdefg로 나오면 성공입니다.</li></ul></li><li><p>kubernetes manifest 용 github repo를 만들어줍니다.</p><ul><li>k8s-manifefst-repo <strong>**</strong>생성</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd</span> <span class="string">~/environment/k8s-manifest-repo/git</span> <span class="string">initgit</span> <span class="string">add</span> <span class="string">.git</span> <span class="string">commit</span> <span class="bullet">-m</span> <span class="string">"first commit"</span><span class="string">git</span> <span class="string">branch</span> <span class="bullet">-M</span> <span class="string">maingit</span> <span class="string">remote</span> <span class="string">add</span> <span class="string">origin</span> <span class="attr">https://github.com/jinseo-jang/k8s-manifest-repo.gitgit</span> <span class="string">push</span> <span class="bullet">-u</span> <span class="string">origin</span> <span class="string">main</span></span><br></pre></td></tr></table></figure></li><li><p>Argo CD 설치</p><ul><li>kubectl create namespace argocd<br>kubectl apply -n argocd -f <a href="https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml">https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml</a></li></ul></li><li><p>Argo CD cli 설치</p><ul><li>cd ~/environment<br>VERSION=$(curl –silent “<a href="https://api.github.com/repos/argoproj/argo-cd/releases/latest">https://api.github.com/repos/argoproj/argo-cd/releases/latest</a>“ | grep ‘“tag_name”‘ | sed -E ‘s/.*”([^”]+)”.*/\1/‘)</li><li>sudo curl –silent –location -o /usr/local/bin/argocd <a href="https://github.com/argoproj/argo-cd/releases/download/$VERSION/argocd-linux-amd64">https://github.com/argoproj/argo-cd/releases/download/$VERSION/argocd-linux-amd64</a></li><li>sudo chmod +x /usr/local/bin/argocd</li></ul></li><li><p>Argo CD는 퍼블릭하게 노출되지 않지만, ELB를 통해 접속 가능하도록 만들겠습니다.</p><ul><li>kubectl patch svc argocd-server -n argocd -p ‘{“spec”: {“type”: “LoadBalancer”}}’</li></ul></li><li><p>접속할 uri를 얻습니다.</p><ul><li>export ARGOCD_SERVER=<code>kubectl get svc argocd-server -n argocd -o json | jq --raw-output .status.loadBalancer.ingress[0].hostname</code><br>echo $ARGOCD_SERVER</li></ul></li><li><p>기본 username은 admin입니다. password는 다음과 같습니다.</p><ul><li>ARGO_PWD=<code>kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=&quot;{.data.password}&quot; | base64 -d</code><br>echo $ARGO_PWD</li></ul></li><li><p>argo login</p><img src="/images/eks-workshop/Untitled 9.png" alt="login화면" style="zoom:60%;" /></li><li><p>로그인 후 좌 상단 애플리케이션 설정 메뉴를 클릭하고 새 application을 만들어줍니다.</p></li><li><p><strong>Application Name</strong> 은 <code>eksworkshop-cd-pipeline</code>, <strong>Project</strong>는 <code>default</code>를 입력 합니다.</p></li><li><p><strong>SOURCE</strong> 섹션의 <strong>Repository URL</strong> 에는 앞서 생성한 <strong><code>k8s-manifest-repo</code>의 git 주소</strong>, <strong>Revision</strong> 에는 <code>main</code>, <strong>Path</strong> 에는 <code>overlays/dev</code>를 입력 합니다.</p></li><li><p><strong>DESTINATION</strong> 섹션의 <strong>Cluster URL</strong>에는 <code>https://kubernetes.default.svc</code>, <strong>Namespace</strong> 에는 <code>default</code>를 입력 하고 상단의 <strong>Create</strong> 를 클릭 합니다.</p></li><li><p>eksworkshop-cd-pipeline이 만들어졌습니다.</p></li><li><p>Kustomize 빌드 단계 추가</p><ul><li>github action에서 kustomize를 이용하여 image tag를 업데이트 한 후 k8s-manifest-repo에 커밋 푸시하는 단계를 추가 해줘야 합니다.</li><li>이 단계가 동작하면, argo CD가 k8s-manifest-repo를 센싱 하다가 새로운 변경사항이 감지되면 Kustomize build 작업을 수행해 새로운 kubernetes manifest를 eks클러스터에 배포합니다.</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd</span> <span class="string">~/environment/amazon-eks-frontend/.github/workflows</span></span><br><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF&gt;&gt;</span> <span class="string">build.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Setup</span> <span class="string">Kustomize</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">imranismail/setup-kustomize@v1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Checkout</span> <span class="string">kustomize</span> <span class="string">repository</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          repository:</span> <span class="string">jinseo-jang/k8s-manifest-repo</span></span><br><span class="line"><span class="attr">          ref:</span> <span class="string">main</span></span><br><span class="line"><span class="attr">          token:</span> <span class="string">\$&#123;&#123;</span> <span class="string">secrets.ACTION_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">k8s-manifest-repo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Update</span> <span class="string">Kubernetes</span> <span class="string">resources</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo \$<span class="template-variable">&#123;&#123; steps.login-ecr.outputs.registry &#125;&#125;</span></span></span><br><span class="line"><span class="string">          echo \$<span class="template-variable">&#123;&#123; steps.image-info.outputs.ecr_repository &#125;&#125;</span></span></span><br><span class="line"><span class="string">          echo \$<span class="template-variable">&#123;&#123; steps.image-info.outputs.image_tag &#125;&#125;</span></span></span><br><span class="line"><span class="string">          cd k8s-manifest-repo/overlays/dev/</span></span><br><span class="line"><span class="string">          kustomize edit set image \$<span class="template-variable">&#123;&#123; steps.login-ecr.outputs.registry&#125;&#125;</span>/\$<span class="template-variable">&#123;&#123; steps.image-info.outputs.ecr_repository &#125;&#125;</span>=\$<span class="template-variable">&#123;&#123; steps.login-ecr.outputs.registry&#125;&#125;</span>/\$<span class="template-variable">&#123;&#123; steps.image-info.outputs.ecr_repository &#125;&#125;</span>:\$<span class="template-variable">&#123;&#123; steps.image-info.outputs.image_tag &#125;&#125;</span></span></span><br><span class="line"><span class="string">          cat kustomization.yaml</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="attr">      - name:</span> <span class="string">Commit</span> <span class="string">files</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd k8s-manifest-repo</span></span><br><span class="line"><span class="string">          git config --global user.email "github-actions@github.com"</span></span><br><span class="line"><span class="string">          git config --global user.name "github-actions"</span></span><br><span class="line"><span class="string">          git commit -am "Update image tag"</span></span><br><span class="line"><span class="string">          git push -u origin main</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li><p>소스를 만들었으면, 커밋 푸시 해줍니다.</p><ul><li>cd ~/environment/amazon-eks-frontend<br>git add .<br>git commit -m “Add kustomize image edit”<br>git push -u origin main</li></ul></li><li><p>github action이 잘 동작하는지를 확인하고, k8s-manifest-repo에 새 manifest가 커밋 되는지 확인합니다.</p></li><li><p>이렇게 새 manifest가 배포되면, argo CD에서 감지하여, Sync Status가 업데이트 됩니다.</p><ul><li>아무 설정을 하지 않았다면, <strong>CURRENT SYNC STATUS</strong>의 값이 <strong>Out of Synced</strong> 입니다.</li><li>git repository 가 변경되면 자동으로 sync 작업이 수행 하도록 하려면 <strong>Auto-Sync</strong> 를 활성화 해야 합니다. 이를 위해 <strong>APP DETAILS</strong> 로 이동 하여 <strong>ENABLE AUTO-SYNC</strong> 버튼을 눌러 활성화 합니다.</li><li>활성화 되었다면, ArgoCD에 의해 k8s-manifest-repo의 커밋 내용이 ArgoCD에 의해 eks클러스터에 반영됩니다.</li><li>마지막으로 정상적으로 새 manifest가 배포되었는지를 확인하기 위해 k8s-manifest-repo의 커밋 히스토리를 통해 image tag를 살펴봅니다.</li><li>abcdefg가 아니라 새로운 태그값으로 들어갔다면 성공입니다.</li></ul></li><li><p>frontend application에 코드를 변경해서, GitOps 파이프라인이 정상 동작하는지를 최종 점검합니다.</p></li><li><p><strong>amazon-eks-frontend/src/</strong> 로 이동하여 <strong><code>App.js</code></strong> 더블 클릭하여 파일을 오픈 합니다.</p><ul><li><p><strong>line 67</strong>의 값을 <strong><code>EKS DEMO Blog version Hyuby</code></strong> 로 변경 하고 저장 합니다. 저장은 <strong>ctrl+s</strong> 를 누릅니다.</p></li><li><p>변경된 소스를 커밋 푸시 합니다.</p><ul><li>cd ~/environment/amazon-eks-frontend<br>git add .<br>git commit -m “Add new blog version”<br>git push -u origin main</li></ul></li><li><p>Sync작업이 모두 끝나면, url로 접속하여 변경사항을 확인합니다.</p><ul><li>echo <a href="http://%24/">http://$</a>(kubectl get ingress/backend-ingress -o jsonpath=’{.status.loadBalancer.ingress[*].hostname}’)</li><li>짠!</li></ul><p><img src="/images/eks-workshop/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2021-11-03_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_2.30.12.png" alt="정상동작확인!"></p></li></ul><p><br></br></p></li></ul><hr><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://daddyprogrammer.org/post/14102/argocd-kubernetes-cluster-deploy/">https://daddyprogrammer.org/post/14102/argocd-kubernetes-cluster-deploy/</a></li><li><a href="https://junghyeonsu.tistory.com/65">https://junghyeonsu.tistory.com/65</a></li><li><a href="https://wookiist.dev/159">https://wookiist.dev/159</a></li><li><a href="https://cwal.tistory.com/23">https://cwal.tistory.com/23</a></li><li>[<a href="https://coffeewhale.com/kubernetes/workflow/argo/2020/02/14/argo-wf/]">https://coffeewhale.com/kubernetes/workflow/argo/2020/02/14/argo-wf/]</a>(</li></ul>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2021/11/03/EKS-workshop/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Docker hub pull limit이 발생했다면?</title>
      <link>http://tkdguq05.github.io/2021/10/07/docker-hub-limit/</link>
      <guid>http://tkdguq05.github.io/2021/10/07/docker-hub-limit/</guid>
      <pubDate>Thu, 07 Oct 2021 13:10:16 GMT</pubDate>
      <description>
      
        &lt;p&gt;Docker Hub 에서 신나게 pull 받다가 limit 때문에 문제가 발생한 경우와, 이를 회피하는 방법에 대해서 작성해봤습니다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Docker Hub 에서 신나게 pull 받다가 limit 때문에 문제가 발생한 경우와, 이를 회피하는 방법에 대해서 작성해봤습니다.</p><a id="more"></a><h2 id="Docker-Hub-Pull-Limit"><a href="#Docker-Hub-Pull-Limit" class="headerlink" title="Docker Hub Pull Limit"></a>Docker Hub Pull Limit</h2><p>Docker를 사용하는 여러 이유가 있겠지만, 무엇보다도 Docker Hub에 있는 이미지들을 자유롭게 받아서 사용할 수 있다는 점이 큰 매력 중에 하나라고 생각합니다. 그래서 저도 public 이미지들을 자유롭게 받아서 사용하고 이를 운영하는 서버에도 적용해서 배포를 하고 있었습니다. 그러던 와중에 청천벽력같은 소식이 전해집니다. </p><blockquote><p>Hello:</p><p>You are receiving this email because of a policy change to Docker products and services you use. On Monday, November 2, 2020 at 9am Pacific Standard Time, Docker will begin enforcing rate limits on container pulls for Anonymous and Free users. Anonymous (unauthenticated) users will be limited to 100 container image pulls every six hours, and Free (authenticated) users will be limited to 200 container image pulls every six hours, when enforcement is fully implemented. Docker Pro and Team subscribers can pull container images from Docker Hub without restriction, as long as the quantities are not excessive or abusive.</p><p>In addition, we are pausing enforcement of the changes to our image-retention policies until mid-2021, when we anticipate incorporating them into usage-based pricing. Two months ago, we announced an update to Docker image-retention policies. As originally stated, this change, which was set to take effect on November 1, 2020, would result in the deletion of images for free Docker account users after six months of inactivity. Today’s announcement means Docker will not enforce image expiration on November 1, 2020.</p></blockquote><p>이메일을 통해서 받았었는데, 당시에는 사실 바빠서 그냥 읽지도 않고 넘겼었습니다. 그때는 도커도 자주 사용하지 않았기 때문에 별로 신경을 쓰지 않았던 것입니다. Docker Hub Pull Limit에 대해서는 <a href="https://www.docker.com/increase-rate-limits">여기서 자세히 알아볼 수 있습니다.</a></p><p>요약하자면, <code>정책이 변경되었고, 맘껏 쓰고 싶으면 돈내고 써라</code> 입니다.</p><p>그리고 시간이 지나, 이 이메일을 메일함에 방치하고 있던 와중에, ECS와 Code Build를 통해서 배포를 하던 와중에 일이 발생하고야 말았습니다.</p><h2 id="배포의-실패"><a href="#배포의-실패" class="headerlink" title="배포의 실패"></a>배포의 실패</h2><p>저희 팀에서는 Airflow를 통해 특정 추천 서비스의 전처리와 학습을 진행하고, 이 내용을 바탕으로 개발서버에 먼저 배포를 한 뒤에 결과를 일부 확인하고 운영서버에 배포하는 작업을 수행하고 있습니다. 어느때와 같이 새로운 고객사에 대해 추천 서비스 DAG를 생성하고 DAG를 켜줬습니다. 별 다른 이상이 없어서 시계를 확인하고 마침 퇴근 시간이 되었길래 칼퇴!를 했습니다. 지하철을 타는 순간에 핸드폰에서 불안한 알람이 온 것을 느꼈고, 그 내용은 DAG가 실패했다는 것이었습니다.</p><p>그런데 이 DAG의 태스크는 왠만해서는 실패가 되지 않는 부분이었습니다. 학습된 내용을 도커 이미지에 작성하고 작성된 이미지를 그냥 빌드하는 것이었기 때문입니다. 찜찜해서 가는 내내 고민하다가, 다른 동료가 보내준 코드 빌드에서 에러 로그를 보자마자 스치듯 지나갔던 그 메일이 생각났습니다.</p><p>에러의 내용은 다음과 같았습니다. <code>toomanyrequests: You have reached your pull rate limit. You may increase the limit by authenticating and upgrading: https://www.docker.com/increase-rate-limit</code> </p><p>돈을 내라는 것이었습니다. </p><p>하지만 저는 돈을 내기는 싫었고, 6시간을 기다려서 초기화 될때까지 기다려서 배포를 해볼까 했습니다. 하지만 고객사 추가가 잦아지거나 다른 이미지들을 pull해올 때 또 다시 문제가 발생할 수 있기에, 이를 한번 회피해야 겠다는 생각을 했습니다. 회피하는 방법은 생각보다 간단했습니다.</p><h2 id="🤫-pull-limit-제한-없이-쓰기"><a href="#🤫-pull-limit-제한-없이-쓰기" class="headerlink" title="🤫 pull limit 제한 없이 쓰기"></a>🤫 pull limit 제한 없이 쓰기</h2><p>많은 회사들에서는 클라우드 기반에서 서비스를 운영하실 것이라고 생각합니다. 온프레미스에서 운영하실 수도 있으나, 저희는 클라우드 기반에서 운영하기에, 또 AWS를 사용하기에 이 환경에 국한한 문제 해결 방법을 소개해 드리겠습니다.</p><p>AWS에는 이미지를 관리할 수 있는 저장소가 따로 있습니다. <code>ECR</code> 이라고 불립니다. 이 ECR에 다양한 이미지들을 빌드해서 올려놓고, ECS에 있는 TASK들의 컨테이너가 띄워질 때, 이 이미지를 사용해서 올라오게 됩니다. ECS말고도 인스턴스에서 이미지들을 갖고와서 사용할 수도 있고, 또 다르게 다양하게 사용할 수 있을 것입니다. </p><p>그래서 다양하게 한 번 사용을 해봤습니다. 필요한 이미지를 받아서 빌드하고 이 이미지를 ECR에 올려놓고, 이 이미지를 받아서 한번 사용해보는 겁니다. 그렇게 되면 이 이미지 자체는 ECR에 존재하게 되어서, ECS에서 태스크를 띄우든, 다른 곳에서 사용하든 무제한으로 이 이미지를 사용할 수 있게 될 것입니다.</p><p>저희 쪽에서 특히 자주 사용하는 이미지는 바로, python 이미지였습니다. <code>python:3.7-slim-buster</code> 를 특히 자주 썼었던 것 같은데, 이 이미지를 구글에서 검색해서 원본 이미지를 pull 해왔습니다. 이미지는 <a href="https://github.com/docker-library/repo-info/blob/master/repos/python/remote/3.7-slim-buster.md">이 곳</a>에서 찾았습니다.</p><p>나와있는 대로</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull python@sha256:88e9ed044abd15c15069477046e8c65fb7e97cebd7cf140e901ae35440bfc073</span><br></pre></td></tr></table></figure><p>docker 명령어를 통해 필요한 이미지를 받아줍니다. 그리고 <code>docker image ls</code>를 하면?</p><blockquote><p>amd64/python                                                             3.7                 7cb3330faa6c        8 days ago          903MB</p></blockquote><p>이렇게 잘 있는 것을 확인했습니다.</p><p>그 다음 이미지 이름에 태그를 달아주고 어디로 보내줄 것인지를 정의해줬습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag amd64&#x2F;python:3.7 xxxxxxxxxx.dkr.ecr.ap-northeast-2.amazonaws.com&#x2F;python37_slim_buster</span><br></pre></td></tr></table></figure><p>그런데 이때 중요한 것은, ECR의 레포지토리를 미리 만들어줘야 한다는 것입니다. 미리 만들어두지 않으면, 알아서 레포지토리를 만들지 못하기 때문에 에러가 나서 실망하게 됩니다. 한 번에 딲! 끝내고 싶다면 미리 만들어 두십시오.</p><p>태그를 해 준 다음에는 push를 해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push amd64&#x2F;python:3.7 xxxxxxxxxx.dkr.ecr.ap-northeast-2.amazonaws.com&#x2F;python37_slim_buster</span><br></pre></td></tr></table></figure><p>이렇게 Push까지 하게되면? 원하는 이미지를 ECR 레포지토리에서 확인할 수 있습니다.</p><p>이제 이렇게 만들어진 이미지의 URI를 복사해서 Dockerfile의 FROM에 집어넣어 주면? 이제 제한없이 배포를 마음껏 할 수 있게 됩니다!</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://www.docker.com/increase-rate-limits">https://www.docker.com/increase-rate-limits</a></li><li><a href="https://github.com/docker-library/repo-info/blob/master/repos/python/remote/3.7-slim-buster.md">https://github.com/docker-library/repo-info/blob/master/repos/python/remote/3.7-slim-buster.md</a></li><li><a href="https://subicura.com/k8s/2021/01/02/docker-hub-pull-limit/">https://subicura.com/k8s/2021/01/02/docker-hub-pull-limit/</a></li></ul>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2021/10/07/docker-hub-limit/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Airflow와 야근하기</title>
      <link>http://tkdguq05.github.io/2021/09/12/work-overtime-with-airflow/</link>
      <guid>http://tkdguq05.github.io/2021/09/12/work-overtime-with-airflow/</guid>
      <pubDate>Sun, 12 Sep 2021 07:00:11 GMT</pubDate>
      <description>
      
        &lt;p&gt;지난 주에 쓸데없이 야근한 일이 있어 이를 기록해두고자 합니다.&lt;/p&gt;
&lt;p&gt;재발 방지를 위하여.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>지난 주에 쓸데없이 야근한 일이 있어 이를 기록해두고자 합니다.</p><p>재발 방지를 위하여.</p><a id="more"></a><h2 id="평화로운-9월-7일-오후"><a href="#평화로운-9월-7일-오후" class="headerlink" title="평화로운 9월 7일 오후"></a>평화로운 9월 7일 오후</h2><p>9월 5일에 스파르톤을 마치고 컨디션이 화요일까지 영 회복이 되지 않았습니다. 월요일에도 왜인지 잠을 제대로 이루지 못해서 화요일 컨디션이 좋지 않았습니다. 빠르게 할 일 하고 칼퇴해야겠다는 결심을 하고, 출근을 했습니다. 당일에 계획된 작업은 ECS TASK로 변경한 airflow의 워커 상태와 main server, metaDB를 점검하고,  airflow의 스케쥴러를 안정화 하기 위해서 웹서버와 스케쥴러를 데몬 서비스로 등록하는 것이었습니다. 그동안 서비스로 등록하는 것에 대해서 망설였었는데, 공식 문서에도 서비스 등록에 대한 내용이 있기도 했고, 파이썬 코드를 통해서 상태를 점검하는 것보다 더 안정적일 것이라는 생각에 서비스로 등록하기로 했습니다. 서비스로 등록하는 것에 대해서는 <a href="https://github.com/apache/airflow/tree/main/scripts/systemd">airflow 공식 github</a>에 있는 파일을 사용하면 됩니다. </p><p>서비스로 등록해서 사용하는 글은 생각보다 굉장히 많았습니다. 쿠버네티스를 활용해서 스케쥴러를 돌보는게 요즘 트렌드긴 하지만, 쿠버네티스를 사용할 정도가 아닌 조직같은 경우에는 서비스로 등록해서 많이 사용하는 것 같았습니다. 어쨌든 이 파일을 이용해서 서비스 파일을 만들었고 서비스에 필요한 요소들, 예를 들어 Unit, Service, Install에 대해서 다시 한번 살펴봤습니다. 각 항목에 대한 내용들을 작성하고 환경에 맞게 튜닝을 조금 했습니다. 그리고 여러번 적용하고 다시 등록하고… 결국 서비스가 등록되고 start된 것이 확인 되었습니다. 하지만, 조금 이상했던 것은 main 서버의 CPU이용률이 이전보다 증가했다는 것입니다. CPU이용률이 벌써부터 올라가면 별로 좋지 않을 것 같아서 CPU이용률을 줄여보기 위해 airflow.cfg를 조금 수정해주기로 했습니다. 예전에 살펴봤던 글에 <a href="https://burning-dba.tistory.com/111">CPU이용률을 낮추는 설정</a>이 기억나서 이를 적용해보기로 했습니다. <code>scheduler_heartbeat_sec = 60</code>, <code>min_file_process_interval =60</code>, <code>max_threads = 1</code> 로 설정을 변경하는 것이 주 내용이었습니다. scheduler_heartbeat_sec은 스케줄러가 새로운 작업을 실행해야 하는 빈도 (초)를 정의하는 설정입니다. 이 시간을 적게 설정한다면, 더 자주 스케쥴러를 실행시키기 때문에 CPU의 이용률이 높아질 수 밖에 없습니다. min_file_process_interval은 DAG 업데이트 시간을 조정하는 값입니다. 스케쥴러와는 큰 관계가 없지만 웹서버의 부하를 일으킬 수 있기때문에 CPU와 연관이 있습니다. 이 두 값을 조정하고 적용했습니다. CPU가 조금 내려갔습니다. 서비스도 문제가 없었습니다.</p><h2 id="문제의-발생"><a href="#문제의-발생" class="headerlink" title="문제의 발생"></a>문제의 발생</h2><p>서비스가 성공적으로 등록되어서, 서비스 등록에 대해서 팀원들에게 공유하는 시간을 가졌습니다. 여러저러 설명을 하고 airflow의 스케쥴러의 상태를 확인을 했습니다. airflow주소:8080/health 면 간단하게 메타DB와 스케쥴러의 상태를 확인할 수 있습니다. 그런데 여기에 <code>unhealthy</code> 라고 나오기 시작했습니다. 더 이상한 것은, unhealthy하다면 last_heartbeat_time은 죽은 이후부터 업데이트가 되면 안되는데, 계속해서 업데이트가 되고 있었습니다. 심신이 매우 피곤했던 상황이었기 때문에 멘탈이 깨지기 시작했습니다. 가뜩이나 ECS워커로 변경한 뒤에 문제가 없나 노심초사하고 있었는데, ECS워커의 설정이 뭐가 잘못된 것인지, 서비스에 이상이 있는 건지 감이 잘 잡히지 않았습니다. 정신없던 와중에 퇴근시간이 지났습니다. </p><h2 id="야근의-시작"><a href="#야근의-시작" class="headerlink" title="야근의 시작"></a>야근의 시작</h2><p>본격적으로 초과근무를 하기 시작했습니다. 금방 끝날 것이라고 생각해서 서비스를 중단하고 웹서버와 스케쥴러를 다시 시작하면 해결이 될 것이라고 생각했습니다. 몇 번을 죽이고 살리고를 반복했지만 별 효과가 없었습니다. airflow가 사람을 놀리기라도 하는듯이 다시 시작하고 처음 몇 초간은 <code>healthy</code> 라고 나오다가 ‘휴 끝났네… 한번만 더 확인해볼까?’ 하는 순간 unhealthy로 나왔습니다. 정신이 혼미해져가는 와중에 ‘새로 airflow서버를 띄우면 고생하긴 하겠지만 되겠지’란 생각에 메인 서버 하나를 종료하고 미리 저장된 AMI를 이용해서 새 서버를 올렸습니다. </p><p>새로 서버를 올렸더니, 아주 잘 되기 시작합니다. </p><p>‘휴 해치웠나…?’ </p><p>클리셰는 역시 클리셰였습니다. airflow를 사용하는 것이 두 영역인데, 한 영역은 잘 되었지만, 다른 영역은 비웃기라도 하듯 잘 되지 않는 것이 아니겠습니까. 무엇이 문제일까 다시 고민하기 시작했습니다. 하지만 크게 문제될 부분도 없었고 ECS워커부분의 로그도 너무 조용했습니다. 그러다가 로그에 작업이 실행되는 것이 발견되어서, ‘스케쥴러가 죽어있는데 작업이 어떻게 돌지?’ 란 생각에 한 DAG를 수동으로 돌렸습니다. 놀랍게도 느리긴 했지만 작업이 실행되었습니다. 작업은 DAG를 파싱하고, 스케쥴링이 된 상태에서, 큐를 내주고, 워커에서 해당 큐를 가져가서 코드에 적힌대로 수행하게 되어있습니다. 그렇다면 스케쥴러는 unhealthy하긴 하지만, 실제로는 죽어있는 것이 아닌 것이 됩니다. </p><p>여러 커뮤니티에 도움을 청해놔서 그 분들의 의견을 확인해 봤습니다. “스케쥴러가 때로는 실제로 돌아가고 있는데 webserver에서 이를 못 잡을 수도 있으니 다시 완벽하게 kill하고 다시 실행해 봐라” 라는 의견의 주였습니다. 또 다시 스케쥴러를 내리고 올리고를 반복했습니다. 하지만 해결이 되지 않았습니다. 할 수 있는 건 정말 다 해봤는데, 그래서 희대의 뻘짓인 <code>airflow reset db</code> 까지 하게 됩니다. 이 명령어를 metaDB에 있는 모든 데이터를 날리는 일입니다. 제가 설정해둔 variables와 connections의 값을 다 날리는 것입니다. 물론 값을 백업해두고 한 일이라 복구하는데 어렵지는 않았지만, 이렇게 해결해서는 안된다고… 생각합니다. </p><p>또 다시 airflow를 종료하고 새롭게 airflow를 올렸는데, 이번에는 ECS에서 이상한 로그를 하나가 발견되기 시작합니다. <code>Cannot connect to .... redis....</code> 레디스에 연결이 안된다는 것입니다. 그래서 main서버에 접속해서 redis-server의 프로세스를 확인해 봤더니, 프로세스가 정말 없었습니다. 왜 레디스가 죽었지? 하다가 데몬 서비스로 등록한 파일이 생각났습니다. 그 파일의 Unit부분에 After와 Wants에는 redis.service 부분이 있었는데, 서비스가 실행될때 레디스를 건드린 것 같았습니다. 레디스를 복구하고 다시 작업을 확인해보니, 이제는 작업은 실행되지만, 여전히 unhealthy한 스케쥴러가 남아있는 것이 확인되었습니다. 그러다가 오전에 CPU 이용률 때문에 설정한 scheduler_heartbeat_sec가 생각났습니다.</p><p>오전에 설정할 때 60초는 너무 긴 것 같아 40초로 설정을 했습니다. 그리고 설정 값을 쭉 보다가 scheduler_health_check_threshold라는 것도 한번 봤습니다. 기본 값이 30초였는데, 관련 없는 값이라고 생각되어 그냥 넘어갔었습니다. 하지만, 이게 바로 이 야근을 한 원인이었다는 것을 12시가 다되어서야 발견을 하게 되었습니다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">If the last scheduler heartbeat happened more than scheduler_health_check_threshold</span><br><span class="line">ago (in seconds), scheduler is considered unhealthy.</span><br><span class="line">This is used by the health check in the &quot;&#x2F;health&quot; endpoint</span><br></pre></td></tr></table></figure><p>설정에는 이렇게 설명되어 있습니다. last scheduler heartbeat가 scheduler_health_check_threshold보다 더 자주 발생하면, unhealthy라고 나올 것이라고, 그리고 이 정보는  /health 에 사용된다고…</p><p>그러니까 정리하자면, 오전에 CPU이용률을 줄이려고 scheduler_heartbeat_sec을 40초로 설정을 했는데, 이 값보다 scheduler_health_check_threshold가 더 적은 값인 30이게 되어서 health 체크를 하는 시간 보다 sheduler_hearbeat_sec가 더 자주 발생하게 되어서 unhealthy하다고 /health에서 표시가 된 것이었습니다. 스케쥴러는 사실상 프로세스가 떠 있고 작업을 하고 있으니 문제는 없었던 것이 맞았습니다. </p><p><img src="https://www.pngkey.com/png/detail/14-142665_crying-pepe-png-pepe-cry-png.png" alt=""></p><p>그러니까… 쓸데없이 airflow를 처음부터 다시 띄우고… metaDB를 rest할 필요도 없었고, 야근할 필요도 없었던 거시었슴미다.</p><p>피곤이 몰려오기 시작했습니다.</p><h2 id="Outro"><a href="#Outro" class="headerlink" title="Outro"></a>Outro</h2><p>9월 8일 00:20분 경에는 비가 왔습니다. 택시를 콜하니 대어를 물기 위해 5초만에 기사님이 잡혔습니다. 풀이 죽은 야간 추가 근무자와는 반대로 택시기사님은 격양되어 있는 것 같았습니다. 조용히 이어폰을 꽂았고 재밌어보이는 유튜브 영상을 보면서, 무슨 내용인지도 기억이 안나지만, 그렇게 집으로 왔습니다. </p><p>29,600원짜리 교훈이었습니다. </p><p>설정값을 제대로 확인을 하지 않고, 수면 부족의 콜라보로 이루어낸 결과였습니다. airflow가 또 터지는 악몽을 꿨고, 다음날 겨우 지각을 면하면서 아슬아슬하게 출근을 했습니다.</p><p>잠은 평소에 잘 자야하는 것 같습니다.</p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2021/09/12/work-overtime-with-airflow/#disqus_thread</comments>
    </item>
    
    <item>
      <title>sparton</title>
      <link>http://tkdguq05.github.io/2021/09/04/sparton/</link>
      <guid>http://tkdguq05.github.io/2021/09/04/sparton/</guid>
      <pubDate>Sat, 04 Sep 2021 11:44:04 GMT</pubDate>
      <description>
      
        &lt;p&gt;9pm to 6am 스파르톤 생존일지&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>9pm to 6am 스파르톤 생존일지</p><a id="more"></a><h2 id="스파르톤"><a href="#스파르톤" class="headerlink" title="스파르톤"></a>스파르톤</h2><p>코딩에 미쳐보고 싶던 찰나에 스파르톤이 열렸다. 저녁 9시부터 다음날 오전 6시까지… 무사히 목표한 바를 이루고 싶다.</p><h2 id="타임-테이블"><a href="#타임-테이블" class="headerlink" title="타임 테이블"></a>타임 테이블</h2><p><code>**9:00pm**</code> 팀별 아이스 브레이킹<br><code>**9:10pm**</code> 웰컴 인사 및 행사 안내<br><code>**11:30pm**</code> 이벤트 퀴즈쇼 ‘도전 스파르타 골든벨’<br><code>**01:00am**</code> 인스타 피드 챌린지 1 (#스파르타코딩클럽 #스파르톤 #힙한취미 #코딩 @spartacodingclub) &amp; 찐관<br><code>**03:00am**</code> 전체 마라톤<br><code>**04:00am**</code> 인스타 피드 챌린지 2 (#스파르타코딩클럽 #스파르톤 #힙한취미 #코딩 @spartacodingclub) &amp; 찐관<br><code>**05:30am**</code> 행사 마무리 준비<br><code>**06:00am**</code> 행사 마감, 완주 축하하기</p><h2 id="9-26"><a href="#9-26" class="headerlink" title="9:26"></a>9:26</h2><p>스파르톤이 시작되기 직전, 레드불을 하나 까서 마시기 시작했다. 조금 졸린데 걱정이 되기 시작한다.</p><h2 id="9-40"><a href="#9-40" class="headerlink" title="9:40"></a>9:40</h2><p>선서가 끝나고 본격적으로 학습에 들어갔다. 3주차에 못들었던 강의부터 시작했다.</p><p>해쉬 -2 강의를 눌러서 시청했다.</p><h2 id="10-30"><a href="#10-30" class="headerlink" title="10:30"></a>10:30</h2><p>3주차 강의를 모두 수강했고, 부여된 문제들을 풀기 시작했다. 노트북 배터리 충전이 잘 되지 않아 리부팅 했다.</p><p>게더타운때문인지 뭔지 리소스를 너무 많이 잡아먹는 프로세스가 있어 타자가 버벅거린다.</p><h2 id="11-00"><a href="#11-00" class="headerlink" title="11:00"></a>11:00</h2><p>과제 첫번째 문제를 빠르게 해결했다. </p><p>사실 해결하는데 정렬이 갑자기 공부가 안나서 다시 공부를 했다. </p><p>할인률이 가장 높게 상품 구매를 하는 문제였는데, 정렬을 한뒤 뒤에서부터 하나씩 가져와서 곱한뒤 쿠폰이 없다면 나머지는 다 더해주는 방식으로 코딩을 했다.</p><p>두 번째 문제에 도전하고 있다. 괄호가 올바른지 체크를 해야하는 문제다. 예전에 풀었었던 것 같은데 뭘로 풀어야 될지 감이 잘 안잡히는 중이다.</p><h2 id="1-00AM"><a href="#1-00AM" class="headerlink" title="1:00AM"></a>1:00AM</h2><p>중간에 골든벨 이벤트가 끝났다. 게더타운과 슬랙이 폭발하는 바람에 내 CPU도 막막 올라가서 결국 먹통이 됐다.</p><p>결국 재시작을 몇번 하고, 슬랙과 게더타운을 종료하고 기다렸다.</p><p>이벤트가 끝나니 CPU도 같이 내려갔다. 3주차 과제를 풀어봤고 해설강의를 들었다. 내가 생각한 아이디어와 비슷한 점도 보였고, 새롭게 푼 문제도 있었다. 괄호문제는 스택으로 푸는게 맞을까 했는데 맞았다. 올바른 괄호에 대한 체크 로직이 스택과 동일했다. 빠르게 생각하지 못한게 아쉬웠다. 이제 4주차 강의로 넘어간다.</p><h2 id="4-37AM"><a href="#4-37AM" class="headerlink" title="4:37AM"></a>4:37AM</h2><p>4주차 강의로 넘어가서 DFS 구현이 잘 안되서 시간이 좀 걸렸다. 와중에 세시에 마라톤 이벤트를 한대서 참여해봤는데</p><p>게더타운의 코스에서 두 바퀴 도는거였다. 물론 돌다가 터졌고, 내 노트북도 터질뻔했다.</p><p>무사히 완주하고 다시 자리를 잡았고 조금 힘들어서 밖에 나가서 걸었다. 편의점 앞까지 가서 따뜻한걸 하나 사서 먹을까 했다가 돌아왔다. 먹으면 졸릴 것 같았다.</p><p>사람이 없어서 시원하게 가스를 배출하며 오려던 찰나에 어떤 커플을 마주쳤다. 어색하게 자리를 피하고 집으로 돌아왔다.</p><p>DFS와 BFS가 끝났다. DFS는 스택과 관련이 있었고, BFS는 큐와 관련이 있었다.</p><p>이제 DP로 들어간다.</p><h2 id="5-35"><a href="#5-35" class="headerlink" title="5:35"></a>5:35</h2><p>4주차 마지막 까지 다 들었다. 과제 설명까지 봤는데, 과제가 생각보다 어려웠다. DFS BFS가 익숙하지 않아 이 개념을 문제에 활용하지 못하는 느낌이다. 개념을 한번 복습하고 다시 한번 문제를 어떻게 풀어야 할까 생각해봐야겠다.</p><p>06시가 되기 25분 전이다. 코딩을 마무리하고 생존일지를 쓰러 왔다. 전날 9시부터 오늘 6시까지 9시간이었는데, 생각보다 길지않았고 힘들지 않은 것 같다. </p><p>시험기간에도 밤을 새본 적 없고, 프로젝트 때 한번 밤을 새봤는데 그 마저도 3시까지 작업하다가 집에가서 자고 좀 쉬다가 다시 왔었다. 이렇게 풀로 깨어있으면서 코딩한적은 처음인 것 같다. </p><p>알고리즘을 제대로 공부하고 코딩테스트를 정복하고 싶다는 마음이 들어서 이 강의를 시작했고, 알고리즘에 시간을 못 쏟아부은 것 같아서, 또 그렇게 마음먹기가 힘들어서 스파르톤에 참여했다. 내 목표를 위해서 밤새 몰입했었고, 스파르타 코딩클럽의 지원과 같이 참여한 다른 <code>용사님</code> 들 덕분에 지치지 않고 마무리 할 수 있게 된 것 같았다.</p><p>새벽에 잠시 나와 걸으면서, 그리고 이 글을 쓰면서 느낀 것 중에 하나는,  밤새 코딩한 기억은 잊혀지지 않을 것 같다는 것이다.</p><p> 앞으로도 계속 무엇인가에 열정을 갖고 싶다는 마음이 들었고, 새벽이 어떻게 가는지도 모른채 어떤 일에 몰입하고 싶어졌다. 동시에 그런 일을 할 수 있는 곳에 가고 싶어졌고, 그렇게 환경을 만들어 주는 곳에 가고 싶어졌다.</p><p>강의와 스파르톤을 통해서 코딩테스트 실력을 길러보고 테스트해봤는데, 일에 대한 기본적인 마인드와 내가 정말 원하는 일, 그리고 직장에 대해서 다시 한번 생각해 보게 되는 계기가 되었던 것 같다.</p><p>스파르톤은 기회가 된다면 또 다시 참여해보고 싶다. 일에 지쳐있었는데 다시 뜨거워져 볼 수 있는 기회가 됐었다.</p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2021/09/04/sparton/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Airflow Workers on ECS Fargate</title>
      <link>http://tkdguq05.github.io/2021/08/28/airflow-ecs/</link>
      <guid>http://tkdguq05.github.io/2021/08/28/airflow-ecs/</guid>
      <pubDate>Sat, 28 Aug 2021 02:27:55 GMT</pubDate>
      <description>
      
        &lt;p&gt;Airflow 워커를 ECS에 띄워서 연결해보자, MWAA흉내내기&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Airflow 워커를 ECS에 띄워서 연결해보자, MWAA흉내내기</p><a id="more"></a><h2 id="기존-구조"><a href="#기존-구조" class="headerlink" title="기존 구조"></a>기존 구조</h2><p>기존에 사용하던 구조는 굉장히 구식이었다고 볼 수 있었습니다. 전임자가 만들어 놓고 나간 구조인데, Airflow의 main서버와 metadb를 AWS에 각각 인스턴스로 올리고, Auto Scaling 그룹으로 워커들을 띄워놓고 연결한 구조였습니다. 버전도 1.10.9 버전이라 잔 버그 같은 이슈도 있어보였고, 워커들을 좀 더 심플하게 관리하고 싶었습니다. 아무래도 인스턴스 비용이 나가다보니 부담스러운 점도 있었구요.</p><img src="https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2019/04/17/sagemaker-airflow-2.gif" alt="기존의 구조" style="zoom:80%;" /><p>마침 ECS관련해서 작업을 하고 마무리 짓던 중이었고, 워커들을 ECS Fargate로 변경해볼까란 생각이 들었습니다. 워커들은 이미 도커 이미지로 띄워져서 실행되고 있는 상태였기 때문에, 이미지만 Task Definition으로 넣어서 서비스를 만들어주면 간단하게 끝나지 않을까?? 생각했습니다. <del>잔 이슈 때문에 한 1-2주정도 걸리게 되었습니다.</del></p><h2 id="ECS란"><a href="#ECS란" class="headerlink" title="ECS란"></a>ECS란</h2><p>AWS에서 제공하는 ECS는 쿠버네티스와 유사한 부분이 많습니다. 쿠버네티스를 조금이라고 공부해 보신 분이라면, 간단한 버전의 ECS라고도 느끼실 것 같습니다. </p><p>먼저 ECS는 Elastic Container Service의 약자로 AWS에서 제공 하고 있는 컨테이너 오케스트레이션 서비스입니다. 컨테이너 오케스트레이션 서비스에는 대표적으로 쿠버네티스, Docker Swarm 등이 있습니다. 물론 AWS에도 쿠버네티스 제품, EKS가 나와 있지만 ECS는 좀 더 간소화되어 있고, 심플한 버전의 컨테이너 오케스트레이션 서비스라고 생각되네요. </p><p>ECS를 사용하게 되면 클러스터를 관리하기 위한 별도의 인스턴스를 구성, 관리하지 않아도 되고, 클러스터 관리에 대한 비용도 없습니다. 그래서 저희 다른 팀원 분이 인스턴스에 올린 API서버를 ECS로 변경했을때, 비용 감소 효과가 발생한 것 같습니다. 서버관리를 해주니까, 관리포인트도 적어지고 오토스케일링까지 지원이 됩니다. 또한 쿠버네티스에 비해 학습 시간이 매우 적기 때문에 금방 서치해서 원하는 서비스를 빠르게 올릴 수 있는 장점이 있습니다.</p><h2 id="ECS의-기본-개념"><a href="#ECS의-기본-개념" class="headerlink" title="ECS의 기본 개념"></a>ECS의 기본 개념</h2><p>ECS의 기본 개념으로는 클러스터, 작업정의(Task Definition), Task, Service가 있습니다. 하나씩 자세히 알아가도록 하겠습니다.</p><p><img src="https://kb.novaordis.com/images/4/43/AmazonECSConcepts.png" alt="ECS의 구조"></p><h3 id="클러스터-Cluster"><a href="#클러스터-Cluster" class="headerlink" title="클러스터(Cluster)"></a>클러스터(Cluster)</h3><p>클러스터는 도커 컨테이너를 실행할 수 있는 논리적인 공간입니다. 사용하려는 도커 이미지는 컨테이너에서 실행되는데, 이 컨테이너가 실행되는 인스턴스들을 묶어놓은 것이 클러스터입니다. 그냥 논리적인 공간이기 때문에 빈 클러스터도 생성이 가능합니다. airflow를 ECS에 올릴 때도 클러스터는 비어있는 상태로 올렸습니다. 만약에 빈 클러스터가 아니라 몇 몇개의 인스턴스를 만들어서 클러스터를 생성한 경우, ECS Agent에 의해서 클러스터와 인스턴스는 연결됩니다. </p><h3 id="Task-Definition"><a href="#Task-Definition" class="headerlink" title="Task Definition"></a>Task Definition</h3><p>태스크 데피니션, 작업 정의는 실제 컨테이너를 구성하는 것이라고 볼 수 있습니다. ECS는 기본적으로 ECR 레포지토리와 연동이 되어 있는데, 이 레포지토리에서 어떤 이미지를 사용할 것인지, 포트는 몇번을 열 것인지, 환경 변수는 어떤 것을 줄 것인지 등등을 설정할 수 있습니다. </p><p>docker run에서 사용했던 명령어들이 있다면 여기서 설정하면 됩니다. 처음에 이걸 잘 몰라서 고생을 꽤나 했는데, 작업 정의를 통해 설정하면 끝입니다. 작업 정의는 버전 관리가 가능하다는 장점이 있습니다. 만약에 새로 작업정의를 만들어서 배포를 했는데 원하는 결과가 제대로 나오지 않는다면, 이전 버전으로 롤백하면 됩니다. 이 구성이 정말 잘 되어 있어서, Airflow worker들을 ASG로 만들었을 때보다 훨씬 안정적으로 서비스를 운영할 수 있는 것 같네요.</p><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>태스크는 작업 정의에 의해 만들어진 컨테이너의 셋들이며, ECS에서 컨테이너를 실행하는 최소 단위입니다. 한 태스크에는 1개 이상의 컨테이너를 구성할 수 있고, 해당 Task 내의 컨테이너는 모두 같은 ECS 클러스터 인스턴스 또는 Fargate 내에 실행되도록 보장 받습니다. 하지만 저는 한 태스크에 한 컨테이너만 실행되도록 했습니다. 여러 컨테이너를 docker-compose같이 사용하는 것도 가능하다고 합니다. </p><blockquote><ul><li>태스크에선 익숙한 EC2와 함께 Fargate가 등장합니다.</li></ul><p>💡<strong>Fargate로 설정하면</strong>! ECS 클러스터내에 인스턴스가 없어도, Task에 정의한 CPU, 메모리 설정에 따라 관리하는 EC2 인스턴스 없이 Serverless 하게 서비스를 실행할 수 있습니다. </p><p>Bespin Global 설명 : <a href="https://aws.amazon.com/fargate/">AWS </a><a href="https://aws.amazon.com/fargate/">Fargate</a> 는 AWS에 컨테이너를 배포하는 쉬운 방법입니다. 간단히 말하면 Fargate는 EC2와 비슷하지만 가상 시스템을 제공하는 대신 컨테이너를 얻습니다. 기본 인스턴스를 관리 할 필요없이 컨테이너를 기본 계산 프리미티브로 사용할 수있게 해주는 기술입니다. 컨테이너 이미지 작성, CPU 및 메모리 요구 사항 지정, 네트워킹 및 IAM 정책 정의 및 실행 만하면됩니다. Fargate를 사용하면 응용 프로그램 요구 사항과 밀접하게 일치하는 유연한 구성 옵션을 사용할 수 있으며 초 단위로 세분화됩니다.</p></blockquote><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>서비스는 태스크의 라이프 사이클을 관리해주는 역할을 합니다. 태스크의 상태를 지속적으로 감시, 관리해주는 것이라고 볼 수 있습니다. 또한 태스크를 클러스터에 몇 개 배포할 것인지를 결정하고, 서비스를 만들때 어떤 작업정의로 태스크를 생성할지 정할 수 있습니다. </p><p>만약 태스크가 어떤 문제로 중지되거나 다운되면 이것을 감지해서 새로운 Task를 클러스터에 배포하게 하는 역할도 수행합니다. 실제로 서비스에 동작하고 있는 Task를 강제로 중지시킬 경우에 Task는 잠시동안 중단(종료)되었다가 다시 프로비저닝 받아서 생성되는 것을 확인할 수 있습니다. 따라서 테스트를 위해서 ECS를 켜두고 만들어 놓은게 아까워서 중지시켜버리면 다음날에 큰 혼란이 생길 수 있습니다. 저는 어차피 작업정의를 사용해서 서비스를 만들 수 있으니, 깔끔하게 종료하고 다시 만들었습니다. 한 번 크게 데일뻔한 경험이 있었습니다.</p><h2 id="Airflow-Workers-On-ECS"><a href="#Airflow-Workers-On-ECS" class="headerlink" title="Airflow Workers On ECS"></a>Airflow Workers On ECS</h2><p>이제 본격적으로 에어플로우의 워커들을 ECS에 올려보도록 하겠습니다. 먼저 클러스터를 만들어주겠습니다. </p><h3 id="클러스터-생성"><a href="#클러스터-생성" class="headerlink" title="클러스터 생성"></a>클러스터 생성</h3><p>저는 빈 깡통의 클러스터가 필요했습니다. ASG로 되어 있는 인스턴스를 Fargate로 변경하고 인스턴스 비용을 감소하려는 목적이 있기 때문에 빈 클러스터인 네트워킹 전용 클러스터를 만들어줍니다. </p><img src="/images/airflow-ecs/ecs-cluster01.png" alt="ecs-cluster01" style="zoom:80%;" /><p>그 다음은 빈 깡통답게 이름만 적어주고 VPC를 만들어줄 것인지, 태그를 넣을 것인지만 설정하면 됩니다. 전 이름만 설정하고 다른 건 건드리지 않고 그냥 생성했습니다.</p><h3 id="Task-Definition-생성"><a href="#Task-Definition-생성" class="headerlink" title="Task Definition 생성"></a>Task Definition 생성</h3><p>이제 작업정의를 만들어볼 시간입니다. 작업정의 생성을 누르면 <code>시작 유형 호환성 선택</code>이 나옵니다. 저는 Fargate로 만들어보겠습니다. </p><p><img src="/images/airflow-ecs/task_definition_01.png" alt="task_definition_01"></p><p>그 다음 단계를 누르면 본격적으로 작업 정의를 구성할 수 있습니다. 작업 역할에는 <code>ecsTaskExecutionRole,</code> <code>ecsS3FullAccessTaskRole</code>, <code>ecsTaskInstanceRole</code> 이 있습니다. 원하는 목적에 맞게 설정하시면 됩니다. 저는 ecsTaskExecutionRole를 선택하겠습니다. 작업 실행 IAM도 같이 세팅해주시고 다음으로 넘어갑니다.</p><p><img src="/images/airflow-ecs/task_definition_02.png" alt="task_definition_02"></p><p>이제 작업 크기가 어떻게 되는지, 작업 CPU가 얼마나 필요한지 설정해줘야 합니다. Fargate를 사용하기 때문에 사용량을 결정해야 하는 것입니다. 만약에 인스턴스를 선택한다면, 필요한 인스턴스의 크기를 골라주면 되겠습니다. 저는 기존에 사용하던 인스턴스 크기를 알기 때문에 해당 인스턴스의 스펙을 넣어주었습니다. 이제 가장 중요한 컨테이너 정의를 해보겠습니다.</p><p><img src="/images/airflow-ecs/task_definition_03.png" alt="task_definition_03"></p><p>컨테이너 추가를 누르면 다음과 같은 화면이 등장합니다. 컨테이너 이름에 원하는 이름을 넣어주시고, 이미지에는 ECR에 올려둔 이미지의 주소와 이미지명, 태그를 예시와 같이 넣어주시면 됩니다. 메모리 제한은 사용하는 메모리의 제한 정도를 뜻하는데 저는 위에서 넣어준 작업 메모리의 80%정도를 넣어놨습니다.  그리고 포트 매핑에는 열어줄 포트를 기입하면 됩니다. 만약에 <code>docker run -p 8793:8793</code>이런 식으로 docker run을 한다면 8793을 넣어주면 됩니다. 굉장히 편리하죠??</p><p><img src="/images/airflow-ecs/container_01.png" alt="container_01"></p><p>그 밑에 고급 컨테이너 구성으로 넘어가면 상태검사 할 부분을 넣어주면 되는데 워커에는 딱히 상태검사할 게 없기 때문에 패스하겠습니다. </p><p><img src="/images/airflow-ecs/container_02.png" alt="container_02"></p><p>환경 부분으로 넘어가면 사용할 CPU단위와 GPU가 나옵니다. GPU는 사용하지 않기 때문에 넘어갔고, CPU는 위에서 작성한 CPU코어 정도를 넣어놨습니다. 그리고 제가 가장 아쉬워 하는 부분인 진입점과 명령, 작업 디렉토리 부분입니다. 쌩 번역체를 사용한 것으로 보이는 이 부분은 바로 도커의 ENTRYPOINT와 CMD, WORKDIR를 나타내는 말이였습니다. 처음에 이 부분을 몰라서 헤맸는데, 헤매지 마시고 사용하는 명령어가 따로 있으시다면 넣어주시면 됩니다. 그리고 환경변수에는 key와 value로 나와있는데 docker run을 할때 <code>-e</code>로 넣어주는 파라미터가 있다면 여기에 넣어주시면 됩니다. 저는 <code>AIRFLOW_HOME</code>, <code>queue</code> 정도를 넣어놨습니다. </p><p>이제 맨 하단에 도커 레이블을 작성해주면 끝입니다. </p><p>다시 작업 정의쪽으로 나와서 맨 밑으로 내려가면 Tag가 있는데 저는 이름으로 구분해야 될 게 있었기 때문에 태그에 Name을 넣어주고 원하는 이름을 넣어줬습니다. 그리고 생성하면 작업 정의:1 버전이 나옵니다!</p><h3 id="Service-생성"><a href="#Service-생성" class="headerlink" title="Service 생성"></a>Service 생성</h3><p><img src="/images/airflow-ecs/service_01.png" alt="service_01"></p><p>시작 유형에서 우리가 원하는 Fargate를 선택하고 작업정의에 아까 만든 것을 선택해줍니다. 개정은 revision으로 수정된 버전을 말합니다. 기본값은 latest로 최근에 만든 것을 반영합니다. 클러스터도 만든 것을 넣어주고 서비스 이름을 넣어줍니다. </p><p>Task 개수는 원하는 만큼 넣어주면 됩니다. 최소 정상 상태 백분율은, 기본적으로 띄워져 있는 Task의 상태를 말하는데, 문서에는  <code>배포 과정에서 실행 중인 작업의 개수에 하한선을 제공하여 추가 클러스터 용량을 사용하지 않고도 배포할 수 있게 해줍니다.</code>라고 나와있습니다. 그러니까 기본 값인 100이라고 설정하게 되면 위에서 설명한대로, 태스크를 중지해도 계속 올라오게 되는 것입니다. </p><p><img src="/images/airflow-ecs/segvice_02.png" alt="service_02"></p><p>다음으로 넘어가면 보안그룹과 VPC를 설정할 수 있습니다. 사용하는 VPC를 넣어주고 보안그룹에는 Airflow worker를 위한 보안 그룹을 넣어주면 됩니다. Airflow worker의 보안그룹은 메인서버와 메타디비를 연결해주는 부분만 열어주면 되겠습니다. Airflow는 기본적으로 flask를 통해 8793포트로 열리고 열린 8793포트를 통해서 작업을 할당받으며, 작업로그를 메타디비(mysql)에 3306포트를 통해 남기므로 메인서버와 8793을 매핑해주고 메타디비와 3306(mysql)로 매핑해주겠습니다. </p><p>로드 밸런싱은 필요하다면 미리 LB를 만들어놓고 넣어주면 되지만, Airflow에는 LB가 따로 필요하지 않습니다. 메시지 브로커인 Redis를 통해서 작업을 워커에서 받아가기 때문입니다. 그냥 airlfow.cfg에 메인서버 아이피와 metaDB 아이피를 적어주면 알아서 가져가는 것을 보실 수 있습니다. </p><p>오토스케일링을 패스하고 만들어주면? 서비스가 만들어졌습니다.</p><p>이제 클러스터화면에서 작업 탭을 누르면 Task와 상태를 확인하실 수 있습니다. </p><p><img src="/images/airflow-ecs/ecs-service-complete.png" alt="ecs-service-complete"></p><p>여기서 원하는 작업을 이름으로 선택하고 log로 들어가면, 컨테이너에서 발생하고 있는 이력들을 확인하실 수 있습니다. 이 곳에서 airflow가 잘 설치가 됐는지 정상적으로 동작이 되고있는지, 포트는 제대로 열려서 작업을 받고있는지 등등을 체크할 수 있습니다.  이 로그는 CloudWatch에 로그그룹에서 더 자세하게 확인할 수 있습니다.</p><h2 id="Trouble-Shooting"><a href="#Trouble-Shooting" class="headerlink" title="Trouble Shooting"></a>Trouble Shooting</h2><p>이제 제가 겪은 자잘한 에러들에 대한 해결에 대해서 설명드리겠습니다. 알고보면 간단한데 해결을 못해서 쩔쩔매느라 아까운 시간을 다 보냈습니다… 저 같이 시간을 버리시지 말기를 바라며…</p><h3 id="Airflow-initdb시-SqlAlchemy-ModelSchema-Not-found-error"><a href="#Airflow-initdb시-SqlAlchemy-ModelSchema-Not-found-error" class="headerlink" title="Airflow initdb시 SqlAlchemy ModelSchema Not found error"></a>Airflow initdb시 SqlAlchemy ModelSchema Not found error</h3><p>작업 로그를 보던 중에 airflow initdb를 할 때마다 ModelSchema 관련 에러가 발생하는 것을 확인했습니다. SqlAlchemy부분에서 에러가 나길래 열심히 구글링을 해보니, 제가 사용하고 있는  <code>airflow 1.10.9</code>버전에서 사용하는 sql_alchemy, marshmallow 등의 버전이 맞지 않아 발생하는 문제였습니다. 버전이 바뀐 이후부터 ModelSchema를 불러오는 메서드의 디렉토리 구조가 변경되었는데, 이 때문에 메서드를 제대로 불러오지 못해 발생한 것이었습니다. </p><p>requirements.txt에 다음과 같이 설정하면 해결이 가능합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#requirements.txt</span></span><br><span class="line">marshmallow==2.21.0</span><br><span class="line">marshmallow-enum==1.5.1</span><br><span class="line">marshmallow-sqlalchemy==0.22.3</span><br></pre></td></tr></table></figure><h3 id="hostname-resolver-py-문제"><a href="#hostname-resolver-py-문제" class="headerlink" title="hostname_resolver.py 문제"></a>hostname_resolver.py 문제</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.exceptions.ConnectionError: HTTPConnectionPool(host&#x3D;&#39;169.254.169.254&#39;, port&#x3D;80): Max retries exceeded with url: &#x2F;latest&#x2F;meta-data&#x2F;local-ipv4 (Caused by NewConnectionError(&#39;&lt;urllib3.connection.HTTPConnection object at 0x7f3e4d9966d8&gt;: Failed to establish a new connection: [Errno 22] Invalid argument&#39;,))</span><br></pre></td></tr></table></figure><p>작업 로그에서 또 다시 에러가 발생해서 확인해보니 위의 에러가 발생하고 있었습니다. 169.254.169.254는 AWS의 meta데이터가 담겨있는 곳인데 이 곳에 접근하지 못해서 발생하는 에러였습니다. 기존 ASG워커에서는 metadata를 통해 EC2의 privateIP를 갖고와야 해당 IP에 작업내용을 전달할 수 있었습니다. 그렇지 않으면 docker 컨테이너의 호스트명만 갖고오게 되어 작업이 제대로 실행되지 않습니다. 하지만 ECS에서 Fargate는 docker의 컨테이너 호스트명을 부여하는 대신 privateIP를 부여합니다. <a href="https://docs.aws.amazon.com/ko_kr/AmazonECS/latest/userguide/fargate-task-networking.html">AWS 문서</a> <code>기본적으로 모든Amazon ECS작업Fargate에는 기본 프라이빗 IP 주소가 포함된 elastic network interface (ENI) 가 제공됩니다.</code> </p><p>물론 ECS에서 metadata를 활성화 하는 것도 한 방법이겠으나, Private IP가 제공되니, 이 IP를 갖고오면 작업을 바로 할당받을 수 있으므로, 굳이 metadata를 이용할 필요가 없었습니다. 따라서 hostname_resolver.py의 파일안의 resolve함수의 내용을 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resolve</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">return</span> socket.gethostbyname(socket.gethostname())</span><br></pre></td></tr></table></figure><p>이런식으로 사용해서 privateIP를 전달했습니다. </p><h3 id="airflow에서-emr에-작업-실행시-권한-문제"><a href="#airflow에서-emr에-작업-실행시-권한-문제" class="headerlink" title="airflow에서 emr에 작업 실행시 권한 문제"></a>airflow에서 emr에 작업 실행시 권한 문제</h3><p>이제 정말 다 되었다고 생각하고 airflow에 EMR에 실행하는 작업을 내렸습니다. 하지만 또 다시</p><p><code>ERROR - An error occurred (AccessDeniedException) when calling the RunJobFlow operation: User: arn:aws:sts::xxxxx:assumed-role/ecsTaskExecutionRole/xxxxxxxx is not authorized to perform: elasticmapreduce:RunJobFlow on resource: arn:aws:elasticmapreduce:ap-northeast-2:xxxxxx:cluster</code></p><p>권한이 없다는 얘기가 나왔습니다. 다행히 로그에 권한 문제라고 써있어서, 쉽게 해결할 수 있었습니다. IAM에서 <code>ecsTaskExecutionRole</code> 를 찾았고, 여기에 기존에 사용하던 권한을 넣어주니, EMR에서 작업이 실행되고 EMR 클러스터도 컨트롤 하는 것을 확인할 수 있었습니다. </p><hr><p>이외에도 자잘한 이슈들이 많았지만, 너무 자잘해서 글로 옮기는게 민망해 올리지는 않았습니다. 이렇게 1-2주간의 삽질이 글 한편으로 정리가 되었습니다. 어려움도 많았지만 이를 통해서 ECS를 자세하게 배워보고 활용할 수 있었던 기회였던 것 같아 보람있었네요. ECS로 바꾸게 되면서, 여러 기능적 문제 때문에 점점 Kubernetes로 바꾸어야 겠다는 생각이 많이 들기 시작했습니다. 한 달 이내에는 Airflow를 Kubernetes에 올리는 글을 쓰게 되지 않을까 싶습니다. 읽어주셔서 감사합니다. 부족한 부분은 댓글로 남겨주세요!</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://boostbrothers.github.io/technology/2020/01/29/AWS-ECS-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0.html">https://boostbrothers.github.io/technology/2020/01/29/AWS-ECS-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0.html</a></li><li><a href="https://wooono.tistory.com/133">https://wooono.tistory.com/133</a></li><li><a href="https://docs.aws.amazon.com/ko_kr/AmazonECS/latest/userguide/fargate-task-networking.html">https://docs.aws.amazon.com/ko_kr/AmazonECS/latest/userguide/fargate-task-networking.html</a></li></ul>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2021/08/28/airflow-ecs/#disqus_thread</comments>
    </item>
    
    <item>
      <title>yml 파일을 잘 다뤄보자</title>
      <link>http://tkdguq05.github.io/2021/08/11/yaml-break/</link>
      <guid>http://tkdguq05.github.io/2021/08/11/yaml-break/</guid>
      <pubDate>Wed, 11 Aug 2021 08:45:07 GMT</pubDate>
      <description>
      
        &lt;p&gt;yml파일을 갖고 놀아보자&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>yml파일을 갖고 놀아보자</p><a id="more"></a><h2 id="Yaml"><a href="#Yaml" class="headerlink" title="Yaml"></a>Yaml</h2><blockquote><p><strong>YAML</strong>은 <a href="https://ko.wikipedia.org/wiki/XML">XML</a>, <a href="https://ko.wikipedia.org/wiki/C_(프로그래밍_언어)">C</a>, <a href="https://ko.wikipedia.org/wiki/파이썬">파이썬</a>, <a href="https://ko.wikipedia.org/wiki/펄">펄</a>, <a href="https://ko.wikipedia.org/w/index.php?title=RFC2822&action=edit&redlink=1">RFC2822</a>에서 정의된 e-mail 양식에서 개념을 얻어 만들어진 ‘사람이 쉽게 읽을 수 있는’ 데이터 직렬화 양식이다. 2001년에 <a href="https://ko.wikipedia.org/w/index.php?title=클라크_에반스&action=edit&redlink=1">클라크 에반스</a>가 고안했고, Ingy dot Net 및 Oren Ben-Kiki와 함께 디자인했다. <a href="https://ko.wikipedia.org/wiki/YAML">위키백과</a></p></blockquote><p>YAML의 이름은 YAML Ain’t Markup Language 라는 이름에서 유래되었고 원래의 뜻은 Yet Another Markup Language로 또 다른 마크업 언어였으나, 핵심은 문서 마크업이 아닌 데이터 중심에 있습니다. XML과 Json이 데이터 직렬화에 주로 사용되고 있는데, 많은 사람들이 YAML을 가벼운 마크업 언어로 사용하려고 하고 있습니다.</p><p><code>yaml이 있는데 yml은 뭐지?</code></p><p>yaml은 공식 확장자이며 그 외의 확장자로 yml도 사용됩니다. 옛날에는 파일의 확장자 길이가 3자로 제한되었기 때문에 3글자 확장자 스타일을 고수하는 사람들 때문에 yml파일 확장자가 보이는 것 같습니다.</p><h2 id="왜-YAML을-사용할까"><a href="#왜-YAML을-사용할까" class="headerlink" title="왜 YAML을 사용할까?"></a>왜 YAML을 사용할까?</h2><p>yaml을 사용하는 이유는 간단합니다. 한 파일에서 모든 configuration을 관리하기 위해서 입니다. 혹시 yaml을 잘 접해보지 못하신 분들이 있다면, 블로그 파일구조를 살펴보면 좋을 것 같습니다. 저의 경우는 hexo를 사용하고 있는데, icarus theme를 들어가 보면 _config.yml파일로 이 테마의 구성요소를 관리할 수 있는 파일이 있습니다. 이 파일을 통해 글또 아이콘을 등록한다던가 category페이지를 오른쪽이나 왼쪽으로 옮기는 등의 작업을 간단하게 처리할 수 있습니다.</p><p>이것을 실무에도 적용하고 있는데, 저희 회사의 경우에는 Airflow의 추천 DAG와 Segmentation DAG들을 한 파일로 관리하기 위해 yaml파일을 만들어서 처리하고 있습니다. 고객사에 대한 정보와 고객사에 필요한 서버의 스펙이나 작업 메모리들을 yaml에  넣어서 굉장히 편리하게 작업 및 세부 리소스들을 관리할 수 있게 되었습니다. yaml과 github action 그리고 쉘 스크립트 등을 이용해서 작업을 하고 있는데, 기회가 되면 더 자세하게 소개해보도록 하겠습니다. 다른 회사의 경우에는 일반적으로 등장하는 것이 아마 kubernetes일 것입니다. kubernetes에서는 대부분의 정보를 yaml파일로 만들어서 kubectl에 제공합니다. 저희가 실무에서 사용하는 것과 비슷하게 kubernetes에서도 편리하게 컨테이너 이미지나 기타 설정을 편리하게 할 수 있겠습니다.</p><h2 id="YAML-문법"><a href="#YAML-문법" class="headerlink" title="YAML 문법"></a>YAML 문법</h2><p>YAML은 기본적으로 사람 눈으로 보기가 편합니다. 간단한 문법을 익히고 난다면, python 코드나 다른 코드들에 비해서 가독성이 훨씬 좋아 눈으로 어떤 작업을 할지 알아보기가 더 좋을 것이라고 생각됩니다. 그러면 yaml 문법들을 살펴보겠습니다!</p><h3 id="주석과-기본-문법"><a href="#주석과-기본-문법" class="headerlink" title="주석과 기본 문법"></a>주석과 기본 문법</h3><p>yaml은 python과 마찬가지로 <code>#</code>을 주석을 다는 문자로 사용합니다. 코드 앞에 #표시를 해주면 그 라인은 읽지 않습니다. 또한 python과 비슷하게 indentation에 민감합니다. 파이썬에서는 tab(space 4번)을 주로 사용하지만 yaml에서는 기본이 스페이스바 두 번 입니다. 기본적인 문법은 <a href="https://subicura.com/k8s/prepare/yaml.html#%E1%84%80%E1%85%B5%E1%84%87%E1%85%A9%E1%86%AB%E1%84%86%E1%85%AE%E1%86%AB%E1%84%87%E1%85%A5%E1%86%B8">쿠버네티스 안내서</a> 에 너무 잘 정리가 되어있어서, 링크로 대체하겠습니다. 한 번 읽고 스크롤을 내려주시면 감사하겠습니다. </p><h3 id="리스트"><a href="#리스트" class="headerlink" title="리스트"></a>리스트</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span><span class="bullet">--</span> <span class="comment"># block format</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">apple</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">banana</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">kiwi</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">--</span> <span class="comment">#inline format</span></span><br><span class="line"><span class="string">[apple,</span> <span class="string">banana,</span> <span class="string">kiwi]</span></span><br></pre></td></tr></table></figure><p>리스트의 형식은 두 가지로 나뉘어 집니다. block format과 inline format입니다. 저는 사실 이 포맷을 굉장히 오래 전 부터 봐왔습니다. hexo로 포스팅을 하다보면, 맨 위에 사이드 바나 태그, 카테고리를 정하는 부분이 있는데, 이 부분이 바로 yaml의 리스트 형식을 사용하고 있습니다.</p> <img src="/images/yaml/hexo-yaml.png" alt="hexo-yaml" style="zoom:50%;" /><p>예전에는 뭔지도 모르고 사용했었는데, 다시 살펴보니 구조가 눈에 들어오기 시작합니다.</p><h3 id="해시"><a href="#해시" class="headerlink" title="해시"></a>해시</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span><span class="bullet">--</span> <span class="comment"># Block</span></span><br><span class="line"><span class="attr"> name:</span> <span class="string">sanghyub</span></span><br><span class="line"><span class="attr"> age:</span> <span class="number">29</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">--</span> <span class="comment"># Inline</span></span><br><span class="line"><span class="string">&#123;name:</span> <span class="string">sanghyub,</span> <span class="attr">age:</span> <span class="number">29</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>해시는 키-밸류 구조라고 보시면 됩니다. 이것도 역시 Block, Inline방식이 있습니다. 저는 개인적으로 Block방식을 선호해서 주로 사용하고 있는데, 편한 걸 사용하시면 됩니다.</p><h4 id="리스트와-해시"><a href="#리스트와-해시" class="headerlink" title="리스트와 해시"></a>리스트와 해시</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">men:</span> <span class="string">[sanghyub,</span> <span class="string">lee]</span></span><br><span class="line"><span class="attr">women:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">sanghyub</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">lee</span></span><br></pre></td></tr></table></figure><p>만약 키에 여러 값들을 넣고 싶다면 위와 같은 방식으로 넣을 수 있습니다.</p><h4 id="해시의-리스트"><a href="#해시의-리스트" class="headerlink" title="해시의 리스트"></a>해시의 리스트</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">messi</span></span><br><span class="line"><span class="attr">  assists:</span>  <span class="number">61</span></span><br><span class="line"><span class="attr">  goals:</span>  <span class="number">99</span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">Son</span></span><br><span class="line"><span class="attr">  assists:</span>  <span class="number">77</span></span><br><span class="line"><span class="attr">  goals:</span><span class="number">100</span></span><br></pre></td></tr></table></figure><p>반대로 하고 싶다면 이런 방식을 사용하면 됩니다. 이해하기 어렵다면, 직접 파일을 만들어서 확인해보겠습니다.</p><p><img src="/images/yaml/yaml-code.png" alt="python으로 값을 확인해보자"></p><p>python으로 pyyaml을 불러와서 확인해보면 값이 위와 같이 들어가 있는 것을 확인해 볼 수 있습니다.</p><h3 id="상속"><a href="#상속" class="headerlink" title="상속"></a>상속</h3><p>yaml에서 재밌는 부분은 상속에 대한 부분입니다. 사실 이번 포스팅에서 주로 다루고 싶었던 것이기도 합니다. 위에서 말한 프로젝트를 진행했을 때에도, 이 상속을 처음 접하고 적용했습니다. 물론 처음엔 좀 헷갈렸지만 응용하면 코드를 적을 양이 효과적으로 줄어드는 것을 체감하실 수 있을 것입니다. 상속에서 중요한 것은 상속에 대한 문자와 Alias입니다. 미리 정한 양식에 별명을 붙이고 그 별명 붙인 것을 불러오면 내용을 그대로 사용할 수 있습니다. 굳이 똑같이 따라 칠 필요가 없어지는 것입니다.</p><h4 id="Alias"><a href="#Alias" class="headerlink" title="Alias"></a>Alias</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">b-anchor:</span> <span class="meta">&amp;name</span> <span class="string">value</span></span><br><span class="line"></span><br><span class="line"><span class="attr">b-alias:</span> <span class="meta">*name</span></span><br></pre></td></tr></table></figure><p>별명은 굉장히 간단합니다. &amp;로 별명을 붙여주면 끝입니다! 불러올 때는 *를 이용해서 값을 불러올 수 있습니다.</p><h4 id="상속-lt-lt"><a href="#상속-lt-lt" class="headerlink" title="상속(&lt;&lt;)"></a>상속(&lt;&lt;)</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">maltese:</span> <span class="meta">&amp;dog</span></span><br><span class="line"><span class="attr">  cute:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  bark:</span> <span class="string">"bow-wow"</span></span><br><span class="line"><span class="attr">jindol:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*dog</span></span><br><span class="line"><span class="attr">  nationality:</span> <span class="string">"korea"</span></span><br><span class="line"><span class="attr">pug:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*dog</span></span><br><span class="line"><span class="attr">  ugly:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>위의 예시를 사용해서 상속의 종합적인 설명을 해보겠습니다. 말티즈라는 키에 여러 값들을 담아놨습니다. 귀여움과 짖음을 넣어 놨습니다. 말티즈는 개라는 특성을 담아둘만 한 것 같아서 &amp;dog라고 별명을 붙여놨습니다. jindol이에 똑같은 개의 특성을 넣고 싶은데 타자 많이 치는 것은 싫어서 별명 붙인 것을 가져왔습니다. 그리고 추가적인 특성이 필요해서 값을 넣었습니다. pug도 마찬가지입니다. 기본적인 개의 특성은 별명을 불러와서 붙여넣었고 추가적인 특성을 붙여넣었습니다.</p><p>그리고 한 가지 더 알아야 할 점은, 이렇게 붙인 별명은 같은 디렉토리에서 공유가 가능하다는 것입니다. 즉, 한 yml파일에서 붙여놓은 별명을 다른 yml파일에서 *로 불러와서 사용이 가능합니다. </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#config.yml</span></span><br><span class="line"><span class="attr">EXECUTOR_SPEC:</span> </span><br><span class="line"><span class="number">10</span><span class="string">G-10G-15</span> <span class="string">:</span> <span class="string">&amp;10G-10G-15</span></span><br><span class="line"><span class="attr">  executor_memory:</span> <span class="number">10</span><span class="string">G</span></span><br><span class="line"><span class="attr">  driver_memory:</span> <span class="number">10</span><span class="string">G</span></span><br><span class="line"><span class="attr">  num_executors:</span> <span class="number">15</span></span><br><span class="line"><span class="number">20</span><span class="string">G-20G-30</span> <span class="string">:</span> <span class="string">&amp;20G-20G-30</span></span><br><span class="line"><span class="attr">  executor_memory:</span> <span class="number">20</span><span class="string">G</span></span><br><span class="line"><span class="attr">  driver_memory:</span> <span class="number">20</span><span class="string">G</span></span><br><span class="line"><span class="attr">  num_executors:</span> <span class="number">30</span></span><br><span class="line"><span class="number">20</span><span class="string">G-20G-50</span> <span class="string">:</span> <span class="string">&amp;20G-20G-50</span></span><br><span class="line"><span class="attr">  executor_memory:</span> <span class="number">20</span><span class="string">G</span></span><br><span class="line"><span class="attr">  driver_memory:</span> <span class="number">20</span><span class="string">G</span></span><br><span class="line"><span class="attr">  num_executors:</span> <span class="number">50</span></span><br><span class="line"><span class="number">50</span><span class="string">G-50G-50</span> <span class="string">:</span> <span class="string">&amp;50G-50G-50</span></span><br><span class="line"><span class="attr">  executor_memory:</span> <span class="number">50</span><span class="string">G</span></span><br><span class="line"><span class="attr">  driver_memory:</span> <span class="number">50</span><span class="string">G</span></span><br><span class="line"><span class="attr">  num_executors:</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feather:</span> <span class="meta">&amp;feather</span></span><br><span class="line"><span class="attr">  exspec:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*10G-10G-15</span></span><br><span class="line"><span class="attr">middle:</span> <span class="meta">&amp;middle</span></span><br><span class="line"><span class="attr">  exspec:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*20G-20G-30</span></span><br><span class="line"><span class="attr">lightheavy:</span> <span class="meta">&amp;lightheavy</span></span><br><span class="line"><span class="attr">  exspec:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*20G-20G-50</span></span><br><span class="line"><span class="attr">heavy:</span> <span class="meta">&amp;heavy</span></span><br><span class="line"><span class="attr">  exspec:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*50G-50G-50</span></span><br></pre></td></tr></table></figure><p>Airflow의 각 DAG에서 EMR 스펙을 다르게 사용하고 Airflow의 DAG를 종합하는 yml파일이 있다고 가정해 봅시다. 만약에 위와 같이 yml이 작성되어 있지 않았다면, 종합하는 yml파일의 고객사 DAG마다 executor, driver 메모리, 익스큐터 수를 일일이 지정해줘야 되었을 것입니다. 고객사가 100개라면? 100개씩 적는 노가다를 하다가 정신이 혼미해져서 휴먼에러가 발생할 가능성이 매우 높아질 수 있습니다. 그렇다면, Airflow를 통해 실행한 DAG들에 심각한 에러가 발생하고, 원인 파악하기가 매우 힘들어질 것입니다.(실제로 그래 봤습니다.) </p><p>좀 더 들어가면, 이 clients.yml과 종합하는 yml을 연결하기 위한 python파일들이 존재합니다. 이 파이썬 파일들을 이용해서 clients.yml에 있는 값들을 종합하는 yml에 옮겨주고 합쳐진 yml을 통해 완전해진 값들을 가지고 고객사들의 DAG들을 생성할 수 있게 되는 것입니다. </p><hr><p>고객사들의 DAG를 자동으로 생성해주는 방법에 대해서 궁금해지셨을 것 같습니다만, yaml글을 통해서 yaml을 한번 갖고 놀아보시고?! 다음 글을 기대해주시면 좋을 것 같습니다. 다음 글에서는 위에서 만든 yml파일과 종합하는 yml파일, 그리고 github action을 사용해서 Airflow의 DAG를 자동으로 만들어주고 배포하는 과정에 대해서 알아보겠습니다.</p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2021/08/11/yaml-break/#disqus_thread</comments>
    </item>
    
    <item>
      <title>글을 왜 써야 할까? - 고민과 정리의 시간</title>
      <link>http://tkdguq05.github.io/2021/08/01/geultto6/</link>
      <guid>http://tkdguq05.github.io/2021/08/01/geultto6/</guid>
      <pubDate>Sun, 01 Aug 2021 01:06:23 GMT</pubDate>
      <description>
      
        &lt;p&gt;글또 6기를 시작하며, 고민한걸 정리하기&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>글또 6기를 시작하며, 고민한걸 정리하기</p><a id="more"></a><h2 id="글또"><a href="#글또" class="headerlink" title="글또"></a>글또</h2><p>2019년 7월에 입사를 하고 설레는 맘으로 글또 3기에 지원했을때가 생각난다. 페이스 북에 글또를 모집한다는 글을 보고 열심히 자기소개를 준비해서 구글 폼을 입력하고 결국 합격했다는 메일을 받았다. 당시에는 코로나가 없었을 때라, 잠실 쪽에 배민 작은 집을 빌려서(참가하신 다른 글또분의 도움으로) OT를 진행했다. 하필 맨 앞에 앉았어서 가장 처음으로 자기소개를 했는데, 첫 회사에 입사했다고 하니 다른 분들이 축하한다고 박수를 쳐주셨다. 이것이 글또에 대한 강렬한 첫인상이었다. </p><p>그 후 열심히 글또에 참여했다. 다른 사람에게 도움이 될 수 있도록, 많이 공부하고 정리해서 글을 작성했다. 다른 분들의 피드백과 글을 통해서 더 빠르게 성장할 수 있었던 것 같다. 그리고 2년이 지났다. 아직 나는 첫 회사에 그대로 남아있다. 내일 채움 공제 덕분이었다. 말그대로 존버 했더니, 어느새 오지 않을 것 같았던 마지막 납입을 하게 되었다. 기뻤다. 그런데 내가 지금 일을 통해 행복한게 아니라 내채공을 겨우 채워넣어서 행복한 느낌만 든 것 같았다. 처음 일을 시작했을 때는 일 자체가 너무 재밌었는데, 나는 지금 매너리즘에 빠진게 아닌가 하는 생각이 들었다.</p><br></br><h2 id="매너리즘"><a href="#매너리즘" class="headerlink" title="매너리즘"></a>매너리즘</h2><blockquote><p>매너리즘 : 예술 창작에 있어서, 늘 같은 수법(手法)을 되풀이하여 신선미(新鮮味)나 독창성을 잃는 일. 순화어는 `타성’.</p></blockquote><p>출근 하고 나서의 일과는 거의 반복된다. 몇몇 이슈 때문에 변주가 일어나긴 하지만, 대개는 거의 비슷한 일들이다. 비슷한 일들. 같은 일을 반복하기 때문에 매너리즘에 빠지게 된 것일까? 나는 언제부터 새로운 것을 시도해 보지 못하게 되었을까? 왜 도전하고 있지 못하는가? 왜 나는 흥미를 잃어가고 있는가? 등 여러 질문들이 머리에 스쳤고, 그 이유가 궁금해졌다. </p><p>먼저 다른 사람들도 2년차 쯤에 이런 고민을 많이 할까 궁금해졌다. <a href="http://www.recruittimes.co.kr/news/articleView.html?idxno=85481">한 기사</a>에서 직장생활 권태기에 대해 조사해 놓은게 있어서 봤는데, 흥미로웠다. 기사 내용을 보니 3년차 쯤에 권태기가 온다는 비율이 23.1% 였다. 나랑 비슷한 사람들은 18.9%였다. 이 사람들의 이유는 무엇일까. ‘반복되는 업무에 대한 지루함’(58.2%, 복수응답)이 가장 많았다. 나 역시 그런 것 같았다. 이어 과도한 업무량, 회사 비전의 불투명함 등이 공감되는 내용이었다. 권태기의 증상으로는 퇴사 충동이 가장 많았다. 스트레스 때문에 쉬고 싶다는 생각을 했었다. 회사를 그만둘까 까지는 가지 않았었는데. 육체적 질병도 권태기의 한 증상이었다. 사실 일을 시작하고 나서 목과 어깨가 너무 안 좋아졌고 그 외에 전반적인 몸 상태와 스트레스 관리가 제대로 되지 않고 있다. 코로나 이후에 운동을 제대로 하지 못해서 더 그런 것 같다. 육체적인 증상과 정신적인 스트레스가 겹치면서 업무에 대한 집중도도 많이 낮아진 것 같다. 하지만 가끔 재밌는 일이 생기면 힘든지도 모르고 계속 일을 붙잡고 있는 걸 보면, 정말 중요한 건 업무에 대한 흥미인 것 같았다. </p><h2 id="이유"><a href="#이유" class="headerlink" title="이유"></a>이유</h2><p>나의 진짜 이유를 생각해보려고 ‘이유’를 적어놓고 한참을 고민했다. 그러다가 알게 된 것은, 내 업무 환경이 너무 산만하다는 것이었다. 집중이 제대로 되지 않을 수 밖에 없는 환경이었다. 가만히 내가 일하는 것을 떠올려보니, 잡다한 이슈들이 많았다. 일을 조금 해보려고 하면, ‘지금 추천 아이템 잘 쌓여있는거 맞지?’, ‘API 제대로 동작하고 있나요?’, ‘신규 고객사 세팅 좀 부탁해’, ‘~건 관련해서 의견 부탁드려요’ 나 기타 회의 등등 바로바로 처리해야 할 것들이 자주 발생하고 있었다. 그 외에 신입으로 오신 분의 업무를 체크하고 잘 하고 계시는 지에 대해 파악을 해야해서 은근히 신경쓰이는 일도 존재했다. 기타 등등, 2년차 실무자가 이거까지 해야하나 싶기도 하지만 일단 내 일이라고 생각해서 하는 중이다. 이렇다 보니 진짜 내 업무를 하는 중에도 뭔가 불안한 마음이 들기 시작한 것 같았다. 업무 환경이 정리되고 내 일을 하면 되는데, 왠지 모를 불안함과 산만함 때문에 집중이 잘 되지 않았다. 집중이 잘 되지 않으니까, 새로운 프로젝트를 하기 힘들었고 하던 일만 계속하게 되는 악순환이 반복되고 있었다.</p><p><strong>또 다른 이유</strong>는 다른 문화를 가진 사람들이다. 현재 데이터 사이언스 팀에서 하는 일들을 다른 팀들에서는 잘 이해하지 못하거나 공감하지 못하는 일이 굉장히 자주 발생하고 있다. A/B테스팅 플랫폼이라던가 추천 모델에서 발생하고 있는 문제점들을을 공유해도 참 설득하는 게 어렵다. 오랜만에 페이스북을 보니, 한 아티클이 눈에 들어왔다. ‘사람들은 생각하기 귀찮아하고 한 번 믿으면 바꾸려하지 않는다.’, ‘사람들의 생각과 믿음을 바꾸는 데는 굉장한 에너지가 들고, 사람들은 자신의 생각이 틀렸다는 것을 알게 되는 것을 힘들어한다.’ 꼬젯님의 글이었다. 이 분도 글의 마지막에서 지치고있고 일 할 기력도 부족했다고 남기셨다. </p><p>나를 많이 도와주셨던 교수님이 하신 말씀이 생각난다. ‘앞으로 시간관리하고 일을 쪼개는 능력이 인생에서 참 중요해질 거야, 젊었을때는 그냥 밤을 새거나 해도 큰 무리가 없는데, 나이를 먹어갈수록 그게 잘 안되고 리소스는 한정되어 있다는 걸 느끼게 돼. 시간을 잘 사용하고 일의 우선순위를 나누는 걸 많이 훈련해놔야 할거야.’</p><p>지금과 같은 힘든 일도 거쳐가야할 성장통이겠지. 일의 우선순위를 잘 나눠서 하나하나 해결해가는 걸 연습해보는 시간이라고 생각해야 겠다.</p><br></br><h2 id="그럼에도-글을-쓰는-이유"><a href="#그럼에도-글을-쓰는-이유" class="headerlink" title="그럼에도 글을 쓰는 이유"></a>그럼에도 글을 쓰는 이유</h2><p>힘든 상황이고 글을 쓸 여유가 많이 없는 상황이다. 이런 와중에 슬랙에 글을 작성했다는 알람이 와서 다른 분들의(대부분은 다짐글) 글을 봤다. 앞으로의 작성할 글의 계획과 글또를 지원한 계기 등이 눈에 띄었다. 밝은 느낌의 글들이 참 많아서 읽으면서 나도 힘을내게 되었다. 그런데 나의 글을 다시보니 밝은 색감보다는 회색 빛에 가까운, 일에 쩌든 듯한 느낌이다. 첫 글부터 회색 빛이라 읽으시는 분들께 조금 미안한 마음이 들긴 하지만, 2년차나 또는 직장생활 중에 한 번은 마주할 수 있는 감정이라고 생각한다. 비슷한 감정을 가진 다른사람들이 이 블로그를 들락날락하다가 <strong>‘’이런 사람도 역시 있구나”</strong>하며 글을 통해 공감하고, 위로가 되었으면 한다. 같은 사람이기에 누군가의 감정 정리 방법이 다른 누군가에게도 적용이 되지 않을까 하는 생각이다.</p><p>개발 글 쓰기 모임이다. 개발과 관련된 글감을 찾아야 하기에, 공부해야 하고 정리하는 게 습관화 되어야 한다. 아마 이 생각마저 없었더라면 더 정체되었을 것 같다. 글또 6기에 참여할 생각은 진작부터 있었기에 노션에 개인 공부용으로 정리된 내용들이 보관되어 있어서 어느정도 보완하고 정리해 글을 만들어서 올릴 생각이다. Hadoop에 대한 기본 개념과 Spark와의 연결, 개념. 예전에는 이해하지 못했던 에러 로그들에 대해서 다뤄보려고 한다. Kubernetes에 대한 관심이 꺼지지 않고 있다. 사용 중인 Airflow를 Kubernetes로 옮겨보면서 개념을 익히고 여기에 대한 내용을 정리해보면 어떨까 생각하고 있다. MLOps에 대해서 꾸준히 다뤄 보고 싶어서 BentoML이나 KubeFlow 등을 살펴보고 있다. 그리고 개발하면서 마주하는 자잘한 이슈들과 성장한 내용들을 성실하게 작성해보려고 한다. </p><p><strong>다른 사람들에게 도움이 많이 되는 글을 작성하는 것</strong>이 이번 기수의 목표였다. 뿐만 아니라, <strong>글을 작성하는 행위가 매너리즘에 빠지지 않도록</strong>, 다른 분들 글을 관심있게 보면서 피드백을 드리고 나의 글에 반영해볼 생각이다. <strong>처음</strong>으로 다시 돌아가야겠다. 머리가 조금 커졌다고 어설프게 살면 안되겠다는 생각이 강하게 들었다. 열의를 가지신 글또의 다른 분들을 보면서 많이 배워나가고 성장해야겠다. 지쳐있어서 그 동안의 주말에 누워만 있었는데, 오늘부터는 뭔가 힘이 나기 시작한다. 오늘 해야할 일을 하나씩 해 나가면서 주말을 마무리하고, 한 주를 시작할 준비를 해야겠다. 글은 힘이된다.</p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2021/08/01/geultto6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>글또 5기를 끝내고, 회고하기</title>
      <link>http://tkdguq05.github.io/2021/05/02/geultto5-end/</link>
      <guid>http://tkdguq05.github.io/2021/05/02/geultto5-end/</guid>
      <pubDate>Sun, 02 May 2021 06:51:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;글또 5기를 마치면서, 나는 어떻게 일하고 있는가…라고 하지만 넋두리 및 내 작은 목표에 대해서&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>글또 5기를 마치면서, 나는 어떻게 일하고 있는가…라고 하지만 넋두리 및 내 작은 목표에 대해서</p><a id="more"></a><h1 id="글또-5기가-끝났다"><a href="#글또-5기가-끝났다" class="headerlink" title="글또 5기가 끝났다"></a>글또 5기가 끝났다</h1><p>11월 부터 시작되었던 글또 5기가 끝이 났다. 어떻게 하다보니 해가 바뀌었고 벌써 5월이 되었고, 글또 5기도 끝이 나버렸다. 시간이 정말 빠르게 흘러가고 있다. 이렇게 속절없이 흘러가는 시간 속에서 글또 활동을 어떻게 해왔는지, 그리고 글또 외에 내가 어떻게 살아왔는지 회고해보는 시간을 가져보려고 한다.</p><p><br></br></p><h2 id="무엇을-썼을까"><a href="#무엇을-썼을까" class="headerlink" title="무엇을 썼을까"></a>무엇을 썼을까</h2><p>이번 기수에서는 Airflow와 관련된 글을 정말 많이 썼다. 글또에서 같은 채널의 온라인 회고시간을 가졌을 때도, Airflow 글 쓰는 사람으로 다 알고 계시는 것 같았다. 다른 글들도 많이 작성하고 싶었는데 업무 상… 다른 걸 공부할 시간이 없었다고 말하고 싶지만, 핑계처럼 보이기도 했다.</p><p><strong>아카이브를 보니 10개의 글을 작성했다.</strong></p><p><img src="/images/geultto5end/2020to2021.png" alt="5기에 작성한 글"></p><p>(글또5기 다짐하기 글이 짤렸음) 생각보다 많이 썼다. 글 쓴 것만 봐도 Airflow쳐돌이라는 것을 잘 알 수 있다. Airflow 글들과 그 배경지식을 위한 네트워크 글, 추천시스템 스터디를 하면서 쓴 FP-Growth, 추천 파이프라인 구성 글로 채워져 있다. 채널에 있는 분들에게는 매우 생소할 수도 있고, 그래서 오히려 재밌게 느껴질 수 있겠다는 것은 내 생각을 뿐이겠고, 실제로 피드백 들어오는 걸 보니까 무슨 말인지 몰라서 피드백 하기 어려워 하시는게 많이 느껴졌다. 그 분들에게는 핵노잼 글(ㅠㅠㅜ) 이었을 것 같아 가슴이 아프다. 엔지니어링 관련 글이 피드백 당첨되고 피드백을 해야 할 때면 참 막막했으리라… 물론 나름 쉽게 적는다고 쉽게 적고, 여러 짤을 사용해서 접근하기 쉽게 만들긴 했는데, 효과는 미미했던 것 같다. 하지만 알아주시는 분이 있어서 매우 감사하게 생각하고 그로 인해 힘이 많이 되었다. </p><p><img src="/images/geultto5end/thanks.png" alt="고마운 분들"></p><p><br></br></p><h3 id="이전-기수에서는"><a href="#이전-기수에서는" class="headerlink" title="이전 기수에서는"></a>이전 기수에서는</h3><p><img src="/images/geultto5end/geultto4was.png" alt="geultto4was"></p><p>이전 기수에서도 물론 엔지니어링 관련된 기본적인 내용을 많이 정리하고 작성했다. 하지만 확실히 5기에 비해서 논문 정리 내용이  몇 개 더 있는 게 확인된다(사진 길이 때문에 CRAFT 논문 요약이 짤림…). 4기 때는 딥러닝이나 모델링 관련해서도 서치를 많이 했고 엔지니어링 쪽에도 신경을 쓴 것 같다. 사진 찍으려고 아카이브를 다시 보다가 5기에 들어서면서 엔지니어링에 완전 집중한 게 확실히 느껴졌다.</p><p><br></br></p><h2 id="달라진-업무"><a href="#달라진-업무" class="headerlink" title="달라진 업무"></a>달라진 업무</h2><h3 id="일"><a href="#일" class="headerlink" title="일"></a>일</h3><p>이렇게 글이 달라진 이유는 뭐니뭐니해도 일 때문이다. 아무래도 일하면서 얻은 정보나 지식을 정리하게 되기 때문인 것 같다. 21년 2월 부터 직무가 데이터 사이언티스트에서 데이터 엔지니어로 옮겨졌다. 직무상 분류해 놓긴한 건데, 이로 인해서 데이터 엔지니어링 업무에 더 집중하게 된 것 같다. 책임감이 더 생겨서 그런 것일까? </p><p>아무튼 데이터 엔지니어로 변경된 후 부터 기존에 서비스 되고 있던 구조를 더 효율적인 구조로 변경하고, 확장하는 등의 프로젝트를 많이 진행하게 되었다. 이를 통해서 네트워크의 중요성을 느끼게 되었고 구조를 업그레이드를 하려면, 그 툴을 제대로 알아야 하기 때문에 사용하는 툴에 대해서 더 파고들어서 공부하게 되었다. 이렇게 탄생한게 바로 Airflow 시리즈 글…! <a href="https://tkdguq05.github.io/tags/airflow/">🌟Airflow 시리즈 글🌟</a></p><p><br></br></p><h3 id="일하는-방식"><a href="#일하는-방식" class="headerlink" title="일하는 방식"></a>일하는 방식</h3><p>데이터 엔지니어링에 집중하게 된 것은 조직의 변화가 있었기 때문이다. 5기때에는 성장통이라고 해야 할까, 빠른 속도로 변화하는 조직과 그 방향을 정하는 데에서 여러 시행착오를 겪고 있었다. <a href="https://tkdguq05.github.io/2020/12/27/20201227/">2020년 회고하기</a> 글에도 나와있긴 하지만 갑자기 팀원이 몇 명 나가게 되면서 분위기가 굉장히 어수선 했었다. 이럴때일수록 프로세스를 만들고 지키는 게 중요하다고 생각해서 팀원들과 앞으로의 방향, 그리고 일하는 방식, 어떻게 체크하고 공유할 것인지 이야기를 많이 나눴다. 그래서 탄생한 것이 데이터 사이언스팀의 칸반 보드였고, 자체 오전 스크럼 시간이 부활하게 되었다(칸반 만드는 것도 참 우여곡절이 많았지만 생략…). 금요일마다 칸반 보드에 작성한 업무들의 진행상황을 확인했고 늦춰지고 있으면 왜 늦춰지고 있는지 이야기를 나눴고, 완료된 일은 코드리뷰를 통해서 확인한 후 Task Complete에 넣어놨다. </p><p>그리고 이런 프로세스를 통해서 각자의 업무가 더 명확해졌다. 내 직무를 변경했기 때문일지도 모르겠지만, 각자의 일이 구체화 되었고 이를 통해서 어떤 업무의 담당자를 정할 수 있었다. 이런 프로세스가 만들어진 데에는 좋은 동료들과 끊임없이 소통을 했기 때문이기도 했지만, 개인적으로는 팀장님의 도움이 컸다. 기획 팀장님께서 데이터 사이언스 팀을 겸직해서 맡게 되셨는데, 기획팀 팀장으로서 기획팀과 개발팀의 프로세스를 잘 구축했었던 경험이 있었던 분이었다. 팀장님께서 주도적으로 프로세스를 만들어주신 것은 아니지만, 기획-개발의 프로세스를 만드는 모습과 설명을 들으면서 많은 걸 배울 수 있었고, 이를 잘 적용할 수 있었다. ‘어른이란 이런 거구나’, ‘직장 선배란 이런 것이구나’를 느끼게 해주신 분이기도 하다.</p><p><img src="/images/geultto5end/kanban.png" alt="업무 프로세스"></p><p><br></br></p><h3 id="Data-Enginnering"><a href="#Data-Enginnering" class="headerlink" title="Data Enginnering"></a>Data Enginnering</h3><p>회고를 하다보니 앞으로의 쓸 글들도 데이터 엔지니어링 글이 될 것 같아서 이에 대한 생각을 잠시 작성해보려고 한다. </p><p>각종 커뮤니티를 보면, 직무 명 데이터 엔지니어는 하는 일이 어느정도 정해진 것 같은데 내 생각은 조금 다르다. 아직도 많은 회사에서 데이터 엔지니어를 구하고, 보유하고 있지만 각 데이터 엔지니어가 하는 일이 회사마다 다 다른것 같다는 생각이다. 회사가 작은지 큰지, 직종이 IT인지 제조업인지, B2C인지 B2B인지에 따라 하는 일이 참 많이 달라지는 것 같다는 걸 느끼고 있다. 지금 있는 이 회사에는 데이터 엔지니어가 없었다. 물론 데이터 사이언티스트도 없었다. 내가 들어오면서 데이터 팀이 구성되기 시작했고, 데이터의 중요성에 대해서 자각하기 시작했다(수 없이 여기에 대해서 자료를 공유하고 설득했다). <del>여담인데 생각해보니 이 회사의 1호 데이터 사이언티스트이지 데이터 엔지니어가 되었다. 허허 참…</del></p><p>다시 본론으로 돌아와서, 회사에서 데이터에 대한 중요성을 느끼기 시작해서 데이터 인프라를 제대로 구성하기 시작했다. 그래서 내가 요즘 하는 일은 데이터 인프라를 설계하고 구성하는 일과 여러 API를 만들고 FastAPI라는 새로운 프레임 워크로 갈아끼는 일, 그리고 의사 결정권자 및 실무자들을 설득하는 일이다. 아무 걱정없이 코드만 만지고 인프라를 구성하고 싶은데 그게 참 어렵다. 물론 예전에는 아무 걱정없이 모델링하고 데이터를 분석하고 싶었었다. 데이터 사이언티스트였으니깐! 하지만 계속 안된다고 하는 벽에 막혔었다. 필요한 데이터가 없거나 할 수 없는 구조이거나, 기타 등등의 이유로. 그래서 답답해서 직접하게 되다 보니 이렇게 되었다. 벽이 하나씩 뚫리고 있는 느낌이라 재밌긴 하지만 동시에 새로운 벽이 나타나는 것 같다는 힘든 점이 있다. </p><p><br></br></p><p>그래서 요즘 하는 일을 좀 더 자세히 적어보자면, 내 궁극적 목표는 <code>데이터가 흐르는 조직 만들기</code> 이다. 첫 단추로 회사에 GCP의 BigQuery를 도입하고자 한다. 여러 데이터 서비스를 하기 위해서는, 그리고 고객들에게 가치가 높은 서비스를 제공하려면 속도가 생명이라고 생각한다. 그런데 데이터 전처리하는데, 그리고 데이터를 끌어오는데 시간이 너무 오래 걸리는 문제가 지속적으로 발생하고 있다. 그래서 큰 데이터를 빠르게 쿼리할 수 있고 OLAP성으로 활용할 수 있는 BigQuery를 사용해보려고 한다. 이를 위해서 기존 DB에서 BigQuery에 데이터를 적재할 때 Embulk라는 새로운 오픈소스를 사용해야할 것 같다. </p><p>또한 BigQuery에 넣고 꺼내 쓸 때도 불필요한 작업을 하고 싶지 않기 때문에 AWS의 Glue처럼 ETL처리를 해서 전처리 된 데이터를 바로바로 사용할 수 있게 만들 것이다. 이렇게 BigQuery에 데이터를 담아놓게 되면, 여러 다른 제품들과도 결합해 사용할 수 있기 때문에 확장성 또한 확보할 수 있을 것이라고 생각한다. BigQuery에서 사용하는 주제 별로 주기적으로 전처리해 테이블을 만들어 데이터 마트를 구성할 수도 있겠고, 이를 통해 다른 부서에서 자유롭게 데이터 분석이 가능할 것이다. 또한 Data Studio나 Redash를 이용해서 자유롭게 데이터를 시각화 할 수 있게 만들 것이다. </p><p>무엇보다도 BigQuery에 데이터가 쌓이기 시작하면, 조직 내 SQL교육을 실시할 것이다. 데이터를 다루는 기본적인 언어인 SQL을 교육함으로써 모두가 데이터에 접근해 원하는 데이터를 확인하고 이 결과를 통해 의사결정을 내릴 수 있게 된다면… </p><p>그렇게 된다면 회사가 많이 바뀌지 않을까. 개인적으로 그래서 기대를 많이 하고 있다. </p><p><br></br></p><hr><h3 id="글을-마치며…"><a href="#글을-마치며…" class="headerlink" title="글을 마치며…"></a>글을 마치며…</h3><p>이렇게 글또 5기 작성한 글들을 보고 회고 및 넋두리 하는 시간이 끝났다. 누구에게 보여지려고 하는 회고가 어디있으랴, 회고는 본질적으로 넋두리가 기본이 아닐까 하는 생각으로 애써 정리를 하려고 했지만 정리가 잘 안된 글을 쓴 나를 위로하면서, 그리고 넋두리를 통해 글또 6기에 작성할 글에 대해서 잠시 고민해보면서 글을 마무리한다.</p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2021/05/02/geultto5-end/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS_Immersion_DAY, 추천 파이프라인</title>
      <link>http://tkdguq05.github.io/2021/04/18/AWS-Immersion-DAY/</link>
      <guid>http://tkdguq05.github.io/2021/04/18/AWS-Immersion-DAY/</guid>
      <pubDate>Sun, 18 Apr 2021 06:21:36 GMT</pubDate>
      <description>
      
        &lt;p&gt;AWS Immersion Day를 참석했다… 추천 파이프라인 다시 생각해보기&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>AWS Immersion Day를 참석했다… 추천 파이프라인 다시 생각해보기</p><a id="more"></a><h2 id="AWS-Immersion-Day"><a href="#AWS-Immersion-Day" class="headerlink" title="AWS Immersion Day"></a>AWS Immersion Day</h2><p>(AWS 광고아님 주의, 회사 지원 세션)</p><p>평화로운 오후를 보내던 어느날 Analytics for E-Commerce Immersion Day 행사 안내 메일이 왔습니다. 분석 시스템에 대해 AWS에 문의한 적이 있었는데, 관련된 웨비나 행사 메일을 척척 보내주시니 아주 감사했습니다. 더군다나 Kinesis나 Kafka에 관심이 있었던지라 학습을 어떻게 해볼까 고민했었는데, 이런 행사가 잡히니 고민이 해결될 수 있겠다는 기대감이 있었습니다. </p><p><img src="/images/aws_immersion/immersion_day.png" alt="봄 향기 가득한 안내문"></p><p>행사는 다음과 같이 진행된다고 했습니다. 저는 다 필요없고 Hands On Lab이 아주 기대가 되었습니다.</p><p><br></br></p><h2 id="행사의-시작"><a href="#행사의-시작" class="headerlink" title="행사의 시작!"></a>행사의 시작!</h2><p>15일 13시 부터 시작이 되었습니다. 물론 점심시간을 최대로 활용하는 바람에 늦어버려서 여유롭게 커피한잔과 함께 13시 20분에 접속을 했습니다. AWS의 분석 파트에 있는 제품들을 소개시켜 주셨는데 흥미로운 내용이었지만 제품의 소개같아서 13시부터 16시까지 진행했던 내용을 요약해서 작성을 할 것 입니다. 오늘의 주제는 Hands On Lab이고 이 실습을 하면서 얻은 교훈(?)을 정리할 것이거든요.</p><p><br></br></p><h3 id="AWS-Analytics"><a href="#AWS-Analytics" class="headerlink" title="AWS Analytics"></a>AWS Analytics</h3><p>데이터 분석에 대한 전반적인 내용이 주로 이뤘습니다. 데이터 분석의 목적에 대해서 간략하게 설명해주시면서, 분석을 통해 의사결정을 도와주거나, 어떤 서비스로 이루어져야 한다는 내용이었습니다. 그 중에 눈에 들어왔던 것은 데이터 분석의 속도에 대한 것과 추천 시스템이었습니다. 데이터 분석이 빠르게 이루어질 수록 그 가치가 커진다는 것인데, 이는 회사생활을 하면서 어느정도 느끼고 있던 부분이었습니다. </p><p><img src="/images/aws_immersion/fast_anal.png" alt="빠른 데이터 분석의 가치"></p><p>빠른 데이터 분석을 위해서는 당연하게도 파이프라인이 잘 구축되어 있어야 하겠습니다. 내용이 이어지면서 Kinesis제품을 소개해주셨습니다. Kinesis는 세 종류의 제품이 있는데 Kinesis Data Firehose, Kinesis Data Streams, Kinesis Data Analytics 입니다. Firehose는 데이터를 DW나 S3등의 데이터 스토어로 쉽게 넣을 수 있는 시스템이고, Streams는 실시간 데이터 스트리밍 서비스로 이를 통해 이상탐지에 적용하거나 실시간 대시보드로 활용할 수 있습니다. 마지막으로 Data Analytics는 말 그대로 스트리밍 데이터를 변환 및 분석해주는 시스템입니다. </p><p><img src="/images/aws_immersion/streaming.png" alt="스트리밍은 어려워"></p><p>이커머스 영역에서는 속도가 매우 중요하기 때문에 스트리밍 데이터가 필수적이라고 할 수 있습니다. 하지만 스트리밍 데이터 처리를 위한 시스템 구축은 생각보다 힘이 많이 듭니다. 그래서 이 세션에서는 극복해야할 과제로 설명해주셨습니다. Kafka를 예로 들어 설명을 많이 해주셨는데, Kafka는 쉽다고는 하지만 설치가 어렵고 유지보수도 어렵고 신경쓸게 참 많습니다. 그래서! 이 포인트에서 Kinesis를 적극 권장하고 있었습니다. 사용하면 물론 좋겠지만 Kinesis는 비싼 편이라 고려를 좀 해봐야겠습니다. </p><p><br></br></p><h2 id="Hands-On-Lab"><a href="#Hands-On-Lab" class="headerlink" title="Hands On Lab"></a>Hands On Lab</h2><p>드디어 기다렸던 Hands On Lab시간입니다. 아까 말씀드렸다시피, 데이터 분석을 이용해서 어떤 서비스로 이루어질수 있고 그 중 대표적인 것은 추천시스템입니다. 핸즈온 시간에는 Analytics에서 설명한 제품들을 갖고 추천시스템 파이프라인을 구성하고 캠페인까지 만들어 보는 시간을 가졌습니다. </p><p>가상 시나리오를 주고 실습하는 부분이 아주 맘에 쏙 들었습니다.</p><blockquote><p>여러분들은 반려동물 용품을 판매하는 가상의 E-commerce 회사인 ‘몽스토어’ 회사를 운영하고 있습니다. 지금까지 비즈니스는 꾸준히 성장해왔지만 반년전부터 매출이 크게 성장하지 못하고 멈춰 있는 상태입니다. 이에 따라 데이터 분석에 대한 니즈가 발생하였으며, 데이터 분석을 통해 개인별 추천서비스를 도입하여 매출의 성장을 도모할 때라는 결론에 이르렀습니다.</p></blockquote><p>투잡 뛰는 느낌이랄까? 아주 설레는 마음으로 실습을 진행했습니다. </p><p>실습내용의 전체 아키텍쳐는 다음과 같습니다.</p><p><img src="/images/aws_immersion/architect.png" alt="전체 구성"></p><p>AWS 시스템 내에서 AWS 제품을 갖고 AWS를 이용한 추천 제품인 AWS Personalize를 사용해서, 추천 캠페인을 진행해보자는 것입니다. 주제가 뭐라구요? AWS냐구요? 맞긴한데 거기에 ‘추천 파이프라인을 만들어봅시다!’ 까지가 주제입니다.</p><p><br></br></p><h3 id="본격-실습"><a href="#본격-실습" class="headerlink" title="본격 실습"></a>본격 실습</h3><p>실습 내용은 최대한 간결하게 요약해서 정리할 것입니다. 이걸 일일이 쓰는 것보다 들어가서 확인하면 되거든요. <a href="http://public-aws-workshop.s3-website.us-east-1.amazonaws.com/analyticsworkshop/">워크샵 링크</a></p><p>정말 궁금하신 분들은 링크로 들어가서 쭉 따라가보시면 됩니다. 물론 실습 엔진은 제공되지 않고 Cloud Formation도 제공되지 않습니다. </p><p>실습 순서는 다음과 같았습니다.</p><ol><li>Cloud Formation으로 환경(스택) 구성하기</li><li>S3 생성하기</li><li>Glue를 이용한 RDS DataBase 크롤링</li><li>크롤링한 데이터 S3로 ETL 전송하기</li><li>Web 로그 데이터 Kinesis Firehose활용하여 수집</li><li>수집 데이터 S3로 ETL</li><li>S3 데이터 Glue활용하여 ETL<ul><li>Athena를 사용해서 데이터 살펴보기</li></ul></li><li>Personalize를 사용해 추천 데이터 생성하기</li></ol><p><br></br></p><p>Cloud Formation을 활용해서 위 그림과 같은 환경을 만들어 주게 됩니다. 일일이 세팅해서 환경 구성을 하려면 시간이 너무 들게 되니까 빠르게 환경을 구축해줍니다. </p><p>Cloud Formation을 활용해 구성한 항목은 위 그림에서 S3기준 왼쪽 부분이라고 할 수 있겠습니다. 망 설정과 webserver, 그리고 RDS입니다. </p><p>S3를 만들어 줄 것인데 S3는 여기서 Data Lake로 활용됩니다. Data Lake는 대규모 데이터를 기본 형식으로 저장하고 있는 Storage로 그럴싸해보이지만 제가 보기에는 데이터를 다 때려넣는 곳이라는 생각이 듭니다. 다른 의견이 있으신 분은 댓글 남겨주세요. 아무튼 S3를 만들어 주고 Glue를 사용해보겠습니다. </p><p><br></br></p><h3 id="Glue"><a href="#Glue" class="headerlink" title="Glue"></a>Glue</h3><p>Glue는 데이터 처리에 사용됩니다. 데이터는 여기서 두 종류로 나뉘는데, RDS에 갖고 있는 구매이력 데이터와, 수집되고 있는 행동 데이터, 즉, 로그데이터 입니다. </p><h4 id="구매이력-데이터-처리"><a href="#구매이력-데이터-처리" class="headerlink" title="구매이력 데이터 처리"></a>구매이력 데이터 처리</h4><ul><li>Glue<ul><li>RDS에서 크롤링, 데이터 베이스의 데이터 구조, 스키마를 바로 알 수 없음<ul><li>스키마, 파티션 구조 추론 뒤 데이터 카탈로그 생성</li></ul></li><li>크롤링 → RDS에 있는 데이터 테이블 확인 가능</li><li>2차 크롤링<ul><li>데이터 카탈로그를 생성한 뒤 데이터를 S3로 보내기(ETL)</li><li>Transform할때는 스크립트를 입력, pyspark 코드를 활용함</li><li>Transform한 뒤 S3에 적재[Load]</li></ul></li></ul></li></ul><h4 id="행동-데이터-로그-데이터-처리"><a href="#행동-데이터-로그-데이터-처리" class="headerlink" title="행동 데이터, 로그 데이터 처리"></a>행동 데이터, 로그 데이터 처리</h4><ul><li>Webserver에서 생성되는 데이터를 Kinesis Data Firehose를 사용해 수집</li><li>수집한 데이터는 S3에 적재</li></ul><p>자 이제 Glue를 통해서 S3에 사용할 데이터를 모두 적재해 놓았습니다. 이제 추천데이터를 생성해보겠습니다. AWS Personalize를 사용해 볼 것인데, Personalize는 사용할 데이터 형식이 따로 존재합니다. 그렇기 때문에 원하는 형식에 맞게 전처리를 해주어야 합니다. 또 다시 Glue를 사용해서 전처리하고 Personalize에 전달해보도록 하겠습니다. </p><p><br></br></p><h3 id="추천-데이터-생성"><a href="#추천-데이터-생성" class="headerlink" title="추천 데이터 생성"></a>추천 데이터 생성</h3><ul><li><p>전처리, Glue</p><ul><li><p>Glue를 통해 ETL처리를 해줌, 과정은 위와 유사함 [구매이력]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> awsglue.transforms <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> awsglue.utils <span class="keyword">import</span> getResolvedOptions</span><br><span class="line"><span class="keyword">from</span> pyspark.context <span class="keyword">import</span> SparkContext</span><br><span class="line"><span class="keyword">from</span> awsglue.context <span class="keyword">import</span> GlueContext</span><br><span class="line"><span class="keyword">from</span> awsglue.job <span class="keyword">import</span> Job</span><br><span class="line"></span><br><span class="line"><span class="comment">## @params: [JOB_NAME]</span></span><br><span class="line">args = getResolvedOptions(sys.argv, [<span class="string">'JOB_NAME'</span>])</span><br><span class="line"></span><br><span class="line">sc = SparkContext()</span><br><span class="line">glueContext = GlueContext(sc)</span><br><span class="line">spark = glueContext.spark_session</span><br><span class="line">job = Job(glueContext)</span><br><span class="line">job.init(args[<span class="string">'JOB_NAME'</span>], args)</span><br><span class="line"></span><br><span class="line"><span class="comment">##create dynamic frame</span></span><br><span class="line">digital_df = glueContext.create_dynamic_frame.from_catalog(database=<span class="string">'demogo-mongstore-database'</span>, table_name=<span class="string">'product'</span>).toDF()</span><br><span class="line">digital_df.createGlobalTempView(<span class="string">"productview"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##sql query</span></span><br><span class="line">client_df = spark.sql(<span class="string">"SELECT productcode as ITEM_ID, productname as PRODUCTNAME, category1||'|'||category2||'|'||category3 as CATEGORY FROM global_temp.productview"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##write output to S3</span></span><br><span class="line">client_df.repartition(<span class="number">1</span>).write.format(<span class="string">'csv'</span>).option(<span class="string">'header'</span>, <span class="string">'true'</span>).save(<span class="string">'s3://demogo-mongstore-[사용자이름]/personalize-items'</span>)</span><br><span class="line"></span><br><span class="line">job.commit()</span><br></pre></td></tr></table></figure></li><li><p>spark sql을 사용해서 Transformation 뒤 S3에 적재하는 구조</p><ul><li><p>AS-IS, 이 데이터를</p><p><img src="/images/aws_immersion/asis_purchase.png" alt="AS-IS"></p></li><li><p>TO-BE, 이렇게 바꿀 것</p><p><img src="/images/aws_immersion/tobe_purchase.png" alt="TO-BE"></p></li></ul></li></ul></li></ul><ul><li><p>로그데이터 처리</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> awsglue.transforms <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> awsglue.utils <span class="keyword">import</span> getResolvedOptions</span><br><span class="line"><span class="keyword">from</span> pyspark.context <span class="keyword">import</span> SparkContext</span><br><span class="line"><span class="keyword">from</span> awsglue.context <span class="keyword">import</span> GlueContext</span><br><span class="line"><span class="keyword">from</span> awsglue.job <span class="keyword">import</span> Job</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment">## @params: [JOB_NAME]</span></span><br><span class="line">args = getResolvedOptions(sys.argv, [<span class="string">'JOB_NAME'</span>])</span><br><span class="line"></span><br><span class="line">sc = SparkContext()</span><br><span class="line">glueContext = GlueContext(sc)</span><br><span class="line">spark = glueContext.spark_session</span><br><span class="line">job = Job(glueContext)</span><br><span class="line">job.init(args[<span class="string">'JOB_NAME'</span>], args)</span><br><span class="line"></span><br><span class="line"><span class="comment">##create dynamic frame</span></span><br><span class="line">digital_df = glueContext.create_dynamic_frame.from_catalog(database=<span class="string">'demogo-mongstore-database'</span>, table_name=<span class="string">'purchase'</span>).toDF()</span><br><span class="line">digital_df.createGlobalTempView(<span class="string">"purchaseview"</span>)</span><br><span class="line">digital_df = glueContext.create_dynamic_frame.from_catalog(database=<span class="string">'demogo-mongstore-database'</span>, table_name=<span class="string">'accesslog2021'</span>).toDF()</span><br><span class="line">digital_df.createGlobalTempView(<span class="string">"accesslog2021view"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##sql query</span></span><br><span class="line">client_df = spark.sql(<span class="string">"SELECT userid as USER_ID, REGEXP_REPLACE(pageurl, '[^0-9]+','') as ITEM_ID, to_unix_timestamp(CAST(time AS timestamp)) as TIMESTAMP, 'view' as EVENT_TYPE FROM global_temp.accesslog2021view UNION ALL SELECT userid as USER_ID, productcode as ITEM_ID, to_unix_timestamp(ordertime) as TIMESTAMP, 'order' as EVENT_TYPE FROM global_temp.purchaseview"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##write output to S3</span></span><br><span class="line">client_df.repartition(<span class="number">1</span>).write.format(<span class="string">'csv'</span>).option(<span class="string">'header'</span>, <span class="string">'true'</span>).option(<span class="string">'header'</span>, <span class="string">'true'</span>).save(<span class="string">'s3://demogo-mongstore-[사용자이름]/personalize-interactions'</span>)</span><br><span class="line"></span><br><span class="line">job.commit()</span><br></pre></td></tr></table></figure><ul><li><p>AS-IS, 이 데이터를</p><p><img src="/images/aws_immersion/asis_log.png" alt="AS-IS"></p></li><li><p>TO-BE, 이렇게 처리</p><p><img src="/images/aws_immersion/tobe_log.png" alt="TO-BE"></p></li></ul></li></ul><p>추천 데이터 생성은 데이터 스키마 매핑 후 데이터 임포트를 해주면 됩니다.  이제 솔루션 생성을 해주면 되는데 여기에는  1시간 이상이 소요되네요. 캠페인을 생성해서 데이터를 보면. 유사도 별 랭킹이 매겨진 추천 데이터를 확인할 수 있습니다. </p><p><img src="/images/aws_immersion/personalize_recomendation.png" alt="생성된 추천 데이터"></p><p><br></br></p><h2 id="실습-종료-무엇을-얻었나"><a href="#실습-종료-무엇을-얻었나" class="headerlink" title="실습 종료, 무엇을 얻었나"></a>실습 종료, 무엇을 얻었나</h2><p>이 실습을 통해 현재 서비스하고 있는 추천 시스템의 구조에 대해서 다시 생각해보게 되었습니다. 현재 서비스하고 있는 추천 시스템은 자세하게 밝히지는 못하지만, 간략하게 구조를 말씀드리면, 로그 데이터를 NoSQL DB로 받아 넣고 이것을 추천용 DB에 일부 전처리 하여 넣어주는 형태입니다. 이 추천용 DB에 데이터를 끌어와서 한 고객사의 추천 데이터를 AWS EMR을 이용해서 배치 스케쥴마다 생성하고 EMR을 종료하고 있습니다. 실습에서 제시된 구조와는 많은 차이가 존재합니다. 물론 실습은 B2C 서비스로 제시되었고 현재 회사는 B2B 서비스기 때문에 차이는 있습니다만, 차이점을 정리하자면 다음과 같습니다.</p><ol><li>Data Lake</li><li>ETL 파이프라인의 부재</li><li>Transform한 데이터의 적재</li></ol><h4 id="먼저-Data-Lake가-없습니다"><a href="#먼저-Data-Lake가-없습니다" class="headerlink" title="먼저 Data Lake가 없습니다."></a>먼저 Data Lake가 없습니다.</h4><p>Data Lake가 꼭 필요하다고는 할 수 없고, 목적에 따라 구성항목에 넣기도 합니다. 물론 회사에서도 전체 데이터가 다 들어있는 DB는 있습니다만, S3제품만큼 고가용성이 보장된다고는 할 수 없을 것 같습니다. S3에도 connection pool size가 있습니다, 그렇지만 현재 사용하고 있는 DB보다야 훨씬 size가 크고 관리하기도 편하다고 생각합니다. 그리고 이렇게 고가용성이 보장되는 Data Lake가 있으면 새로운 서비스를 구상하더라도 connection pool이나 메모리 때문에 장애나는 상황이 거의 없기 때문에 안정적으로 새 서비스를 생각해보고 토이 프로젝트를 해볼 수 있습니다. 현재 운영과 개발DB가 있긴 하지만 개발DB에 문제가 좀…</p><h4 id="ETL-파이프라인이-제대로-구성되지-않은-것-같습니다"><a href="#ETL-파이프라인이-제대로-구성되지-않은-것-같습니다" class="headerlink" title="ETL 파이프라인이 제대로 구성되지 않은 것 같습니다."></a>ETL 파이프라인이 제대로 구성되지 않은 것 같습니다.</h4><p>이 실습에서는 E, T, L이 명확하게 나뉘어져 있다는 것이 느껴지는데, 이 실습을 하고 회사 서비스를 돌아보니 어디부터 어디까지가 ETL인지 구분이 잘 되지 않았습니다. Transform을 하긴 하는데 Load를 안하는 것 같고… Transform이 제대로 되고 있는 건지… 뭐 이런 생각을 하게 되었습니다. 하지만 Glue를 사용한다고 생각하고 구성을 생각해봤을 때, 크게 어려울 것 같지 않았습니다. Glue를 간단히 살펴보긴 했지만, ETL프로세스이고 Transform은 거의 Pyspark로 돌아가고 있었습니다. Pyspark로 이미 추천 데이터를 생성하고 있기에 파이프라인을 정리해주면 금방 적용할 수 있지 않을까 생각해봤습니다. 어디서 끌어오고, 적재할지를 잘 정하는 게 중요할 것입니다. 그렇다면 DB를 잘 알아야 하는데, 이렇게 공부 포인트가 늘어났습니다! 하하</p><h4 id="Transform한-데이터는-어디"><a href="#Transform한-데이터는-어디" class="headerlink" title="Transform한 데이터는 어디?"></a>Transform한 데이터는 어디?</h4><p>큰 문제점 중에 하나라고 생각하는데, 현재 비용 효율적인 아키텍쳐를 지향하고 있기 때문에 EMR을 상시 구동하고 있지 않습니다.      생성한 추천 데이터는 DB에 넣고 있지만, 전처리한 데이터는 여지없이 삭제되고 맙니다. 실습을 진행하고 생각해보니 이 데이터가 너무 아깝다는 생각을 하게 되었습니다. 만약 전처리한 데이터가 남아있다면 다른 서비스에 적용을 해볼 수 있지 않을까 생각이 들었습니다. 추천에 사용되는 데이터가 어떻게 보면 구매나, 클릭, View에 대한 패턴 분석된 데이터인데, 이것을 고객사 레포팅이나 기타 분석 시스템에 활용할 여지가 많을 것 같았습니다. </p><p><br></br></p><hr><h2 id="Kaizen"><a href="#Kaizen" class="headerlink" title="Kaizen!"></a>Kaizen!</h2><p>그러면 어떻게 개선할 수 있을까요? TA님이나 팀장님과 의논을 같이 하면서 구체화해야겠지만 우선 생각나는 개선점은 다음과 같습니다. </p><ol><li>Extract하는 데이터 포인트를 변경</li><li>Data Warehouse</li><li>상시 구동 EMR서버 구성</li></ol><p>이게 명확한 답이 될지 모르겠습니다. 하지만 우선 이렇게 글로 만들어놓고 다른 사람들의 의견을 받아서 두들겨 맞으며 고쳐나가는 게 맞다고 생각합니다. 일단 저질러야 변화가 생기니까요.</p><p>데이터 포인트를 변경한다는 것은 Extract하는 데이터 베이스가 혹사당하고 있기 때문입니다. 너무 자주 데이터를 끌어오고 나가고 있는 상황이기 때문에, 사용하는 데이터를 따로 저장하는 DB를 만들면 어떨까 생각합니다. 그리고 이는 2번과 이어지는데, 이것을 Data Warehouse로 사용하는 것입니다. 이 DW는 Big Query를 검토하고 있습니다. Big Query에 일단 적재를 하고 전처리 스케쥴을 걸어서 추천에 사용할 데이터를 아주 예쁘게 구성해 놓을 예정입니다. 마치 Personalize에 Glue를 사용해서 데이터를 전처리하고 넣는 것 처럼요. 동시에 EMR 서버를 상시 구성해놔서 추천 생성할 때 발생하는 일부 데이터를 DW에 저장해놓으려고 합니다. 물론 중간에 데이터를 확인해보고 이게 사용할만한 가치가 있을지 분석가분들과 고민해봐야겠지만, 구상은 이렇게 해놓고 있습니다. 어떻게 보면 DW에 스케쥴을 걸어서 작업을 돌려놓으면 중간에 EMR로 작업하면서 나오는 데이터는 굳이 필요가 없을 수도 있겠습니다. </p><p>헛된 구상일 수 있겠지만, 발전할 수 있는 포인트를 어느정도 찾은 것 같아서 얻은게 있는 세션이었다고 생각합니다. 이제 해야할 것은 TA님과 팀장님과의 미팅, 그리고 부족한 부분을 채워넣는 학습 시간이겠습니다. </p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2021/04/18/AWS-Immersion-DAY/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Airflow Clusterization</title>
      <link>http://tkdguq05.github.io/2021/04/04/airflow-clusterization/</link>
      <guid>http://tkdguq05.github.io/2021/04/04/airflow-clusterization/</guid>
      <pubDate>Sun, 04 Apr 2021 06:23:20 GMT</pubDate>
      <description>
      
        &lt;p&gt;Airflow를 나눠봤습니다. 그런데 이제 Autoscaling을 곁들인&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Airflow를 나눠봤습니다. 그런데 이제 Autoscaling을 곁들인</p><a id="more"></a><h1 id="Airflow-Clusterization"><a href="#Airflow-Clusterization" class="headerlink" title="Airflow Clusterization"></a>Airflow Clusterization</h1><h2 id="Airflow를-나눠봤습니다-그런데-이제-Autoscaling을-곁들인"><a href="#Airflow를-나눠봤습니다-그런데-이제-Autoscaling을-곁들인" class="headerlink" title="Airflow를 나눠봤습니다. 그런데 이제 Autoscaling을 곁들인"></a>Airflow를 나눠봤습니다. 그런데 이제 Autoscaling을 곁들인</h2><p>Airflow의 구성요소들을 다 쪼개볼 겁니다. 어떻게 나눌 것이냐면, 크게 Airflow Main, Airflow DB, Airflow Worker입니다. Airflow Main에는 웹 서버와 스케쥴러를 돌아가게 만들 것이고, DB에는 MySQL을 띄워 놓을 것입니다. Worker는 오토스케일링을 걸어둘 것이구요. 귀찮게 <strong>왜 이렇게 하냐구요?</strong></p><p>기존에 Airflow는 하나의 서버에서 잘 돌아가고 있었습니다. 그래서 <a href="https://tkdguq05.github.io/2021/02/21/airflow-basic2/#more">Airflow Basic</a> 글을 통해서 정리해 놓기도 했습니다. 문제는 처리할 DAG와 Task가 너무 많아진 것이었습니다. Airflow의 구성요소 각각이 어떤 역할을 하는지 궁금하시거나 잘 기억이 안나시는 분은 <a href="https://tkdguq05.github.io/2021/02/21/airflow-basic2/#more">이 글</a>을 읽어보시면 좋습니다.</p><p>처리할 작업이 많아지면 Worker 하나로는 처리하기 부담스러워집니다. 스케쥴러가 내려준 많은 작업을 처리하다가 다른 작업을 못하게 현상이 자주 발생하게 됩니다. 그래서! 워커를 늘려줘야겠다는 생각을 한 것입니다. 워커에 오토스케일링을 걸어서, 작업 부하가 걸리면 워커를 늘려서 처리하고, 부하가 줄어들면 워커를 줄이려는 것입니다.<br><img src="https://miro.medium.com/max/2800/1*W0hyXlN4H0x0BNK4NwYPTw.gif" alt="힘들때 도와줘!"></p><hr><p>작업 계획은 다음과 같습니다.</p><ol><li>Airflow Main 세팅</li><li>Airflow DB 세팅</li><li>Airflow Worker 기본 이미지 세팅</li><li>Airflow Worker 세팅</li><li>Assemble!</li></ol><hr><p><br></br></p><h2 id="Airflow-Main"><a href="#Airflow-Main" class="headerlink" title="Airflow Main"></a>Airflow Main</h2><p>Airflow Main에는 Webserver와 Scheduler를 구성해 놓을 것입니다. Airflow Main의 기본적인 설정은 <a href="https://tkdguq05.github.io/2020/12/13/airflow-on-ec2/#more">이 글</a>에서의 설정과 같습니다. 여기서 MySQL을 따로 가져갈 것이니 MySQL설정만 빼놓고 따라하시면 좋을 것 같습니다. 다만 저는 Airflow 1.10.14 버전을 사용하도록 하겠습니다. 최신 2.0이상 버전은 DAG가 조금 달라져서 수정을 해줘야 하거든요.<br><br></br></p><h3 id="Airflow-Home"><a href="#Airflow-Home" class="headerlink" title="Airflow Home"></a>Airflow Home</h3><p>먼저 저는 AWS환경을 이용해서 구축을 할 것이기 때문에 EC2를 하나 만들어주고, 새로 생긴 인스턴스에 Airflow home을 잡아주도록 하겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> AIRFLOW_HOME=/home/ec2-user/airflow <span class="comment">#기본주소</span></span><br></pre></td></tr></table></figure><p><strong>이 HOME주소는 꽤나 중요합니다</strong>. Airflow가 시작되는 곳이기도 하고, <strong>설정 파일을 불러오는 곳</strong>이기도 하기 때문입니다.  원하는 주소로 작성하시되, Worker에도 동일한 주소를 입력해주셔야 합니다. 그렇지 않으면 <code>execute_command encountered a CalledProcessError</code> ,<code>Celery command Failed</code> 를 만나시게 될 것입니다. <sup><a href="#footnote_1">1</a></sup></p><p>Airflow의 Dag를 실행하려면 <strong>airflow를 구성하고 있는 모든 서버에 동일한 경로와 이름으로 DAG파일이 존재</strong>해야 한다는 것을 기억해주세요.<br><br></br></p><h3 id="Redis-설정"><a href="#Redis-설정" class="headerlink" title="Redis 설정"></a>Redis 설정</h3><p>레디스 설정은 다행히 저번 글에 나와 있는 것과 똑같습니다. 그대로 따라하시면 됩니다.<br><br></br></p><h3 id="Airflow-설치"><a href="#Airflow-설치" class="headerlink" title="Airflow 설치"></a>Airflow 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update -y</span><br><span class="line"></span><br><span class="line">sudo yum install group <span class="string">"Development tools"</span> -y</span><br><span class="line"></span><br><span class="line">sudo yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel python3-devel.x86_64 cyrus-sasl-devel.x86_64 -y</span><br><span class="line"></span><br><span class="line">sudo yum install libevent-devel -y</span><br><span class="line"></span><br><span class="line">sudo pip3 install apache-airflow==1.10.14</span><br><span class="line"></span><br><span class="line">airflow version <span class="comment">#버전이 뜬다면 성공!</span></span><br></pre></td></tr></table></figure><p>설치가 되었으면 <code>airflow initdb</code> ,  <code>airflow webserver</code>를 사용해서 airflow가 뜨는지 확인해 봅니다.</p><p>에러가 발생한다구요? 그렇다면 아래 Trouble Shooting 부분을 참고해보세요. (sqlalchemy version 조정) <sup><a href="#footnote_2">2</a></sup>  </p><hr><p><br></br></p><h2 id="MySQL-설정"><a href="#MySQL-설정" class="headerlink" title="MySQL 설정"></a>MySQL 설정</h2><p>Airflow Main 세팅이 끝났다면, DB로 사용할 새 인스턴스를 만들고 MySQL을 설치해줍니다.</p><p>이전 글과 달라지는 부분이 DB 세팅에서 발생합니다. mysql 5.7버전으로 설치하는 것 까지는 동일합니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line">sudo yum localinstall mysql57-community-release-el7-11.noarch.rpm </span><br><span class="line">sudo yum install mysql-community-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 설치된 이후</span></span><br><span class="line">sudo service mysqld start</span><br></pre></td></tr></table></figure><p>airflow 사용자를 추가해봅시다. 먼저 root로 접속을 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line"><span class="comment"># 패스워드를 입력</span></span><br><span class="line">Enter Password : <span class="comment">#/var/log/mysqld.log에 있는 임시비밀번호 사용</span></span><br></pre></td></tr></table></figure><p><strong>달라지는 부분이 발생하는 곳이 여기입니다.</strong> airflow 사용자를 생성할 때 모든 접속 <code>%</code> 에 대해서 허용해주어야 합니다. 기존에는 내부 주소, <code>localhost</code>에 대해서 허용했습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 사용자 생성</span></span><br><span class="line">create user <span class="string">'airflow'</span>@<span class="string">'%'</span> identified by <span class="string">'비밀번호'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># DB 권한 부여</span></span><br><span class="line">grant all privileges on *.* to <span class="string">'airflow'</span>@<span class="string">'%'</span>;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>DB가 설정되었으면 Airflow Main과 연결을 해주어야 합니다. 이 DB 서버가 사용하는 Private IP가 있습니다. 이 주소를 AWS에서 확인하고 Airflow Main의 airflow.cfg에 넣어줘서 어떤 DB를 바라볼지 Airflow Main에게 알려줘야 합니다.</p><p>기본적인 airflow main의 airflow.cfg 설정은 이렇게 해줍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 사용할 dag 폴더 지정</span></span><br><span class="line"><span class="comment"># subfolder in a code repository. This path must be absolute. 꼭 절대경로!</span></span><br><span class="line">dags_folder = /home/ec2-user/airflow/dags <span class="comment">#원하는 위치와 디렉토리로 지정</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># executor = SequentialExecutor</span></span><br><span class="line">executor = CeleryExecutor <span class="comment">#원하는 Executor 선택</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sql_alchemy_conn = sqlite:////home/airflow/airflow/airflow.db</span></span><br><span class="line">sql_alchemy_conn =  mysql+pymysql://airflow:@[mysql서버PrivateIP]:3306/airflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># catchup_by_default = True</span></span><br><span class="line">catchup_by_default = False</span><br><span class="line"></span><br><span class="line"><span class="comment"># broker_url = sqla+mysql://airflow:airflow@127.0.0.1:3306/airflow</span></span><br><span class="line">broker_url = redis://airflow@[main서버PrivateIP]:6379/0</span><br><span class="line"></span><br><span class="line"><span class="comment"># result_backend = db+mysql://airflow:airflow@localhost:3306/airflow</span></span><br><span class="line">result_backend = db+mysql://airflow:비밀번호@[mysql서버PrivateIP]:3306/airflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># load_examples = True</span></span><br><span class="line">load_examples = False <span class="comment">#예시를 보고 싶다면 True</span></span><br></pre></td></tr></table></figure><p><code>broker_url</code> , <code>cluster_address</code>에는 Main의 Private IP주소를 넣고, <code>sql_alchemy_conn</code>, <code>result_backend</code> 에는 DB의 Private IP주소를 넣습니다.</p><p>이렇게 설정해주고 다시 한번 <code>airflow initdb</code> 를 해주면 새로 작성해준 주소로 DB경로가 입력이 됩니다.</p><p>추가로, <strong>MySQL서버에도 Redis를 설치해주어야 합니다</strong>. broker인 Redis를 통해 scheduler와 executor를 연결해주어야 하기 때문입니다. </p><p><img src="https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2019/04/17/sagemaker-airflow-2.gif" alt="AWS Managed Airflow 사진 참조"></p><p>위 그림에서 보듯이 main은 webserver와 scheduler를 담당하고 MySQL 서버는 DB와 executor쪽을 담당하게 됩니다. executor에 보낼 매개가 필요하기 때문에 브로커인 Redis를 설정해줍니다.<br><br></br></p><h3 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h3><p>webserver를 띄우고 잘 되는지 확인해봅시다. 잘 나오면 다행입니다. 그런데 1.10.10 이상 버전으로 오면서 UI에 변화된 부분이 있습니다. 아주 좋은 기능이라고 생각하는 것 중 하나인데, 그건 시간대를 드디어 설정해서 볼 수 있다는 것입니다. 기존에는 UTC가 고정이어서 +9해서 계산하는게 영 별로였거든요. </p><p><img src="/images/airflow_cluster/airflow_ui.png" alt="ㅇ"></p><p>사진에서 보다시피 <strong>KST로 설정할 수 있습니다</strong>. 그리고 유저도 설정해서 볼 수 있죠. 이걸 적용하기 위해서는 config에서 하나를 더 수정해주어야 합니다.</p><p>다시 airflow.cfg로 들어가서</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use FAB-based webserver with RBAC feature</span></span><br><span class="line">rbac=True</span><br></pre></td></tr></table></figure><p>이렇게 설정해줍니다. <strong>RBAC는 Role-Based Access Control</strong>의 약자로써, 아까 보셨듯이 유저별로 접근을 통제하는 시스템입니다. 그렇다면 유저도 만들어주어야겠죠.</p><p>Airflow Main의 쉘로 들어가서</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airflow create_user -r Admin -u admin -e email주소 -f admin -l user -p 비밀번호</span><br></pre></td></tr></table></figure><p>이렇게 입력을 해줍시다. 각 플래그의 의미는 다음과 같습니다.</p><ul><li>-r : Role, 역할. Admin, Op, User, Viewer, Public 이 정해져 있고, 커스텀 롤 생성 가능. (자세한 내용은 <a href="https://oboki.net/workspace/data-engineering/airflow/rbac/">여기</a>를 참고하세요)</li><li>-u : User명</li><li>-e : Email 주소</li><li>-f : First Name</li><li>-l : Last Name</li><li>-p : Password, 비밀번호</li></ul><p>이제 webserver를 열어주고 들어가면</p><p><img src="/images/airflow_cluster/lotsofcircles.png" alt="wtf"></p><p>아름다운 원 운동을 바라보면서 멘탈이 흔들릴 수 있습니다. 하지만 이렇게 나오게 된 것은 한 가지를 빼먹었기 때문입니다. 앞서서 우리가 중요한 config를 바꿨을 때는 DB에 알려준 것을 기억하실 것입니다. RBAC는 보안에 관련된 것이니까 중요하다고 볼 수 있겠습니다. 그렇다면 DB에도 뭐가 바뀌었는지 알려주어야 합니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airflow upgradedb</span><br></pre></td></tr></table></figure><p>이 명령어는 DB를 초기화 시키지 않고 설정값을 DB에 업데이트 시켜주는 역할을 합니다. 이 명령어를 입력해주면?</p><p><img src="/images/airflow_cluster/upgradedb.png" alt="해-결!"></p><p><img src="/images/airflow_cluster/airflow_ui.png" alt="UI 등장"></p><p>짠! 1.10.14의 UI가 등장했습니다. 오른쪽 상단의 시간 설정이 가능하다면 성공하신 것입니다.  </p><p><br></br></p><h3 id="Fernet-Key"><a href="#Fernet-Key" class="headerlink" title="Fernet Key"></a>Fernet Key</h3><p>RBAC를 통해 보안이 강화되었습니다. 이를 통해 활성화 된 것이 하나 더 있다면, <code>fernet_key</code> 를 통한 encryption입니다. Variable이나 Connection을 이용하는 분이라면, DAG를 실행시켰을 때 <code>JSONDecodeError: Expecting value: line 1 column 1</code> 이런 에러를 마주할 가능성이 높습니다. 실제 에러가 난 부분을 보면 Variable의 Value를 가져오는 부분에서 문제가 발생하고 있습니다. 실제로 어떤 Value를 가져오는지 확인해보면, “g8dgasv90s8fd09x9adxfcx” 같이 알 수 없는 암호문으로 되어 있는 것을 목격할 수 있습니다. </p><p>‘아 그렇다면 encrypt 옵션을 False로 바꿔야지!’라는 생각으로 mysql로 들어가서 variables를 찾은 뒤에 <code>is_encrypt</code> 를 다 0으로 변경해봤습니다. 하지만 이렇게 해도 이미 Variable에 등록할 때에 암호화된 코드로 DB에 들어가기 때문에 key값으로 value를 조회해도 나오는 값은 위에 있는 알 수 없는 암호문입니다. </p><p>결국에는 이것을 해독해주어야 합니다. 이 암호를 해독해주는 열쇠가 바로 <code>fernet_key</code> 입니다. fernet_key는 한번 생성해주어야 합니다. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cryptography.fernet <span class="keyword">import</span> Fernet</span><br><span class="line">fernet_key= Fernet.generate_key()</span><br><span class="line">print(fernet_key.decode())</span><br></pre></td></tr></table></figure><p>여기서 나온 키 값을 복사해서 airflow.cfg의 fernet_key 부분에 넣어줍니다. 그리고 이 키 값은 저장해놨다가 airflow worker에 있는 airflow.cfg에도 동일하게 적용을 해줍니다.  </p><hr><p><br></br></p><h2 id="Airflow-Worker-기본-이미지-세팅"><a href="#Airflow-Worker-기본-이미지-세팅" class="headerlink" title="Airflow Worker 기본 이미지 세팅"></a>Airflow Worker 기본 이미지 세팅</h2><p>Airflow Worker를 세팅해보겠습니다. 그 전에 기본 이미지를 설정해 줄 것입니다. 물론 Worker를 쫙 설치하고 세팅해준다음에 AMI를 만들어서 오토스케일링을 진행해도 되지만, 만약 설정값을 바꿀일이 생긴다면? 그때마다 AMI를 새로 만들어야 할 것입니다. 당연히 AWS관리자나 TA분과의 관계가 좋지 않아질 것입니다. </p><p>제가 선택한 방법은 Docker입니다. Docker를 이용해서 위에서 진행한 세팅을 한번에 잡아줄 것이고, 이 이미지를 시작 템플릿으로 설정할 것입니다. 설정 값을 바꿀 일이 있다면 이미지가 저장된 곳에 들어가서 변경한 후 다시 Push해주면 됩니다. </p><p>기본 이미지는 Docker와 기타 사용할 명령어에 대한 라이브러리가 설치된 정도면 됩니다. 저는 Docker정도만 설치했고 이것을 AMI로 만들어 줬습니다. 이 AMI를 시작템플릿에 넣을 것이고 시작템플릿에 있는 고급 설정을 통해 서버가 시작되면서 Docker Image를 Run 해 줄 수 있는 명령어를 넣어줄 것입니다.</p><p><img src="/images/airflow_cluster/docker_ami.png" alt="Airflow%20Clusterization%202f196f07c5a7412285ad666bc5db2e46/docker_ami.png">  </p><p><br></br></p><h3 id="Docker-Airflow-Worker-이미지-구성"><a href="#Docker-Airflow-Worker-이미지-구성" class="headerlink" title="Docker Airflow Worker 이미지 구성"></a>Docker Airflow Worker 이미지 구성</h3><p><strong>본격적으로 Worker 이미지를 만들어보겠습니다.</strong></p><p>구성요소는 다음과 같습니다.</p><ul><li>Dockerfile</li><li>files<ul><li>airflow.cfg</li><li>config<ul><li>log_config.py</li></ul></li></ul></li><li>sources<ul><li>airflow.sh</li><li>cron</li><li>hostname_resolver.py</li><li>requirements.txt</li></ul></li></ul><p>디렉토리명은 임의로 정해놓은 것이기 때문에 다르게 설정하셔도 됩니다. files부터 설명드리면, airflow.cfg는 위에서 보셨던 그 설정파일입니다. airflow main에서 설정했던 파일을 복사해서 넣어주시면 좋습니다. config 폴더에는 airflow의 log설정과 관련된 파일이 있습니다.</p><p>sources에는 airflow.sh로 쉘 스크립트를 통해 실행하는 명령이 담겨 있고, cron작업을 위한 cron, 도커 내부에서 동작하기 때문에 도커의 호스트를 알려주는 hostname_resolver.py, 그리고 필요한 python 라이브러리 설치를 위한 requirements.txt가 있습니다.  </p><p><br></br></p><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:18.04</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">  git \</span><br><span class="line">  cron \</span><br><span class="line">  vim \</span><br><span class="line">  python3-pip \</span><br><span class="line">  python3-dev \</span><br><span class="line">  build-essential \</span><br><span class="line">  libmysqlclient-dev \</span><br><span class="line">  libssl-dev \</span><br><span class="line">  libkrb5-dev \</span><br><span class="line">  libsasl2-dev \</span><br><span class="line">&amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line">ADD ./<span class="built_in">source</span>/* /app/</span><br><span class="line">ADD ./files/airflow.cfg /app/</span><br><span class="line">ADD ./files/config/ /data/airflow/config/</span><br><span class="line">ADD ./<span class="built_in">source</span>/hostname_resolver.py /usr/<span class="built_in">local</span>/lib/python3.6/dist-packages/airflow/</span><br><span class="line">RUN chmod 0744 /app/airflow.sh</span><br><span class="line">RUN <span class="built_in">export</span> AIRFLOW__CORE__HOSTNAME_CALLABLE=airflow.hostname_resolver:resolve</span><br><span class="line">RUN <span class="built_in">export</span> AIRFLOW__CORE__FERNET_KEY=***</span><br><span class="line">ADD ./<span class="built_in">source</span>/cron /etc/cron.d/</span><br><span class="line">RUN chmod 0744 /etc/cron.d/cron</span><br><span class="line">RUN crontab /etc/cron.d/cron</span><br><span class="line">RUN touch /var/<span class="built_in">log</span>/cron.log</span><br><span class="line"></span><br><span class="line">WORKDIR /app</span><br><span class="line">RUN mkdir -p /data/airflow/DAGS <span class="comment">#제가 만든 DAG 폴더</span></span><br><span class="line">RUN git <span class="built_in">clone</span> DAGS <span class="comment">#제 github에 있는 DAGs</span></span><br><span class="line"></span><br><span class="line">RUN pip3 install -r requirements.txt</span><br><span class="line">RUN python3 -m pip install sqlalchemy==1.3.15 <span class="comment">#에러 방지</span></span><br><span class="line"><span class="comment">#CMD ["tail","-f","/var/log/cron.log"]</span></span><br><span class="line">CMD ./airflow.sh <span class="variable">$NAME</span></span><br></pre></td></tr></table></figure><p>기본 세팅으로 들어가는 라이브러리가 좀 있습니다. git이나 cron, vim등은 자주 사용하기 때문입니다. 그 외에 ADD 부분을 보시면 /source라든가 /files가 있는데 이것은 제가 빌드하기 전에 만들어 놓은 디렉토리 입니다. 이 디렉토리 안에 필요한 파일들을 넣어놨고, 빌드 후에 원하는 위치로 옮기고 실행해줄 것입니다.</p><p>export로 환경 설정 해주는 부분이 있는데 여기에 원래는 AIRFLOW_HOME 설정도 해줬습니다. 하지만 이것은 docker run할 때 넣어주기 때문에 빼놨습니다. 그리고 fernet key부분은 아래에서 설명하겠습니다.  </p><p><br></br></p><h4 id="airflow-sh"><a href="#airflow-sh" class="headerlink" title="airflow.sh"></a>airflow.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">export</span> C_FORCE_ROOT=<span class="string">"true"</span></span><br><span class="line">crontab /etc/cron.d/cron</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/airflow initdb</span><br><span class="line">mv /app/airflow.cfg /data/airflow/</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/airflow worker -q <span class="variable">$1</span> &amp;</span><br><span class="line">cron &amp;&amp; tail -f /var/<span class="built_in">log</span>/cron.log</span><br></pre></td></tr></table></figure><p>쉘 스크립트에는 Celery 작업을 위한 <code>C_FORCE_ROOT</code>가 있습니다. 이것은 root 권한으로 셀러리를 돌리겠다는 표시이구요. 그 외에는 cron 등록, db initialize 등이 있는데 worker -q에 $1이 있는 이유는 docker를 run할 때 어떤 큐 값으로 실행시킬 건지 정하기 위해서 입니다. 워커를 여러 대 둘 수 있는데 큐를 따로 관리할 수 있으면 좋으니까요.  </p><p><br></br></p><h4 id="cron"><a href="#cron" class="headerlink" title="cron"></a>cron</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* * * * * <span class="built_in">cd</span> /data/airflow/DAGs &amp;&amp; git fetch --all &amp;&amp; git reset --hard origin/master</span><br><span class="line">* * * * * find /data/airflow/logs/* -ctime +7 -<span class="built_in">exec</span> rm -f &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>cron 작업에는 사용할 DAG들이 있는 git repo를 받는 부분과, log관리하는 코드가 같이 들어있습니다.  </p><p><br></br></p><h4 id="hostname-resolver-py"><a href="#hostname-resolver-py" class="headerlink" title="hostname_resolver.py"></a>hostname_resolver.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resolve</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> requests.get(<span class="string">'http://169.254.169.254/latest/meta-data/local-ipv4'</span>).text</span><br></pre></td></tr></table></figure><p>hostname_resolver.py에는 aws의 메타 데이터를 이용해서 docker의 host명을 가져오는 코드가 들어있습니다. 혹시 웹 서버에서 DAG 작업로그를 보려고 하는데 나오지 않는다면, 이 부분을 의심해 보세요.  </p><p><br></br></p><h4 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">boto3==<span class="number">1.12</span><span class="number">.0</span></span><br><span class="line">pymongo==<span class="number">3.10</span><span class="number">.1</span></span><br><span class="line">celery==<span class="number">4.4</span><span class="number">.0</span></span><br><span class="line">mysqlclient==<span class="number">1.4</span><span class="number">.6</span></span><br><span class="line">pymysql==<span class="number">0.9</span><span class="number">.3</span></span><br><span class="line">redis==<span class="number">3.4</span><span class="number">.1</span></span><br><span class="line">apache-airflow==<span class="number">1.10</span><span class="number">.14</span></span><br></pre></td></tr></table></figure><p>requirements에는 필요한 라이브러리들이 담겨있습니다.</p><p>이렇게 워커 이미지를 구성했으면, 빌드를 시작해봅시다.   </p><p><br></br></p><h3 id="Docker-Build-and-Run"><a href="#Docker-Build-and-Run" class="headerlink" title="Docker Build and Run"></a>Docker Build and Run</h3><p>만든 이미지를 AWS ECR에 올려볼 것입니다. 이를 위해 다음과 같은 순서의 작업을 수행하여야 합니다.</p><ol><li><p>인증 토큰을 검색하고 레지스트리에 대해 Docker 클라이언트를 인증합니다. AWS CLI 사용:</p><p><code>aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin *******</code></p><p>참고: AWS CLI를 사용하는 중 오류가 발생하면 최신 버전의 AWS CLI 및 Docker가 설치되어 있는지 확인하십시오.</p></li><li><p>다음 명령을 사용하여 도커 이미지를 빌드합니다. 도커 파일을 처음부터 새로 빌드하는 방법에 대한 자세한 내용은 <a href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/docker-basics.html">여기</a>  지침을 참조하십시오. 이미지를 이미 빌드한 경우에는 이 단계를 건너뛸 수 있습니다.</p><p><code>docker build -t 이미지명 .</code></p></li><li><p>빌드가 완료되면 이미지에 태그를 지정하여 이 리포지토리에 푸시할 수 있습니다.</p><p><code>docker tag 이미지명:tag 리포지토리주소/이미지명:tag</code></p></li><li><p>다음 명령을 실행하여 이 이미지를 새로 생성한 AWS 리포지토리로 푸시합니다.<br><code>docker push 리포지토리주소/이미지명:tag</code></p></li></ol><p>위에 있는 것들은 ECR의 푸시 명령에 있는 것들이기 때문에 해당 페이지에 있는 코드를 복사해서 넣으시면 됩니다.</p><p>빌드가 되었다면, 이미지 구성은 끝입니다. 이제 필요한 것은 시작 템플릿을 방금까지 만든 이미지를 이용해서 구성하고, 이것을 오토스케일링 그룹에 넣어서 워커를 쫙 만들어 주면 됩니다.  </p><p><br></br></p><h3 id="Start-Template"><a href="#Start-Template" class="headerlink" title="Start Template"></a>Start Template</h3><p>시작 템플릿 구성</p><p><img src="/images/airflow_cluster/start_template.png" alt="도커 기본이미지를 만들고 여기에 넣어주기"></p><p>시작 템플릿 이름은 잘 넣어주시면 되고, AMI에는 아까 구성한 Docker AMI를 넣어주도록 합니다. 이 도커 AMI를 기본으로 설치하고 그 위에 도커 이미지를 Run 해 줄 것입니다.</p><p>이제 맨 밑에 고급 세부 정보로 들어와서 사용자 데이터를 넣어줍니다.</p><p><img src="/images/airflow_cluster/advanced_template.png" alt="여기에 docker 명령어를 넣어주자"></p><p>사용자 데이터는 이 시작 템플릿이 시작될 때 실행할 수 있는 명령어입니다. 여기에 docker run 명령어를 넣을 것입니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">su - ubuntu -c <span class="string">"aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin *******;docker run -p 8793:8793 -e AIRFLOW_HOME=/data/airflow -e NAME=main -d ***********/작성한이미지명:태그"</span></span><br></pre></td></tr></table></figure><p><strong>shebang을 꼭 넣어주셔야 합니다.</strong></p><p>shebang을 넣지 않으면 이 명령어를 인식할 수 없어서 에러가 발생합니다. 한 번 더 강조합니다. <strong>shebang 꼭 넣어야 한다고!</strong>  빼먹어서 저 처럼 삽질 많이 하지 마십시오. 그 뒷 부분에는 su ubuntu가 있습니다. 이후에 실행할 명령어는 ubuntu유저로 실행해야하기 때문입니다. 그래서 switch user를 해주시고 다음의 명령어를 입력해줍니다.</p><p>하나씩 자세히 볼까요?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin *******</span><br></pre></td></tr></table></figure><p>이것은 아까 사용했던 명령어로, 인증 토큰을 검색하고 레지스트리에 대해 Docker 클라이언트를 인증하는 것입니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8793:8793 -e AIRFLOW_HOME=/data/airflow -e NAME=main -d ***********/작성한이미지명:태그</span><br></pre></td></tr></table></figure><p>도커 이미지를 run하는 명령어입니다. 8793포트를 열어줘야 워커에 대해서 통신이 가능합니다. <code>-p</code>를 이용해 포트를 적어주세요. <code>-e</code> 명령어는 도커에서 환경설정 관련된 부분입니다. airflow home을 airflow main과 같은 위치로 잡아주시면 됩니다. <code>NAME</code>은 worker -q 다음에 들어갈 큐의 topic 명입니다. 제가 작성한 DAG들은 main 토픽을 사용하므로 main으로 했습니다. 다른 topic을 사용하시는 분은 다른 걸로 넣어주세요. <code>-d</code>는 백그라운드로 실행시킨다는 의미이며, 그 다음에는 ECR 이미지의 주소를 넣어줍니다.</p><p>시작템플릿 작성이 끝났습니다.   </p><hr><p><br></br></p><h3 id="Assemble"><a href="#Assemble" class="headerlink" title="Assemble!"></a>Assemble!</h3><p>이제 구성이 모두 되었습니다. airflow main에 들어가서 airflow webserver와 airflow scheduler를 올려줍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup airflow webserver &amp;</span><br><span class="line">nohup airflow scheduler &amp;</span><br></pre></td></tr></table></figure><p>오토스케일링 그룹에도 워커를 늘려주고 도커 이미지가 올라올 때까지 조금 기다려줍니다. 다 올라오고 나면 dag를 잘 돌리는지 test 해 봅니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">airflow list_tasks [TASK명]</span><br><span class="line">airflow [TASK명] [DAG id] [Task id] [date]</span><br></pre></td></tr></table></figure><p>잘 돌았다면 성공입니다!</p><p><img src="https://media.makeameme.org/created/yas-yaas.jpg" alt=""></p><hr><p>  <br></br></p><h2 id="Trouble-Shooting"><a href="#Trouble-Shooting" class="headerlink" title="Trouble Shooting"></a>Trouble Shooting</h2><h3 id="1-DAG가-무한-생성"><a href="#1-DAG가-무한-생성" class="headerlink" title="1. DAG가 무한 생성?"></a>1. DAG가 무한 생성?</h3><p><img src="/images/airflow_cluster/catchup.png" alt="그만돌아!"></p><p>갓 만든 따끈따끈한 DAG를 On했습니다. 그런데 DAG하나가 끝나기도 전에 새로운 DAG들이 계속해서 실행되는 현상을 목격할 수 있습니다. 이런 경우는 <code>catch_up</code> 옵션이 활성화 되어있기 때문입니다. catupup은 <code>start_date</code>부터 현재 시간까지 실행하지 못한 DAG들을 실행하겠다는 의미입니다. 임시로 실행하는 DAG야 신경 안써도 큰 문제는 되지 않겠지만, API가 엮어있거나 대용량 데이터를 끌어서 사용하는 DAG라면 문제가 커질 수 있습니다. 이는 airflow.cfg에서 해결할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catchup_by_default = False</span><br></pre></td></tr></table></figure><p>airflow.cfg에서 <code>catchup_by_default</code> 옵션을 찾아서 False로 변경해주시면 됩니다. 기본값은 True입니다. </p><p>혹시 이렇게 했는데도 문제가 계속 발생한다면, <strong>웹 서버와 스케쥴러를 모두 종료하신 후에 다시 실행시켜 수정한 옵션 값을 적용해주면 됩니다</strong>.<br><br></br></p><h3 id="2-pip3-permission-denied"><a href="#2-pip3-permission-denied" class="headerlink" title="2. pip3 permission denied"></a>2. pip3 permission denied</h3><p>열심히 글을 따라 치는데 뜬금없이 <code>pip3 permission denied</code> 이런 에러가 발생할 수 있습니다. 이런 경우에는 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install [library]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 위 명령어가 안된다면</span></span><br><span class="line">python3 -m pip install --user [library]</span><br></pre></td></tr></table></figure><p>위와 같은 명령어로 해결할 수 있습니다.  </p><p><br></br></p><h3 id="3-Command-python-setup-py-egg-info-failed-with-error-code-1"><a href="#3-Command-python-setup-py-egg-info-failed-with-error-code-1" class="headerlink" title="3. Command python setup.py egg_info failed with error code 1"></a>3. Command python <a href="http://setup.py/">setup.py</a> egg_info failed with error code 1</h3><p>역시나 ec2-user에서 열심히 설치를 하는 중에 이 에러를 마주칠 수 있습니다. 이 에러는 pip 업데이트가 되지 않아 발생한 에러로 볼 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip install --upgrade --ignore-installed pip setuptools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 또는</span></span><br><span class="line">python3 -m pip install -U pip</span><br></pre></td></tr></table></figure><p>  <br></br></p><h3 id="4-ModuleNotFoundError-No-module-named-‘sqlalchemy-ext-declarative-clsregistry’"><a href="#4-ModuleNotFoundError-No-module-named-‘sqlalchemy-ext-declarative-clsregistry’" class="headerlink" title="4. ModuleNotFoundError: No module named ‘sqlalchemy.ext.declarative.clsregistry’"></a>4. ModuleNotFoundError: No module named ‘sqlalchemy.ext.declarative.clsregistry’</h3><p> <a name="footnote_2">2</a><br>위의 에러는 sqlalchemy 버전이 맞지 않아서 발생하는 문제입니다. 그렇다면 버전을 낮춰주면 됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sqlalchemy 버전 낮추면서 해결</span></span><br><span class="line">python3 -m pip install sqlalchemy==1.3.15</span><br></pre></td></tr></table></figure><p><br></br></p><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a name="footnote_1">1</a> 출처 : <a href="https://louisdev.tistory.com/26">https://louisdev.tistory.com/26</a></li><li><a href="https://yahwang.github.io/posts/87">https://yahwang.github.io/posts/87</a></li><li><a href="https://potensj.tistory.com/73">https://potensj.tistory.com/73</a></li><li><a href="https://oboki.net/workspace/data-engineering/airflow/rbac/">https://oboki.net/workspace/data-engineering/airflow/rbac/</a></li><li><a href="https://github.com/puckel/docker-airflow/issues/387">https://github.com/puckel/docker-airflow/issues/387</a></li><li><a href="https://airflow.apache.org/docs/apache-airflow/stable/security/secrets/fernet.html#rotating-encryption-keys">https://airflow.apache.org/docs/apache-airflow/stable/security/secrets/fernet.html#rotating-encryption-keys</a></li><li><a href="https://devlog.jwgo.kr/2019/07/05/celery-daemonization/">https://devlog.jwgo.kr/2019/07/05/celery-daemonization/</a></li><li><a href="https://aws.amazon.com/ko/blogs/korea/build-end-to-end-machine-learning-workflows-with-amazon-sagemaker-and-apache-airflow/">https://aws.amazon.com/ko/blogs/korea/build-end-to-end-machine-learning-workflows-with-amazon-sagemaker-and-apache-airflow/</a></li></ul>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2021/04/04/airflow-clusterization/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Apriori와 FP-Growth. 추천 시스템 시리즈</title>
      <link>http://tkdguq05.github.io/2021/03/07/apriori-FP/</link>
      <guid>http://tkdguq05.github.io/2021/03/07/apriori-FP/</guid>
      <pubDate>Sun, 07 Mar 2021 13:09:05 GMT</pubDate>
      <description>
      
        &lt;p&gt;추천 시스템에 대해서, Apriori와 FP-Growth&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>추천 시스템에 대해서, Apriori와 FP-Growth</p><a id="more"></a><h2 id="추천시스템은"><a href="#추천시스템은" class="headerlink" title="추천시스템은?"></a>추천시스템은?</h2><p><strong>추천시스템은 사용자에게 상품을 제안하는 소프트웨어 도구 이자 기술입니다</strong>. 추천 시스템은 사용자 입장에서 수십 만개의 상품 풀에서 원하는 것을 빠르게 찾을 수 있다는 점에서 큰 의의가 있습니다. 제가 가장 많이 접하는 Youtube 추천 영상을 생각해보면 이해가 빠릅니다. 영상은 하루에도 수억개가 올라올테지만, 제가 원하는 것이 아주 잘 올라오는 것을 확인할 수 있습니다. 추천 시스템이 없다면 영상을 찾는데 시간이 너무 오래 걸릴 것입니다. 기업 입장에서도 추천은 매우 중요합니다. 사용자가 영상을 찾는데 너무 많은 시간을 소비한다면, 짜증을 느낄 것이고 이 플랫폼에 대한 이용율이 떨어질 것입니다. 또한 커머스라면 적절한 상품을 추천을 함으로써 매출을 극대화 시킬 수 있겠습니다.</p><p>그렇다면 추천 시스템에서는 사용자가 누구인지 타겟팅 하는 것이 중요해집니다. 하지만, 사용자를 타겟팅하는 것은 사업부나 마케팅 입장에서 아주 상이한 점이 있습니다. 그리고 추천 목적도 도메인 마다 상이하므로 이 부분은 생략하고 넘어가도록 하겠습니다. </p><p><br></br></p><h2 id="추천-시스템의-흐름"><a href="#추천-시스템의-흐름" class="headerlink" title="추천 시스템의 흐름"></a>추천 시스템의 흐름</h2><img src="/images/recommendation_association/flow.png" alt="추천시스템의 흐름" style="zoom:50%;" /><p>추천 시스템이 어떻게 발전해 왔는지 살펴보겠습니다. 05년에 먼저 시작된 것은 연관 상품 추천, 장바구니 분석으로도 잘 알려진 Association Rule과 Apriori 알고리즘입니다. 이 알고리즘은 같이 구매하는 상품의 패턴을 잘 파악할 수 있는 알고리즘이였습니다. 이것이 발전하는 와중에 협업 필터링이 새롭게 등장했고 넷플릭스 추천대회를 통해 ALS등의 고급 테크닉이 나오게 되었습니다. 그러던 와중 Apriori의 한계를 극복하려는 시도로 만들어진 FP-Growth가 등장했습니다. 2010년대가 넘어가면서 많은 데이터를 쌓아두기 시작하는 빅데이터 시대가 열리게 되었고, 이 역사적 흐름에 맞춰 Spark와 Spark를 이용한 다양한 추천 알고리즘이 등장하기 시작했습니다. 이후에는 딥러닝을 이용한 다양한 추천시스템이 나왔고, 최근에는 개인화 추천시스템으로 넘어가고 있습니다. 이 흐름에서 오늘은 추천의 흐름 맨 앞단인, 연관상품 추천 부분을 다뤄보겠습니다.</p><p><br></br></p><h2 id="Association-Analysis"><a href="#Association-Analysis" class="headerlink" title="Association Analysis"></a>Association Analysis</h2><p>Association Analysis는 <strong>룰 기반</strong>의 분석입니다. 상품과 상품 사이에 어떤 연관이 있는지 알아보기 위해 시작한 분석입니다. 우리말로 해석하면 <code>연관 분석</code>이 되겠습니다. </p><p>여기서 연관에 대해서 정의해볼 필요가 있습니다. <strong>연관</strong>은 무엇일까요?</p><p>연관은 얼마나 잦은 빈도로 구매를 하는지, A에서 B를 구매하는 패턴을 의미합니다. 이 연관 분석은 흔히 장바구니 분석이라고도 불리며, 가장 유명한 예시는 역시 맥주과 기저귀 분석일 것입니다. 하지만 이 맥주와 기저귀 예시에서 보더라도, 이 분석으로 나온 결과가 상관 관계가 그리 크지 않았습니다. </p><h3 id="Association-Analysis-Metric"><a href="#Association-Analysis-Metric" class="headerlink" title="Association Analysis, Metric"></a>Association Analysis, Metric</h3><p>이 규칙의 평가 지표에 대해서 알아보겠습니다. 어떤 분석에는 항상 지표가 있어야 평가를 할 수 있고, 이 평가를 통해서 분석 방법을 개선할수도 있겠습니다. 이 지표는 세 가지로 나뉩니다.</p><ul><li>support, 지지도<ul><li>A→B에 대해서 조건 A에 대한 확률을 보는 것.</li><li>P(A) 또는 P(A,B)</li><li>$P(A)$</li></ul></li><li>confidence, 신뢰도<ul><li>A상품을 구매했을 때, B상품의 구매까지 이어질 확률</li><li>$confidence(A\rightarrow B)=\dfrac {P(A,B)}{P(A)}$</li></ul></li><li>lift, 향상도<ul><li>사건이 동시에 얼마나 발생하는지 비율, 독립성을 측정</li><li>$lift(A\rightarrow B)=\dfrac {P(A,B)}{P(A)\cdot P(B)}$</li></ul></li></ul><p>연관 분석 관련 알고리즘은 흔히 지지도를 베이스로 잡고 연관도를 측정하는데, 신뢰도와 향상도를 항상 고려하면서 추천 분석을 진행해야 좋은 결과가 나올 수 있습니다. </p><h3 id="Association-Analysis-적용하기"><a href="#Association-Analysis-적용하기" class="headerlink" title="Association Analysis 적용하기"></a>Association Analysis 적용하기</h3><p>이제 본격적으로 연관 분석을 진행해 보겠습니다. 먼저 상품이 4개 있다고 가정하겠습니다. 이 연관 분석은 가능한 모든 경우의 수를 찾아내고 지지도와 신뢰도, 향상도가 높은 규칙들을 찾아내야 합니다. 그렇다면 모든 경우의 수는 몇 가지가 될까요? 고등학교 수학시간에 배운 개념을 한 번 떠올려 봅시다. </p><ul><li>4개의 상품일 때 경우의 수<ul><li>${}_4 \mathrm{C}_1+ {}_4 \mathrm{C}_2 +{}_4 \mathrm{C}_3 + {}_4 \mathrm{C}_4 = 15$</li></ul></li></ul><p>15개의 경우의 수가 나왔습니다. 이렇게 연관 분석은 모든 경우의 수를 계산해서 진행해야 합니다. 아이템 수가 많아진다면 어떻게 될까요? 결과가 예상되기 시작합니다. </p><img src="/images/recommendation_association/exponential.png" alt="급격하게 상승하는 규칙 수" style="zoom:50%;" /><p>아이템이 100개라면 $1.26\times10^{30}$ 으로 엄청난 코스트가 발생합니다. 이를 극복하기 위해서, <strong>Aprirori가 등장했습니다.</strong></p><h2 id="Apriori"><a href="#Apriori" class="headerlink" title="Apriori"></a>Apriori</h2><p>Apriori는 아이템 셋의 증가를 효과적으로 줄이기 위해 다음과 같은 가정을 사용합니다.</p><ul><li>빈번한 아이템셋은 하위 아이템 셋 또한 빈번할 것</li><li>빈번하지 않은 아이템셋은 하위 아이템 셋도 빈번하지 않다. 고로 빼버리자!</li></ul><p>글로는 이해가 잘 안되니 큰 그림을 갖고 이해를 한 번 해보도록 하겠습니다.</p><img src="/images/recommendation_association/association_rule.png" alt="Apriori Rule" style="zoom:50%;" /><ul><li>맨 처음에 4개의 아이템에 대해서 단일 항목집단을 만들어 냅니다. </li><li>2,3 아이템 셋이 빈번하지 않다고 한다면(서포트가 가장 낮다면), 가정에 따라 그 하위인 023, 123, 0123도 빈번하지 않을 것이다!<ul><li>$Support(2,3) &gt; Support(0,2,3), (1,2,3)$</li></ul></li></ul><p>이런 식으로 진행이 됩니다. 이것을 정리하자면 다음과 같습니다.</p><ul><li>k개의 아이템을 가지고 단일항목집단 생성</li><li>단일항목집단에서 지지도 계산 후 최소 지지도 이상의 항목만 선택</li><li>2에서 선택된 항목 만을 대상으로 2개항목집단 생성</li><li>2개항목집단에서 최소 지지도 혹은 신뢰도 이상의 항목만 선택</li><li>위의 과정을  k개의 k-item frequent set을 생성할 때까지 반복</li></ul><p>이제 본격적으로 예를 들어 진행해보도록 하겠습니다.</p><h2 id="Apriori-적용하기"><a href="#Apriori-적용하기" class="headerlink" title="Apriori 적용하기"></a>Apriori 적용하기</h2><img src="/images/recommendation_association/tran_to_sparse.png" alt="Transaction 데이터를 Sparse Matrix로" style="zoom:50%;" /><img src="/images/recommendation_association/data.png" alt="Sparse Data" style="zoom:50%;" /><p>다음과 같이 위에 Transaction 데이터가 주어졌습니다. 이 데이터를 잘 분리해서 0과 1로 이루어지는 Sparse Matrix로 만들어줍니다. 재료가 준비되었다면, 아까와 같이 단일 항목집단을 생성해줍니다.</p><ul><li><p>단일 항목집단 생성 및 최소 지지도 계산</p><img src="/images/recommendation_association/min_support.png" alt="단일항목집단 생성" style="zoom:50%;" /><p>위의 매트릭스를 갖고 각 항목에 대해 서포트를 계산해봅시다. 우유는 전체 4건의 거래번호에서 2개만 있으므로 0.5가 되고, 양상추를 4건에서 3개가 있으므로 0.75가 됩니다. 이렇게 보듯이 서포트는 확률에 대한 값을 의미합니다. 여기서 최소의 서포트를 가지는 쥬스를 과감하게 삭제해줍니다.<br><br></br></p></li><li><p>2개 항목집단 생성</p><img src="/images/recommendation_association/min_support2.png" alt="최소 서포트 이상 항목 선택" style="zoom:50%;" /><p>위에서 선택한 항목을 기반으로 2개 항목 집단을 만듭니다. 4개의 항목을 가지고 2개씩 붙여주는 집합을 구성하면 됩니다. 조합을 이용하면 ${}_4 \mathrm{C}_2=6$ 6개의 집단이 만들어집니다. 이 역시 서포트를 계산해주고 최소 서포트를 가진 집단을 지워줍니다. </p><img src="/images/recommendation_association/summary.png" alt="정리를 하면?!" style="zoom:50%;" /><p>이것을 정리해주면 위와 같이 진행됩니다. 생각보다 많은 연산이 줄어든 것을 확인할 수 있습니다. 여기까지 Support를 바탕으로 알고리즘을 진행했습니다. confidence와 lift도 활용해서 진행할 수 있고, 다른 지표들도 잘 확인해야 한다는 점을 꼭 알아 두시면 좋습니다.</p></li></ul><h2 id="Apriori의-장-단점"><a href="#Apriori의-장-단점" class="headerlink" title="Apriori의 장 단점"></a>Apriori의 장 단점</h2><p>이 알고리즘의 장 단점은 명확합니다. 장점은 일단 너무 쉽습니다. <strong>원리가 간단해서</strong> 쉽게 이해할 수 있고 이 의미를 쉽게 파악할 수 있습니다. 또한 유의한 연관성을 갖는 구매패턴을 다양하게 찾아주는 장점을 가지고 있습니다. </p><p>다만, 단점은 데이터가 커질 때 발생합니다. 데이터가 크다면 속도가 느리고 연산량이 그래도 또 많아집니다. 그리고 실제 알고리즘을 사용하게 되면 너무 많은 연관상품들이 나타나는 문제가 발생합니다. 그리고 장점에서도 보이듯이 상품들의 <strong>유의한 연관성</strong>, 즉 연관 상품들이 상관관계는 의미하지만 <strong>그것이 인과를 의미하진 않습니다.</strong> 결과만을 본다면 어떤 것이 원인인지 파악하기 힘듭니다. 치킨과 치킨무를 예를 들어보면, 이 둘은 장바구니에 같이 담기는 패턴이 굉장히 많을 것입니다. 서포트가 높기 때문에 추천 셋으로 많이 등장할 것입니다. 하지만 결과만을 보고 치킨무를 샀기 때문에 치킨을 구매한 것인지, 치킨 때문에 치킨무를 산 것인지 알기는 힘듭니다. 우리의 경험에 의한 지식으로 당연히 치킨이 원인이라는 것을 단번에 알 수는 있지만, 복잡한 패턴이 나오면 판단하기 쉽지 않습니다. </p><h2 id="FP-Growth-Frequent-Pattern"><a href="#FP-Growth-Frequent-Pattern" class="headerlink" title="FP-Growth(Frequent Pattern)"></a>FP-Growth(Frequent Pattern)</h2><p>FP-Growth는 데이터가 점점 많이 쌓이기 시작하면서 Apriori의 연산 속도를 개선하기 위해 등장했습니다. 이 연관 규칙을 어떻게 효과적으로 빠르게 만들 수 있었을까요? 코딩 알고리즘을 배우면 많이 등장하는 개념이 있습니다. <code>Tree</code> 입니다.</p><h3 id="핵심-아이디어-연관-규칙을-트리로-만들어-단점을-개선해보자"><a href="#핵심-아이디어-연관-규칙을-트리로-만들어-단점을-개선해보자" class="headerlink" title="핵심 아이디어 : 연관 규칙을 트리로 만들어 단점을 개선해보자!"></a>핵심 아이디어 : 연관 규칙을 트리로 만들어 단점을 개선해보자!</h3><p>FP-Growth도 기본적인 성질은 Apriori를 따라갑니다. 따라서 기본적인 설정은 Apriori와 거의 같습니다. Tree 구조를 활용했다는 점만 다르다고 볼 수 있습니다. 알고리즘을 적용하는 순서는 다음과 같습니다.</p><ul><li><p>모든 거래를 확인해 각 아이템마다의 서포트를 계산하고 최소 지지도 이상의 아이템만 선택</p></li><li><p>모든 거래에서 빈도가 높은 아이템 순서대로 순서를 정렬(여기서 부터 달라짐)</p></li><li><p>부모 노드를 중심으로 거래를 자식노드로 추가해주면서 tree를 생성</p></li><li><p>새로운 아이템이 나올 경우에는 부모노드부터 시작하고, 그렇지 않으면 기존의 노드에서 확장</p></li><li><p>위의 과정을 모든 거래에 대해 반복하여 FP Tree를 만들고 최소 지지도 이상의 패턴만을 추출</p></li></ul><p>자, 이제 아까의 데이터를 갖고 FP-Growth를 적용해봅시다.</p><h3 id="FP-Growth-적용하기"><a href="#FP-Growth-적용하기" class="headerlink" title="FP-Growth 적용하기"></a>FP-Growth 적용하기</h3><img src="/images/recommendation_association/data.png" alt="Data" style="zoom:50%;" /><p>데이터는 똑같이 준비해 놓았습니다.</p><ul><li><p>주스는 똑같이 삭제</p><img src="/images/recommendation_association/fp-growth.png" alt="주스 데이터는 삭제" style="zoom:50%;" /><p>주스를 삭제하고 정리를 한번 해줍니다.</p></li><li><p>트리 형성</p><img src="/images/recommendation_association/sorted_data.png" alt="정렬된 데이터" style="zoom:50%;" /><img src="/images/recommendation_association/fp-growth2.png" alt="FP-Tree 그리기 1" style="zoom:50%;" /><p>트리를 만드는 과정은 생각보다 간단합니다. 먼저 Root 노드를 만들어주고, 가장 빈도가 높은 순으로 노드 옆에 붙여줍니다. 여기에서는 기저귀와 양상추로 노드를 구성해보겠습니다. 거래번호 0의 아이템대로 기저귀 옆에 우유 노드를 붙여주고, 양상추에도 기저귀와 맥주, 우유를 붙여줍니다. 거래번호를 따라가면서 같은 아이템이 나온다면, 그림과 같이 아이템 옆에 숫자를 +1 시켜줍니다. </p><img src="/images/recommendation_association/fp-growth3.png" alt="FP-Tree 그리기 2" style="zoom:50%;" /></li></ul><ul><li><p>연관 규칙 찾기, 지지도 낮은 순서 부터 조건부 패턴을 생성 (우유부터 시작)</p><img src="/images/recommendation_association/conditional1.png" alt="조건부 패턴 1" style="zoom:50%;" /><p>이제 서포트가 낮은 순서부터 조건부 패턴을 만들어줍니다. 우유의 서포트가 가장 낮으므로 우유가 붙어있는 노드를 따라가서  조건부 패턴을 파악해줍니다.</p><img src="/images/recommendation_association/conditional2.png" alt="조건부 패턴 2" style="zoom:50%;" /><p>이런식으로 조건부 패턴을 다 파악했다면, 어떤 아이템이 들어왔을 때 트리를 통해서 추천 아이템을 전달할 수 있게됩니다. 위의 조건부 패턴 표를 보고, 맥주를 구매한 고객이 등장한 경우를 생각해보겠습니다. 맥주가 들어온 고객에게는 기저귀를 구매한 경우와 양상추를 구매한 경우로 나뉘게 됩니다. 양상추를 구매한 경우는 거기서 더 진행이 되지 않으므로 끝이나고, 기저귀를 구매했다면 더 깊게 들어가 양상추까지 구매한 패턴을 알 수 있게 됩니다. Tree를 타고 진행이 된다는 것이 느껴지시나요? <strong>Tree구조라는 점이 FP-Growth의 가장 큰 특징입니다.</strong></p></li></ul><h3 id="FP-Growth-장-단점"><a href="#FP-Growth-장-단점" class="headerlink" title="FP-Growth 장 단점"></a>FP-Growth 장 단점</h3><p>장점은 역시 Tree구조이기 때문에 Apriori보다 훨씬 <strong>빠르며</strong>, DB에서 스캔하는 횟수도 줄어들게 됩니다. Apriori와 비교하면, Apriori는 최소 한 번의 DB스캔에서부터 가장 긴 트랜잭션의 아이템 셋을 뒤져야 할 가능성이 있는 반면, FP-Growth는 첫번째 스캔으로 단일 항목집단을 만들고, 두 번째 스캔으로 Tree구조를 완성합니다. 완성한 FP-Tree를 이용해서 분석하면 되니까, <strong>딱 2번만 스캔하면 됩니다</strong>. 후보 Itemset을 생성할 필요없이, Tree만 구성하면 끝인 것입니다. </p><p>단점은 <strong>아직도 대용량 데이터 셋</strong>에서 메모리를 효율적으로 사용하지 않는다는 점입니다. 초기 알고리즘이라 그런 점이 있지만 이 한계 때문에 다양한 시도들이 제안되었습니다. 또한 Apriori에 비해 설계하기 어렵고, 서포트의 계산은 무조건 FP-Tree가 만들어져야 가능하다는 단점이 존재합니다. </p><p><br></br></p><hr><h3 id="연관-분석-알고리즘의-한계"><a href="#연관-분석-알고리즘의-한계" class="headerlink" title="연관 분석 알고리즘의 한계"></a>연관 분석 알고리즘의 한계</h3><p>마지막으로 이 알고리즘들의 한계에 대해서 지적해보면서 글을 마무리 해보려고 합니다. 글을 쭉 읽다보면, 최소 서포트에 대한 개념이 자주 등장합니다. 최소 서포트는 아이템이 많아지게 되면서 설계자가 직접 지정해야 합니다. 아이템 셋을 얼마나 뽑아낼지, 얼마나 상관관계가 괜찮은지에 따라 서포트 값을 설정해주어야 하는 것입니다. 하지만, <strong>최소 지지도를 선정</strong>하는 정답은 존재하지 않습니다. 계산 공식은 없고 여러 지표들을 조합해서 분석하면서 최적의 값을 지정하곤 합니다. 가장 큰 한계점으로, 실제 서비스에서는 최적 서포트 값이 매번 바뀌므로 계산하는 공식이 필요한데, 사실상 만들기는 불가해서 서비스에 잘 사용하지 않고 있습니다. 다만 많은 패턴들을 보여주는 장점이 있기 때문에 베이스라인으로 사용해서 EDA하는 식으로 많이 활용하고 있습니다. </p><p>또한 <strong>인과를 알기 어렵다는 한계</strong>가 발견됩니다. 이렇게 원인과 결과를 확실하게 분석하고 싶다는 아이디어가 등장하면서 Casual Inference라는 연구분야가 자연스럽게 만들어졌습니다. 인과 추론에 관심있는 분들은 Causual Inference 키워드로 찾아보시면 좋습니다. </p><p>그리고 <strong>메모리와 시간을 너무 많이 소비</strong>하는 알고리즘이기 때문에, 즉, 가성비가 잘 나오지 않아 사용하기 힘듭니다. 최근이야 Spark를 통해서 대용량 처리도 가능해졌긴 하지만, 굳이 큰 비용을 들이면서까지 연관분석을 하려는 시도는 많이 보이지 않는 것 같습니다. 위에서 지적한대로 지표를 직접 지정해줘야하는 문제와 더불어 서비스에 잘 활용되지 않는 큰 이유 중에 하나입니다. </p><p>이런 한계들 때문에 <strong>Collaborative Filtering</strong> 계열 알고리즘이 부상하기 시작했고, 목적에 따라 user based추천, item based 추천을 생성하기 시작했습니다. CF의 한계와 더 좋은 성능을 위해서 딥러닝을 활용해 패턴을 인식시키고자 하였고, 최근에는 개인화 추천까지 발전해오고 있는 흐름입니다. </p><hr><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li>T-Academy : <a href="https://tacademy.skplanet.com/live/player/onlineLectureDetail.action?seq=194">https://tacademy.skplanet.com/live/player/onlineLectureDetail.action?seq=194</a></li><li>ratsgo’s blog 연관규칙 : <a href="https://ratsgo.github.io/machine%20learning/2017/04/08/apriori/">https://ratsgo.github.io/machine learning/2017/04/08/apriori/</a></li><li>시간여행자 블로그 : <a href="http://openuiz.blogspot.com/2018/11/fp-growth-algorithm-frequent-pattern.html">http://openuiz.blogspot.com/2018/11/fp-growth-algorithm-frequent-pattern.html</a></li><li>떡춘님 블로그 : <a href="https://blog.naver.com/sindong14/220661064114">https://blog.naver.com/sindong14/220661064114</a></li></ul>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2021/03/07/apriori-FP/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Airflow Basic. 두 번째</title>
      <link>http://tkdguq05.github.io/2021/02/21/airflow-basic2/</link>
      <guid>http://tkdguq05.github.io/2021/02/21/airflow-basic2/</guid>
      <pubDate>Sun, 21 Feb 2021 06:52:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;Airflow 구조 파악하기, 실수 줄이기&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Airflow 구조 파악하기, 실수 줄이기</p><a id="more"></a><h1 id="글에-들어가기-전에…"><a href="#글에-들어가기-전에…" class="headerlink" title="글에 들어가기 전에…"></a>글에 들어가기 전에…</h1><p>Airflow의 구조에 대해서 들어가기 전에, Airflow의 컨셉에 대해서 간략하게 설명한 글이 있습니다. 기본적인 개념에 대해서 먼저 알고 싶으신 분은 <a href="https://tkdguq05.github.io/2020/03/14/airflow-start/#more">Airflow Basic</a>을 읽어주시면 감사하겠습니다. 간단하게 컨셉을 이해한 뒤에 이 글을 읽으시면 더욱 좋습니다.</p><br></br><h2 id="Airflow-구성요소"><a href="#Airflow-구성요소" class="headerlink" title="Airflow 구성요소"></a>Airflow 구성요소</h2><p>Airflow의 구성요소는 크게 3개입니다. Airflow Webserver, Scheduler 그리고 Worker 입니다. 실제로 Airflow를 설치하셨다면, <code>airflow webserver</code>, <code>airflow scheduler</code>, <code>airflow worker</code> 명령어를 입력하면 됩니다. 세 명령어를 다 입력했다면, airflow를 다 띄웠다고 할 수 있습니다. 운영하고 있는 Airflow 서버에서도 이상이 있으면 체크하는 것이 명령어를 입력한 세 개의 구성요소입니다. 먼저 Airflow의 구성요소에 대한 큰 그림을 보고 각 구성요소들에 대해서 설명해보도록 하겠습니다.</p><img src="/images/airflow_basic2/airflow_arc.png" alt="Airflow Architecture" style="zoom:50%;" /><br></br><h3 id="Airflow-Scheduler"><a href="#Airflow-Scheduler" class="headerlink" title="Airflow Scheduler"></a>Airflow Scheduler</h3><p>Airflow의 스케쥴러는 말 그대로 Airflow의 작업들을 스케쥴링 해줍니다. DAG들을 파싱해서 스케쥴된 작업들의 작업 간격을 확인하고 실제로 작업 명령을 워커에 전달합니다. 또한 DAG에 걸려있는 의존성을 확인하고 걸려있다면, 실행 큐에 더해줍니다. 이와같이 스케쥴러는 Airflow의 심장과 같은 역할을 수행하고 DAG와 직접적으로 붙어있습니다. 붙어야 하는 DAG의 위치는 airflow.cfg 파일에서 지정할 수 있습니다. airflow.cfg는 airflow에 대한 설정들이 모여져 있는 파일입니다.</p><img src="/images/airflow_basic2/airflow_dag_path.png" alt="Airflow Dag의 경로" style="zoom:50%;" /><p>하나의 서버에서 돌아가는 싱글구조의 Airflow라면 이 설정에서 딱히 조정할 것은 없습니다. 다만 mysql에 접속할때 사용하는 user명과 비밀번호를 넣어줘야 합니다. 싱글구조가 아니라면(워커와 스케쥴러가 분리되어 있다면) 스케쥴러의 ip주소도 넣어줍니다. configuration에서 <code>result_backend</code>와 <code>sql_alchemy_conn</code>을 찾아서 수정해줍니다. Airflow의 mysql 설정이 궁금하신 분들은 <a href="https://tkdguq05.github.io/2020/12/13/airflow-on-ec2/">Airflow EC2에 구축하기</a>를 참고하시면 좋습니다.</p><img src="/images/airflow_basic2/airflow_mysql_path1.png" alt="result_backend를 수정해주자" style="zoom:50%;" /><img src="/images/airflow_basic2/airflow_mysql_path2.png" alt="sql_alchemy_conn을 수정하자" style="zoom:50%;" /><br></br><h3 id="Airflow-Worker"><a href="#Airflow-Worker" class="headerlink" title="Airflow Worker"></a>Airflow Worker</h3><p>Airflow 워커는 스케쥴러에서 할당해놓은 작업들을 DB에서 갖고와서 실제로 실행합니다. 작업들은 DAG를 구성할때 queue를 이용해서 어떤 워커에서 수행할지 결정되고 워커는 큐를 설정해서 기동합니다. 워커는 <code>airflow worker -q main</code> 과 같이 큐를 설정할 수 있습니다. DAG에서 queue를 아래와 같이 지정해놓으면 스케쥴러는 해당 큐에 맞게 작업을 나눠놓고 워커는 자신의 큐에 맞는 작업을 찾아서 갖고옵니다. 찾은 큐를 워커에서 실행하고, 실행후 나온 로그들을 회수합니다. 이 로그들은 Metastore(Airflow DB)에 저장되고 저장된 로그들은 웹 서버를 통해 확인할 수 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">t1 = BashOperator(</span><br><span class="line">    task_id=<span class="string">'t1'</span>,</span><br><span class="line">    bash_command=<span class="string">"sleep 1"</span>,</span><br><span class="line">    queue=<span class="string">"main"</span>,</span><br><span class="line">    dag=dag)</span><br><span class="line"></span><br><span class="line">t2 = BashOperator(</span><br><span class="line">    task_id=<span class="string">'t2'</span>,</span><br><span class="line">    bash_command=<span class="string">"sleep 1"</span>,</span><br><span class="line">    queue=<span class="string">"main2"</span>,</span><br><span class="line">    dag=dag)</span><br><span class="line"></span><br><span class="line">t3 = BashOperator(</span><br><span class="line">    task_id=<span class="string">'t3'</span>,</span><br><span class="line">    bash_command=<span class="string">"sleep 1"</span>,</span><br><span class="line">    queue=<span class="string">"main3"</span>,</span><br><span class="line">    dag=dag)</span><br></pre></td></tr></table></figure><p><strong>워커가 큐를 찾아 가져오는 구조가 좀 특이합니다</strong>. 일반적으로 생각하기에는 스케쥴러가 워커에 작업을 보내줄 것 같은데, 그렇지 않습니다. 이 큐를 가져오는 구조 라는 특성 때문에 Airflow를 싱글구조에서 워커와 DB, 스케쥴러로 나누는 구조로 변경할때, 보안그룹 설정에서 스케쥴러의 인바운드 포트만 열어주게 됩니다. 스케쥴러의 인바운드 포트만 열어주고, 워커의 airflow.cfg로 들어가서 어떤 metastore에서 작업을 할당받을지 주소를 적어주면 끝입니다. 사실상 스케쥴러 인스턴스의 airflow.cfg만 가져와서 그대로 붙여주면 아주 쉽게 설정이 끝납니다.</p><br></br><h3 id="Airflow-Webserver"><a href="#Airflow-Webserver" class="headerlink" title="Airflow Webserver"></a>Airflow Webserver</h3><p>웹 서버는 Airflow의 Metastore 저장된 로그를 보여주거나 스케쥴러에 의해 파싱된 DAG들을 시각화해서 제공합니다. 이 UI를 통해 DAG들이 돌아가는 상황과 결과들을 확인할 수 있습니다.</p><img src="/images/airflow_basic2/airflow_web.png" alt="Airflow 웹 서버" style="zoom:50%;" /><p>Dag를 만든 후에 스케쥴러가 Dag폴더의 위치를 찾으면 여기에 있는 Dag를 파싱해서 웹으로 보여줍니다. 가장 왼쪽에 On이라고 되어 있는 부분이 있는데, 맨 처음에는 Off로 되어 있습니다. 이것을 On으로 바꿔주고, 현재 시간이 Dag에 설정된 <code>start_date</code> 보다 나중 시간이라면 정상적으로 작업을 실행하고, 그렇지 않으면 작업을 수행하지 않습니다. </p><br></br><h3 id="주의해야-할-점"><a href="#주의해야-할-점" class="headerlink" title="주의해야 할 점"></a>주의해야 할 점</h3><ol><li><p>Timezone, - UTC, KST</p></li><li><p>dag_name</p></li><li><p>병렬작업 설정</p></li></ol><p>Airflow Basic에 있는 내용들을 종합하면 간단한 Dag는 작성해서 파이프라인을 만들 수 있을 것입니다. 여기서부터는 작업하면서 실수가 잦았던 부분에 대해서 다뤄보려고 합니다. </p><p>첫 번째는 시간대 설정입니다. 이 글을 보고 계시는 대부분의 분들은 KST시간대를 사용하시는 분들일 것입니다. 하지만 Airflow는 한국인이 만든 것이기 아니기 때문에, 모든 사람들이 다 사용할 수 있게 시간대를 UTC로 설정해두었습니다. 그래서, 작업하는 시간대와 Webserver에서 보여지는 시간대는 UTC를 사용합니다. 위 UI에서도 Last Run이 보이는데, 이것은 UTC시간대를 적용해서 나오는 시간입니다. 하지만, 만약에 Airflow를 AWS위에 올려서 사용하고 cron 스케쥴을 잡아서 실행한다면, 이 cron스케쥴은 KST를 적용받습니다. </p><img src="/images/airflow_basic2/schedule_interval.png" alt="schedule_interval" style="zoom:50%;" /><p>위의 사진에서 보든이 schedule_interval에는 cron 스케쥴이 들어갑니다. 작성된 스케쥴을 그대로 읽으면 AM 01:30분에 돌아가게 됩니다. 지금은 글로 설명되어 있어서 ‘이게 왜 헷갈리지’ 라고 생각하실 수도 있겠지만, Last Run이나 Airflow의 Tree View를 보면서 작업 수행 시간을 확인하다 보면 스케쥴 인터벌에 UCT로 작성하는 큰 실수를 할 수 있습니다. 물론 이것은 개인의 경험에 의한 경고입니다. 시간을 잘 확인하는 습관을 들입시다.</p><blockquote><p>Airflow 1.10.10 버전 부터는 UI에서 Timezone을 선택할 수 있다고 합니다. </p><p><a href="https://github.com/apache/airflow/pull/8046">https://github.com/apache/airflow/pull/8046</a></p></blockquote><p>두 번째는 dag_name입니다. Dag를 만들고 잘 돌아가면 보통 Dag를 새로 만들어서 구성하기 보다는, 복사해서 붙여넣고 자잘한 부분만을 수정하는 경우가 많습니다. 저도 그렇습니다. 이럴 경우에 다른 자잘한, 중요한 로직과 관련된 부분들은 수정을 잘 하는데, dag_name을 바꿔놓지 않는 경우가 많습니다. 이렇게 되면, Webserver에서 Graph view를 볼 때, Dag가 새로고침 할때마다 변경되는 기이한 현상을 목격할 수 있습니다. 분명히 변경이 된 것을 Code에서 확인을 했는데, 실제로 Graph View에 나오는 것은 이전 코드입니다. 새로 고침을 하면 또 수정된 코드로 보입니다. 이것은 만들어진 dag파일명은 다르지만 dag_name이 같아서 웹 서버가 같은 dag_name을 호출하기 때문입니다. 흔히 dag파일명으로 Airflow 웹 서버가 구분할 것이라고 생각하지만, 웹 서버는 dag_name을 읽어옵니다. 이 dag_name은 위 사진에서처럼, with DAG()안에 들어갑니다.</p><p>세 번째는 병렬작업 설정입니다.</p><img src="/images/airflow_basic2/airflow_paralell.png" alt="병렬실행" style="zoom:50%;" /><p>어떤 작업을 사진처럼 병렬로 예쁘게 실행시키고 싶을 때가 있습니다. 물론 이것은 그림으로만 병렬이고, 실제로는 작업이 하나씩 돌아가는 구조입니다. 그 이유는 코드를 확인해보면 됩니다. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">  step_adder = EmrAddStepsOperator(</span><br><span class="line">    task_id=<span class="string">"emr_connection_&#123;&#125;"</span>.format(file),</span><br><span class="line">    job_flow_id=created_job_flow_id,</span><br><span class="line">    aws_conn_id=<span class="string">"aws_default"</span>,</span><br><span class="line">    steps=get_pyspark_execute_step(file),</span><br><span class="line">    queue=<span class="string">"main"</span>,</span><br><span class="line">    dag=dag</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  step_checker = EmrStepSensor(</span><br><span class="line">    task_id=<span class="string">"job_execution_&#123;&#125;"</span>.format(file),</span><br><span class="line">    job_flow_id=created_job_flow_id,</span><br><span class="line">    step_id=<span class="string">"&#123;&#123;&#123;&#123; task_instance.xcom_pull('emr_connection_&#123;&#125;', key='return_value')[0] &#125;&#125;&#125;&#125;"</span>.format(file),</span><br><span class="line">    aws_conn_id=<span class="string">"aws_default"</span>,</span><br><span class="line">    queue=<span class="string">"main"</span>,</span><br><span class="line">    dag=dag</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">dataloader_checker &gt;&gt; step_adder &gt;&gt; step_checker &gt;&gt; preprocessing_end</span><br></pre></td></tr></table></figure><p>병렬 구조로 돌리는 것은 사실 for문으로 묶여있습니다. 병렬처럼 묶는 방법은 다양하지만 여기서는 for문을 사용했습니다. 이렇게 for문으로 구성하고 작업 순서를 부등호를 이용해서 정해주면 끝이지만, 여기서 실수가 자주 발생합니다. <code>indentation</code> 을 집중해서 보셔야 합니다. 여기서 작업 순서가 적힌 dataloader~~ 부분을 부면 for문 안쪽으로 indentation이 잡혀있습니다. 보통  for문을 다 작성하면 ‘다 됐다!’라는 생각에 tab을 치지 않고 작업순서를 넣는데, 이렇게 되면 병렬로 잡힐거라고 생각했던 작업이 다 깨져버리게 됩니다. Tab을 꼭 한번 눌러주고 작업 순서를 작성해주시면 아주 좋습니다.</p><hr><h3 id="덧붙여"><a href="#덧붙여" class="headerlink" title="덧붙여,"></a>덧붙여,</h3><p>Airflow를 이용하면 위 코드에서처럼 EMR을 연계해서 작업을 수행할 수 있습니다. Airflow의 장점중에 하나인데, 다양한 Hook과 Operator가 많다는 것입니다. Hook과 Operator를 조합하면 다양한 서비스 파이프라인을 개발할 수 있습니다. Airflow와 EMR을 연계해서 Spark job을 실행하고 값을 저장 부분은 다음 글로 작성해보도록 하겠습니다. 부족한 글 읽어주셔서 감사합니다.</p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2021/02/21/airflow-basic2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS 비용관리의 서막, EMR</title>
      <link>http://tkdguq05.github.io/2021/01/24/cost-mgt-emr/</link>
      <guid>http://tkdguq05.github.io/2021/01/24/cost-mgt-emr/</guid>
      <pubDate>Sun, 24 Jan 2021 06:36:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;FinOps? EMR 비용관리&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>FinOps? EMR 비용관리</p><a id="more"></a><h1 id="비용관리의-서막-FinOps"><a href="#비용관리의-서막-FinOps" class="headerlink" title="비용관리의 서막, FinOps?"></a>비용관리의 서막, FinOps?</h1><p>비용관리를 본격적으로 시작하게되는 때는 언제일까요? 비용관리에 대한 책에 감명을 받아서? 물론 FinOps에 관한 책을 추천 받았고 이런 책이 있다는 것에 대해서 놀라기도 했습니다. 본격적으로 비용관리를 체계를 갖추어 해야겠다는 생각도 같이 들었습니다. 하지만 일반적으로는 AWS 요금이 과하게 부과된 날이지 않을까 합니다. 12월의 평화로운 어느 날에 개발 팀장님께서 조용히 저를 부르셨고, 충격적인 12월의 요금을 보면서 비용관리의 필요성을 깨닫게 되었습니다. </p><p>앞서 FinOps에 관한 책을 추천 받았다고 했는데, 이 책을 기반으로 비용 관리를 해야겠다고 마음을 먹었습니다. 이 책은 마이클 풀러의 <a href="https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcQ12PNmpt2mrX5XbiP5lOyLJ1hA5trRV5ficm1fL_vGDRuCpvRb">Cloud FinOps: Collaborative, Real-Time Cloud Financial Management</a> 입니다.<br><img src="https://image.yes24.com/Goods/74391396/L" alt="cloud finops">책에 대한 소개글을 작성하려고 한게 아니기 때문에 간단하게 책에 대해서 읽어본 소감을 말하자면, 엄청나게 세밀하게 관리포인트를 집어주지는 않습니다. 제가 아는 내용이 많지 않아서 그럴 수도 있겠습니다. 비용관리라는 말을 듣고 어떻게 관리할 수 있을까? 에 대해서 생각해보면 나오는 개념들이 정확한 용어로 설명이 되어있기는 합니다. 나쁜 책은 아니라고 생각합니다. 실무자보다는 윗 분들이 먼저 읽었으면 합니다.</p><h2 id="FinOps"><a href="#FinOps" class="headerlink" title="FinOps"></a>FinOps</h2><p>FinOps는 Finance + DevOps가 결합된 말입니다. 클라우드 환경에서 재무와 개발/운영을 긴밀히 결합함으로써 비용을 최적화하여 관리하고 통제할 수 있도록 하는 것입니다. 클라우드 비용 최적화를 위한 베스트 프렉티스와 공통된 표준 정책으로 기술과 비즈니스, 재무 전문가를 결합함으로써 비즈니스 가치 극대화하려는 것입니다.(출처 : Bespin Global)<br>회사에서 비용관리를 제대로 시작하게 되면서 FinOps라는 말을 붙이지는 않았습니다. 재무에 관련된 인원을 포함하기 어려웠기 때문입니다. 대신에 비용관리에 관련된 사람들이 모였습니다. AWS의 비용 급상승에 관련된 부서의 실무자와 개발 팀장님, TA, 기획 팀장님입니다. 사실상 운영에 관련된 모든 사람이 모이게 되었습니다. 이렇게 모인 사람들과 비용에 대해서 논의했고 현재는 1차적인 최적화 작업을 완료하였습니다. </p><h2 id="비용의-원인-EMR"><a href="#비용의-원인-EMR" class="headerlink" title="비용의 원인, EMR"></a>비용의 원인, EMR</h2><p>다시 문제의 12월의 끝자락으로 돌아와서, 원인 파악을 해보기 시작했습니다. 원인 중 하나는 EMR 비용의 갑작스러운 증가였습니다. EMR이 무엇일까요? 구글에 검색하면 기다렸다는 듯이 AWS는 <a href="https://docs.aws.amazon.com/ko_kr/emr/latest/ManagementGuide/emr-what-is-emr.html">문서</a>를 만들어 놓았습니다. 쉽게 말하자면, EMR은 AWS 위에서 Hadoop이나 그 기반 프레임워크들을 위한 빅 데이터 프레임워크 실행을 간소화하는 관리형 클러스터 플랫폼입니다. 저희의 경우 Spark를 사용하기 위해 EMR을 쓰고 있습니다. </p><h3 id="예상되는-비용-포인트"><a href="#예상되는-비용-포인트" class="headerlink" title="예상되는 비용 포인트"></a>예상되는 비용 포인트</h3><ol><li>많은 고객사에 대한 대응</li><li>오버 사이징된 클러스터</li><li>Airflow TerminateJobFlow</li><li>EMR Cluster 관리</li></ol><p>첫 번째는 많은 고객사에 대한 대응이였습니다. 새롭게 오픈한 서비스로 인해 고객사가 갑자기 많이 들어오게 되었습니다. FinOps 책에 나온대로, 비용은 $사용량\times요율$ 이므로 사용량이 늘어났기 때문에 비용이 갑자기 증가될 수 밖에 없었습니다. 갑자기 늘어난 고객사를 줄일 수도 없는 노릇이므로, 다른 관리 포인트를 찾아 봤습니다. </p><p>두 번째는 오버 사이징된 클러스터였습니다. 현재 제공하고 있는 서비스들은 대부분 Airflow를 사용해서 Spark로 작업을 처리한 뒤 종료되는 구조를 가지고 있습니다. 작업을 할 때 만들어지는 클러스터들의 스펙은 대부분 동일한데, 소규모 고객사에 대해서 서비스를 할 때도 같은 스펙을 사용하고 있었습니다. 고객사의 일 평균 방문 수와 상품의 sku 수를 따져서 고객사 규모를 측정하는데, 이 기준에서 작은 고객사로 분류되는 고객사들의 클러스터 스펙을 조정해 주었습니다. </p><p>세 번째는 Airflow의 TerminateJobFlow입니다. 앞서 설명한대로, EMR 클러스터는 작업을 마치면 Airflow의 TerminateJobFlow 오퍼레이터를 이용해 작업을 종료해 클러스터를 삭제하게 됩니다. EMR은 오래 돌 수록 요금이 어마어마하게 부과되기 때문에 이런 파이프라인을 만들어 두었습니다. 그런데 가끔 이 오퍼레이터가 말을 안듣는 경우가 발생하곤 합니다. 현재의 Airflow에 있는 DAG들은 새벽에도 많이 실행되고 있습니다. 그래서 출근했을 때 새벽 내내 돌고 있는 EMR 클러스터들을 마주하게 되는 경우가 종종 있었습니다. </p><p>이런 와중에 EMR 콘솔 페이지에 나오지는 않지만 EC2 페이지에 등장하는 EMR 클러스터들이 발견되었습니다. 12월 초 부터 쌩쌩 도는 인스턴스들이었는데, 네임 태그도 달려있지 않은, 알 수 없는 것들이었습니다. 12월 초 부터 계속 돌고 있었기 때문에, 여기서 큰 비용이 발생하고 있었습니다.<br><img src="/images/cost_mgt/screen2_edit.png" alt="쌩쌩 도는 인스턴스들"></p><p>그래서 이 인스턴스들이 왜 남아있는지 알기 위해서 AWS측에 문의를 넣었습니다. 몇 번의 핑퐁이 오갔고<br>“As you can observe above, that either the cluster didn’t finish the step it was running or the step itself didn’t get submitted to it or the TerminateJobFlows API call was not made by the Airflow workflow.”<br>이러한 답변과 기타 등등을 얻을 수 있었습니다. 결국 미팅을 잡고 이야기 하기로 했습니다.(참고로 보통 이런 미팅을 하게 되면 인도 출신 엔지니어와 이야기를 하게 됩니다. 저는 인도 악센트에 친숙하지 않아서 애를 많이 먹었습니다. <del>전화 미팅이었지만 이역만리 타국과의 통화에 감사함보다는 실시간 채팅에 더 감사하게 되었다는 후기</del>)</p><p>AWS 측과 얘기를 한 후 추가로 알게 된 사실이 있었습니다. 그것은 <code>VisibleToAllUsers</code>라는 옵션이었습니다. AWS EMR에는 독특하게 모든 유저에게 클러스터를 보이는, VisibleToAllUsers이 존재합니다. 이 옵션이 체크되어 있지 않으면, 클러스터 페이지에서 해당 클러스터를 볼 수 없게 됩니다. 12월에 종료되지 않은 이 클러스터들은 이 옵션에 체크되어 있지 않은 상태로 생성이 되었고, 그래서 클러스터 콘솔 페이지에서 관리를 할 수 없었던 것이었습니다. </p><p>Airflow에서 EMR 클러스터를 생성할 때도 마찬가지입니다. <code>VisibleToAllUsers</code>옵션을 지정해서 클러스터를 생성할 수 있습니다. 이 옵션이 제대로 지정되지 않았고, 그래서 삭제되지 않고 관리되지 못한 인스턴스들이 발생한 것이었습니다. 12월 초에 새로운 서비스를 위한 Airflow 인스턴스를 새로 만들었는데, 이 파라미터값을 관리하는 Connection 부분이 초기화 되었던 것입니다. 당시에 인수인계다 뭐다 정신이 없었고 그런 상황에서 체크를 제대로 하지 않고 넘어갔던 것이 화근이었습니다. </p><p>아무튼 이렇게 해서 Connection에서 emr_default 부분에 <code>VisibleToAllUsers</code>을 true로 변경해 주었고, 클러스터 페이지에 나타나지 않는 인스턴스들은 사라지게 되었습니다. 하지만 추가 대응 방안이 필요했습니다. (AWS 측에서는 Airflow 매니지드 서비스를 이용하라고 했지만, 진심 너무 비쌉니다. 이렇게 된거 GCP로 옮기면 어떨까? Composer 참 싼데, 보고 있나 AWS?? You See Me??)</p><p>네 번째는 EMR Cluster 관리에 대한 것입니다. EMR Cluster 페이지에 직접 들어가서 삭제되지 않은 클러스터들을 일일이 보는 프로세스가 맘에 들지 않았습니다. 자동화에 집착하는 집착맨이기 때문에, 좀 더 세련된 방법을 찾고 싶었습니다. TA 분과 이야기 해 본 결과 boto3를 이용하면 클러스터에 페이지에 쉽게 접근할 수 있다는 것을 알 게 되었습니다. </p><h2 id="boto3로-클러스터-관리하기"><a href="#boto3로-클러스터-관리하기" class="headerlink" title="boto3로 클러스터 관리하기"></a>boto3로 클러스터 관리하기</h2><p>Boto3는 AWS에서 제공하는 파이썬 용 SDK(software development kit)입니다. boto3를 사용하면, S3나 EMR등 AWS의 다양한 서비스에 접근이 가능합니다.</p><p>boto3가 없다면 <code>pip3 install boto3</code>로 설치해 주시고, AWS에 로그인 해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import boto3</span><br><span class="line">from pprint import pprint</span><br><span class="line"></span><br><span class="line">client &#x3D; boto3.client(&#39;emr&#39;)</span><br><span class="line"></span><br><span class="line">response &#x3D; client.describe_cluster(ClusterId&#x3D;&#39;j-xxxxxxxxxx&#39;)</span><br><span class="line"></span><br><span class="line">pprint(response)</span><br></pre></td></tr></table></figure><p>이렇게 입력을 해주면 해당 클러스터 아이디에 대한 값들이 쫙 나오게 됩니다. <del>너무 쉽죠? AWS를 쓰세요. boto3는 참 좋습니다. 대신 더럽게 비쌉니다.</del> 이 정보들은 dictionary로 되어 있으니, 키 값을 잘 조회 해서 값에 접근하면 됩니다.</p><p>대표적인 키 값은 Cluster, Ec2InstanceAttributes, Id, Name, NormalizedInstanceHours, Status, Timeline 등입니다. 저는 TimeLine을 이용해서 생성시간과 현재시간의 차를 구한 다음, 항상 띄어놓는 분석용 EMR 시간보다 작고 5시간 이상 RUNNING하거나 WAITING하고 있는 클러스터들을 종료시킬 생각입니다. 활용방안은 다양하니 각자의 관리포인트대로 작업하시면 될 것 같습니다.</p><hr><h2 id="이렇게-해서"><a href="#이렇게-해서" class="headerlink" title="이렇게 해서"></a>이렇게 해서</h2><p>비용관리가 발생한 상황과, FinOps, EMR, 관리 방법에 대해서 간단하게 작성하게 되었습니다. 문제 상황부터 지금까지 우여곡절이 참 많았는데, 정리하니까 내용은 그렇게 많지 않네요. 삽질을 많이 했다는 뜻입니다. 여러분들은 부디 삽질을 최소화하시고 많은 이득을 취하시길 바랍니다. 짧막한 삽질 글을 읽어주셔서 감사합니다. </p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2021/01/24/cost-mgt-emr/#disqus_thread</comments>
    </item>
    
    <item>
      <title>20201227. 2020년 회고하기</title>
      <link>http://tkdguq05.github.io/2020/12/27/20201227/</link>
      <guid>http://tkdguq05.github.io/2020/12/27/20201227/</guid>
      <pubDate>Sun, 27 Dec 2020 10:21:27 GMT</pubDate>
      <description>
      
        &lt;p&gt;약속들이 눈에 보이지 않는 캘린더를 보며, 일 년이 왜 이렇게 빠른지 생각하다가, 한 해를 잘 보냈다는 뿌듯함 보다는 허무함이 몰려왔다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>약속들이 눈에 보이지 않는 캘린더를 보며, 일 년이 왜 이렇게 빠른지 생각하다가, 한 해를 잘 보냈다는 뿌듯함 보다는 허무함이 몰려왔다.</p><a id="more"></a><h1 id="2020년-돌아보기"><a href="#2020년-돌아보기" class="headerlink" title="2020년 돌아보기"></a>2020년 돌아보기</h1><iframe width="400" height="230" src="https://www.youtube.com/embed/5rGpxaKQPw0" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>   <h2 id="먼저-캘린더를-열어봤다"><a href="#먼저-캘린더를-열어봤다" class="headerlink" title="먼저 캘린더를 열어봤다."></a>먼저 캘린더를 열어봤다.</h2><p> 올 한해 많은 일이 일어났다고 생각했다. 머리 속이 복잡해서 캘린더를 보면서 하나씩 정리하고 싶어졌다. 캘린더를 열어서 1월부터 몇 번 아래로 내려가니 벌써 2020년 12월이었다. 업무 내용이나 약속이 간단하게 적힌, 그나마도 한 달 한 달이 스크롤을 내릴수록 개인적인 일들과 약속들이 눈에 보이지 않는 캘린더를 보며, 일 년이 왜 이렇게 빠른지 생각하다가, 한 해를 잘 보냈다는 뿌듯함 보다는 허무함이 몰려왔다. 올 해에 내가 한 일들을 정리하고 새로운 계획을 세워봐야겠다고 머릿속으로 다짐했는데 마음이 먹어지지가 않는다. 새 계획은 내년에 하기로 하고, 그보다는 나에게 마음정리가 더 필요한 것 같다.</p><hr><h2 id="1월부터-6월은"><a href="#1월부터-6월은" class="headerlink" title="1월부터 6월은"></a>1월부터 6월은</h2><p> 2020년이 시작되고 나서는 굉장히 바빴었다. 작년에 연구소 조직이 개편되면서 TFT가 조직되었고 인수인계 사항으로 나온 Spark를 업무에 적용해야 했었다. 기본적인 Spark에 대한 이해부터 시작해서 Pyspark, conf 세팅 등, 하루하루 해야할 게 많았고 배우고 성장하기 바빴다. 회사에서 워크샵도 갔었고 연봉협상도 처음해보고 새로 접하는 일이 많았다. <code>데이터 엔지니어링</code>에도 관심이 생겨서 세션이 있으면 주말에도 참가해서 정리를 했고, 내용이 괜찮으면 이를 정리해서 블로그에 업로드를 하던가 팀원들에게 공유를 했다. 배우고 공부하는게 재밌었던 것 같았다. 팀 내부적으로도 스터디가 계속 지속되었었고 구매확률 예측과 같은 업무 내용도 흥미로웠다. </p><p> 3월 4월에는 <code>새로운 팀원</code>들이 들어와서 팀 규모가 커졌다.  새 팀원 중 한 분은 기존에 서비스되고 있던 모델에 관심이 많았고, 해당 분야를 다뤄본 경험도 있어 모델을 고도화해보기도 했다. 모델 고도화 측면 뿐 아니라, 새 사람들이 들어오니 새로운 시각에서 서비스를 돌아볼 수도 있었고 업무 내용에 대해 다양한 논의를 할 수 있었다. 코로나가 이 때 갑자기 심해지기 시작하면서 행동에 제약이 생기기 시작했지만, 기존 TFT 팀원들의 업무능력들이 조화를 이루면서 1년도 안되는 시간만에, 나름 데이터 팀 답게 일을 할 수 있을 것 같다고 생각했다. 6월에는 제주도 여행을 떠났다.</p><h2 id="7월-부터-12월은"><a href="#7월-부터-12월은" class="headerlink" title="7월 부터 12월은"></a>7월 부터 12월은</h2><p> 어떤 일에 제대로 마음먹기 시작할 때 항상 제동이 걸렸다. 개인적인 일이든 업무적인 일이든 제대로 하려고 하면 잘 안됐다. <code>뭐든 간에 사람이 가장 중요하다는 걸 제대로 느끼게 되었다.</code> 개인적인 일은 제쳐두고 일에 대해서만 생각해보자. 하반기가 흘러가면서 퇴사자분들이 많이 나왔다. 개발팀에서 특히 많이 나왔는데, 오래 계셨던 분들이 주로 나가게 되었고, 이로 인해 회사 분위기가 어수선했었다. 팀 내부적으로라도 결속시키고 싶었고, 뭐든 새로 하는 일에 열심히 하려고 했고 새 마음가짐을 가지려고 했는데, 옆에 있는 동료가 힘들어하니 잘 안되더라. 애매한 상태로 시간이 지났고, 결국 몇 명이 팀을 떠나게 되었다. 그 중에는 오래 일을 같이 하고 믿었던 동료도 있었다. 덕분에 데이터 엔지니어링 파트에 대해서 인수인계를 받게되고 업무를 시작하게 되었다. 이와 더불어 여러가지 일이 한꺼번에 덮치면서 멘탈 챙기기가 힘들어졌다. 거기에 코로나까지 난리를 쳐대는 바람에 헬스장이 문을 닫게 되었고, 거의 유일한 스트레스 해소 창구이자, 나에게 집중할 수 있는 시간이었던 <code>운동시간</code>이 사라지게 되었다. </p><p> 운동을 계속하다가 안하게 되니까 스트레스에 대응하는게 많이 힘들어졌다. 업무적으로 힘들거나 다른 일로 힘들어도 헬스장에 가서 운동 한번 하고 오면 말끔하게 고민이 사라졌는데, 그럴 수 없었다. 동시에 목과 어깨가 아프기 시작해서 일에 집중하기도 힘들어졌다. 평소대로라면 도수치료라도 받으러 가겠지만, 굉장히 밀접하게 접촉해야하는 환경이라 가기가 꺼려졌다. 잠깐 힘들어했었는데, ‘그래 근데 뭐 어쩌라고’ 하는 생각으로 다시 뛰기 시작했다. 미세먼지가 엄청 심하지 않으면 나가서 3키로 이상 뛰었던 것 같다. 운동하니까 확실히 나아졌다. 몸의 병이든 마음의 병이든 일단 움직여야 낫는 것 같다.</p><h2 id="다시"><a href="#다시" class="headerlink" title="다시"></a>다시</h2><p> 멘탈이 좀 나아지니 팀을 좀 추스려야겠다는 생각을 했다. 갑자기 인원조정을 하게 되었고, 업무 담당자도 바뀌게 되어 정리를 하지 않으면 혼란이 있을 것 같았다. 어떻게 해야할까 고민하다가, 어디서부터 잘못되었을까, 뭘 안하기 시작했을까 생각했다. 팀이 힘들어지면서는 10시에 했었던 스크럼 미팅이 생략되었고 코드 리뷰, 문서 정리, 팀 내부 미팅과 스터디 등이 점차적으로 사라지게 되었다. 개인이 맡은 업무만 하게 되고 얻은 지식은 고사하고 진행사항도 파악하기 힘들어졌다. 여기서부터 시작해야겠다고 생각했다. 아마 남은 팀원들 모두 이렇게 생각했을 것 같다. 당장 <code>스크럼</code>을 다시 재개했고 하루에 어떤 일을 할 건지 지난 업무 진행상황과 어려운 점을 간략하게 얘기했다. 스크럼에서 다 같이 논의해서 해야할 문제가 있으면 미팅을 잡아서 따로 얘기했다. 이런 상황에서 데이터 팀을 위한 칸반보드가 필요하다는 의견이 나왔고, 해외 기업들의 데이터 조직의 스크럼 방식과 칸반보드 등을 조합해서 우리만의 칸반보드를 만들어냈다(물론 블로그의 다음 글은 이 내용이 될 것이다). 업무 내용을 정리하고 내년에 단기적으로 그리고 장기적으로 해야할 일들을 작성했다. 이렇게 정리하고 나니 하루하루 뭘 해야할지 명확해졌고 어떤 내용을 공부할지도 정해졌다. 스터디가 자연스레 필요해졌다. 팀원들끼리 모여서 어떤 내용을 같이 공부할지 의논했고 그 내용에 대한 도서를 구매하게 되었다. 물론 아직 여러 걱정거리들이 남긴했지만, 적은 팀원들로도 할 수 있구나란 생각이 들었고, 어떤 업무에 대해서 인원을 충원해야할 지도 명확해진 것 같다. 그리고 팀이 예전과 비슷한 정도의 활기를 되찾게 되었다. 마음이 잘 맞는 사람들이라 정말 다행이고 감사하다. 좋은 사람들이다.</p><hr><h2 id="남은-2020년에는-연차를-썼다"><a href="#남은-2020년에는-연차를-썼다" class="headerlink" title="남은 2020년에는 연차를 썼다"></a>남은 2020년에는 연차를 썼다</h2><p> 연차를 계산해보니 생각보다 많이 남아서 24일부터 남은 연차를 모두 썼다. 그러니까 글을 쓰고난 내일에도 나는 출근을 하지 않는다. 당장 내일은 할게 좀 많아 보인다. 회사에서 작성하라는 Self Review를 늦장부리다가 못 썼기 때문이다. 내일은 SR을 마저 쓰고 사놓은 책들을 찬찬히 볼 예정이다. 다행히도 오늘까지 보고싶었던 넷플릭스의 스위트홈을 몰아서 다 봤고, 웹툰까지 3만원을 결제해서 결말까지 봐버렸다. 방해할게 아무것도 없어서 맘 편히 책을 보고 공부할 수 있을 것 같다. 다만 하나 걸리는 점이 있다면 목뼈가 너무 아프다는 건데, 얼른 고쳐버려서 뭘 하든 제약에 걸리지 않고 바로 할 수 있도록 만들어야겠다. 2020년이 다 가기 전에 남은 힘든 점과 기분좋아지게 하는 점들을 써놓아야겠다.</p><h3 id="힘든-것들"><a href="#힘든-것들" class="headerlink" title="힘든 것들"></a>힘든 것들</h3><ul><li>목과 어깨가 스트레칭을 해도 아프다. 적어도 한 5년치 묵혀놓은 거라 잘 안풀리겠지만 치료해보자.</li><li>하도 근력운동을 안하다 보니 근육이 많이 빠지고 살이 쪘다. 맨몸운동 열심히 하자.</li><li>연말이 되니 인간관계에 대해 생각이 많아진다. 적게 생각하고 연락이나 한 번 해보자.</li><li>뭐가 힘든지 사실 대충 생각해놨었는데, 그 중 하나는 1년을 회고하려는 생각에 마음이 많이 무거웠다는 점이다. 결코 올 해는 안 좋았던 날이 좋았던 날보다 많았던 날 같고 뭔가 뒤숭숭했다. 그런데 글을 쓰다보니 괜찮아졌다. 다 쓰고보니 작년보다 고민이 좀 없어진 것 같기도 하고…</li></ul><h3 id="기분-좋아지게-하는-것들"><a href="#기분-좋아지게-하는-것들" class="headerlink" title="기분 좋아지게 하는 것들"></a>기분 좋아지게 하는 것들</h3><ul><li>코로나가 심해지면서 재택근무가 시작되었다. 3일에 한번 재택을 하는 거긴 하지만, 경기도에서 출퇴근하다가 1초만에 출퇴근하게 되는게 너무 행복하다. 물론 일은 계속 잡고있게 되서 고민이긴 하지만.</li><li>골수 나얼 팬인데 최근에 나얼 님이 유튜브를 시작했다.  <code>나얼의 음악세계</code> 한 10년 전에 KBS 심야 라디오에서 진행했던 프로그램 명과 동일하다. 일단 잠을 자야해서 라디오를 녹음하고 다음 날에 챙겨 들었었던 기억이 있다. 근데 이제 토요일마다 유튜브에서 LP판으로 나얼 형이 직접 틀어준다. 옛날 생각나고 너무 행복하다.</li><li>직접 만든 <code>사과잼</code>이 너무 맛있다. 재택할때 아침마다 빵이랑 먹었는데 살 많이 쪘다.</li><li>오늘 글을 쓰다가 ‘Justice Der’라는 기타 아티스트를 알게 되었다. 유튜브에 또 혜자스럽게 2시간 40분짜리 플레이리스트를 만들어뒀다. 적어도 1주일은 들을 것 같다. </li></ul>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/12/27/20201227/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Airflow EC2에 구축하기</title>
      <link>http://tkdguq05.github.io/2020/12/13/airflow-on-ec2/</link>
      <guid>http://tkdguq05.github.io/2020/12/13/airflow-on-ec2/</guid>
      <pubDate>Sun, 13 Dec 2020 08:05:59 GMT</pubDate>
      <description>
      
        &lt;p&gt;Airflow를 AWS EC2에서 실행시켜 보자!&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Airflow를 AWS EC2에서 실행시켜 보자!</p><a id="more"></a><h2 id="AWS-EC2-위에-Airflow-구축하기"><a href="#AWS-EC2-위에-Airflow-구축하기" class="headerlink" title="AWS  EC2 위에 Airflow 구축하기"></a>AWS  EC2 위에 Airflow 구축하기</h2><p>Airflow를 로컬에 구축할 수도 있지만 안정성을 위해서라면 꺼지지 않는 컴퓨터에 Airflow를 구축하는 것이 좋을 것입니다. 이번 글에서는 실제 서비스를 위해서 Airflow를 EC2 위에 구축하는 내용을 담아보겠습니다.</p><p>Airflow에 대한 기본 개념이 궁금하신 분들은 <a href="https://tkdguq05.github.io/2020/03/14/airflow-start/#more">Airflow Basic</a> 을 확인하시면 좋습니다.</p><h2 id="준비물"><a href="#준비물" class="headerlink" title="준비물"></a>준비물</h2><p>Airflow를 구축하기 위해서는 준비물이 필요합니다. 첫번째로는 EC2 서버입니다. 인스턴스 사이즈가 작아도 크게 상관은 없겠지만 여유롭게 t3.large를 선택하도록 하겠습니다. 인스턴스 설정이 끝나면 인스턴스를 생성하고 바로 인스턴스 안으로 들어가 보도록 합니다.</p><p>ssh 명령어를 이용해서 인스턴스 주소를 입력해 접속합니다. 접속이 안된다면 보안그룹에서 22번 포트를 열어줍시다.</p><p>이제 본격적으로 Airflow를 구축해 볼 것입니다. 구축 시에 확인해야 할 체크리스트를 만들어 둡니다.</p><ul><li><input disabled="" type="checkbox"> Airflow 기본 세팅</li><li><input disabled="" type="checkbox"> Redis</li><li><input disabled="" type="checkbox"> MySQL</li><li><input disabled="" type="checkbox"> 기타 라이브러리 설치</li><li><input disabled="" type="checkbox"> AMI 이미지 생성하기</li></ul><p>마지막에 이미지를 생성하는 이유는 이 작업을 반복하려면 너무 귀찮고 힘들기 때문입니다. 완벽히 구축이 되고 잘 돌아가는 Airflow 이미지를 생성해 두면 나중에 활용할 일이 많습니다. Airflow를 클러스터화 한다던가 그런 곳에 이미지를 사용하면 쉽게 구축할 수 있습니다.</p><p>레크리스트에는 Redis와 MySQL이 포함되어있습니다. 기본 세팅으로 실행해도 상관없지만 기본 세팅의 Executor는 Sequential Executor로 병렬로 Task를 수행할 수밖에 없습니다. 실제 서비스에는 많은 Task가 동시에 실행해야 할 경우가 자주 발생하므로 병렬 처리가 가능한 Celery Executor를 사용할 것이고 이 Executor는 메시지 브로커를 사용합니다. 메시지 브로커에는 RabbitMQ나 Redis 등이 사용되는데 이번 글에서는 Redis를 사용해 보겠습니다. </p><hr><h2 id="기본-세팅에-대한-의문점"><a href="#기본-세팅에-대한-의문점" class="headerlink" title="기본 세팅에 대한 의문점"></a>기본 세팅에 대한 의문점</h2><h3 id="Redis-vs-RabbitMQ"><a href="#Redis-vs-RabbitMQ" class="headerlink" title="Redis vs RabbitMQ?"></a>Redis vs RabbitMQ?</h3><p>Redis는 NoSQL DB로 잘 알려져 있습니다. In Memeory 방식이며 key-value데이터 구조 스토어 이기 때문에 빠른 Read, Write 성능을 보장합니다.</p><p>RabbitMQ는 DB보다는 메세징 브로커로 잘 알려져 있습니다. 메시지의 우선순위를 지원하며 크고 복잡한 메시지를 다룰때 적합합니다.</p><p>Airflow의 브로커로 어떤걸 사용할지는 현재 서비스할 비즈니스 프로세스에 따라 판단하면 됩니다. 제가 구축할 서비스의 비즈니스 프로세스에는 복잡한 메시지를 다루지는 않습니다. 제가 판단하기에 이 서비스에는 속도가 더 중요하다고 생각했습니다. 그래서 In Memory 방식의 Redis은 성능이 보장되기 때문에 Redis로 선택을 했습니다. Airflow를 구축하시는 분들도 무작정 따라하기보다는 비즈니스 프로세스를 생각해보시고 알맞는 로직에 따라 어떤걸 사용할지 선택하시면 좋을 것 같습니다.</p><blockquote><p><strong>참고! Celery란?</strong><br>Celery 는 Python 으로 작성된 분산 메시지 전달을 기반으로 한 비동기 작업 큐로, Worker 의 한 종류입니다.<br>별도로 실행 중인 Worker Process가 Broker로부터 Message를 전달 받아 작업을 대신 수행해 주는 라이브러리입니다.<br>출처 : <a href="https://velog.io/@jisoo1170/Redis-RabbitMQ-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90">https://velog.io/@jisoo1170/Redis-RabbitMQ-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90</a></p></blockquote><h3 id="Sqlite-vs-MySQL"><a href="#Sqlite-vs-MySQL" class="headerlink" title="Sqlite vs MySQL?"></a>Sqlite vs MySQL?</h3><p>또한 Airflow의 meta store는 sqlite인데 sqlite로는 Hello World 정도만 테스트할 정도의 수준이기 때문에 MySQL을 DB로 사용해 볼 것입니다. 보통 sqlite는 로컬에서 혼자 사용하는 용도이며 많은 요청을 처리하기에는 버겁습니다. 반면 MySQL은 여러 개의 작업과 사용자의 SQL을 처리할 수 있도록 구현되어 있기 때문에 실제 서비스에 sqlite보다 적합할 것입니다.</p><p>의문점이 해결되었다면 본격적으로 Airflow를 구축해보도록 하겠습니다.</p><hr><h2 id="1-Airflow-기본-세팅"><a href="#1-Airflow-기본-세팅" class="headerlink" title="1. Airflow 기본 세팅"></a>1. Airflow 기본 세팅</h2><p>Airflow 구축 전에 반드시 해야할 것 중에 하나는 Airflow Home 경로를 설정하는 것입니다. 저의 경우에는 항상 경로 세팅을 나중에 하다가 잊어버려서 에러가 나는 경우가 많아서 꼭 먼저 설정해두곤 합니다.</p><p><img src="/images/airflow_on_ec2/airflow_quick.png" alt="Airflow Quick Start"></p><p>출처 : <a href="https://airflow.apache.org/docs/apache-airflow/stable/start.html">https://airflow.apache.org/docs/apache-airflow/stable/start.html</a></p><p>Airflow 공식 문서에 따르면 기본 경로는 위 사진에 나와있는 것과 같습니다. 그냥 놔둬도 되지만 나중에 경로를 옮길 때를 대비해서 한번 세팅해봅시다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EC2</span></span><br><span class="line"><span class="built_in">export</span> AIRFLOW_HOME=/home/ec2-user/airflow</span><br></pre></td></tr></table></figure><p>EC2 인스턴스라면 기본 경로를 다음과 같이 설정해 줍니다.</p><p>(여기서 airflow를 바로 설치해도 되긴 하지만 pip3 install apache-airflow로 설치를 하게되면 자잘한 에러들을 만날 수 있습니다. 아래 과정을 마친 뒤 명령을 실행하면 깔끔하게 설치되니 잘 따라가보도록 합니다. )<br><br></br></p><h2 id="2-Redis-세팅"><a href="#2-Redis-세팅" class="headerlink" title="2. Redis 세팅"></a>2. Redis 세팅</h2><p>이제 브로커로 사용할 Redis를 설치해 줍시다. 먼저 AWS Linux의 패키지 설치 도구인 <code>yum</code>을 업데이트하고 필요한 라이브러리를 설치합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum -y update</span><br><span class="line">$ sudo yum -y install gcc make</span><br></pre></td></tr></table></figure><p>이제 Redis를 다운 받습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /tmp</span><br><span class="line">$ wget http://download.redis.io/releases/redis-4.0.0.tar.gz</span><br><span class="line">$ tar xzf redis-4.0.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> redis-4.0.0</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><p>Redis 디렉토리를 만들고 파일을 복사합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /etc/redis </span><br><span class="line">$ sudo mkdir /var/lib/redis</span><br><span class="line">$ sudo cp src/redis-server src/redis-cli /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">$ sudo cp redis.conf /etc/redis/</span><br></pre></td></tr></table></figure><p>Redis의 configure 파일을 수정합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/etc/redis/redis.conf</span></span><br><span class="line">[..]</span><br><span class="line">daemonize yes</span><br><span class="line">[..]</span><br><span class="line">  </span><br><span class="line">[..]</span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">[..]</span><br><span class="line">  </span><br><span class="line">[..]</span><br><span class="line">dir /var/lib/redis</span><br><span class="line">[..]</span><br><span class="line">  </span><br><span class="line">logfile /var/<span class="built_in">log</span>/redis_6379.log</span><br></pre></td></tr></table></figure><p>Redis-Server initializize 스크립트를 세팅합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /tmp</span><br><span class="line">$ wget https://raw.github.com/saxenap/install-redis-amazon-linux-centos/master/redis-server</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv redis-server /etc/init.d</span><br><span class="line">$ sudo chmod 755 /etc/init.d/redis-server</span><br><span class="line">$ sudo vim /etc/init.d/redis-server</span><br><span class="line"></span><br><span class="line">-&gt;  redis=<span class="string">"/usr/local/bin/redis-server"</span> 확인</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chkconfig --add redis-server</span><br><span class="line">$ sudo chkconfig --level 345 redis-server on</span><br></pre></td></tr></table></figure><p>서버 실행!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service redis-server start</span><br><span class="line">$ redis-cli ping -&gt; PONG</span><br><span class="line"></span><br><span class="line"><span class="comment"># 강제 종료시</span></span><br><span class="line"><span class="variable">$sudo</span> service redis-server stop</span><br></pre></td></tr></table></figure><p><code>sudo service redis-server start</code>를 해도 별 반응이 없다면 ctrl+c로 종료하고 실제로 돌아가는 프로세스가 있는지 확인합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep redis</span><br></pre></td></tr></table></figure><p>제대로 세팅이 되었다면 다음과 같이 나올 것입니다.</p><p><img src="/images/airflow_on_ec2/redis_on.png" alt="Redis가 돌아가고 있다"></p><p>브로커는 구축이 되었습니다.<br><br></br></p><h2 id="3-MySQL-세팅"><a href="#3-MySQL-세팅" class="headerlink" title="3. MySQL 세팅"></a>3. MySQL 세팅</h2><p>Airflow 구축을 하면서 가장 삽질도 많이 하고 시간을 많이 낭비한 부분입니다. 익숙하지 않아서인지 이상하게 MySQL을 다룰 때마다 에러핸들링을 오래 하게 되는 것 같습니다.</p><p>MySQL 설치</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install mysql56-server</span><br></pre></td></tr></table></figure><p>웹에 검색하면 위와 같은 명령어가 많이 등장합니다. 예전 버전의 AWS CLI였으면 명령어가 적용되었을 것 같은데 mysql이 설치가 되지 않습니다.</p><p>아래의 명령어를 사용해서 설치를 해야합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line">$ sudo yum localinstall mysql57-community-release-el7-11.noarch.rpm </span><br><span class="line">$ sudo yum install mysql-community-server</span><br></pre></td></tr></table></figure><p>설치가 완료되면 mysql 데몬을 실행합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure><p><img src="/images/airflow_on_ec2/mysql_error.png" alt="왜 안되지"></p><p><img src="/images/airflow_on_ec2/heavy_ki.png" alt="답답하면 직접 하면 된다"></p><p>이렇게 실행하라는 소리가 많은데 역시나 실행이 되지 않습니다. 왜 꼭 한번에 되게 정리해 놓은 문서는 없을까요? 답답하면 제가 정리해서 글을 올리면 됩니다. 묵-직하게!</p><p>에러가 난다면 코드를 다음과 바꿔서 쳐봅니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysqld start</span><br></pre></td></tr></table></figure><p>mysqld가 실행되었고 이제 mysql 명령어를 이용하는 게 가능해졌습니다.</p><p>Airflow에서 MySQL을 DB로 사용하기 때문에 해주어야 할 작업이 남았습니다. Airflow 유저를 만들어 줘야하고 airflow database를 만들어줘야 합니다. 유저가 없다면 database에 접근이 불가능하며, airflow database가 없다면 Airflow 실행에 필요한 테이블들을 만들지 못합니다.</p><p>따라서 <code>root</code>유저로 접속해서 유저를 만들고 데이터베이스를 만들어줘야 합니다.</p><h3 id="MySQL-세부-세팅"><a href="#MySQL-세부-세팅" class="headerlink" title="MySQL 세부 세팅"></a>MySQL 세부 세팅</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line"><span class="comment"># 패스워드를 입력</span></span><br><span class="line">Enter Password :</span><br></pre></td></tr></table></figure><p>루트 유저로 접속하려면 비밀번호를 요구합니다. 하지만 방금 MySQL을 설치했기 때문에 비밀번호를 설정한 적이 없습니다. 그래서 그냥 엔터를 쳐봅니다.</p><p><img src="/images/airflow_on_ec2/mysql_error.png" alt="왜 않되2"></p><p>될리가 없습니다.</p><p>MySQL은 설치가 될때 root 유저에 대한 임시 비밀번호를 만들어 놓기 때문에 접속이 안되는 것입니다. 임시 비밀번호를 찾아 와야 합니다. 임시 비밀번호는 휴대폰 인증을 통해서 이메일로 받는게 정석이지만 MySQL은 조금 다릅니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /var/<span class="built_in">log</span>/mysqld.log</span><br></pre></td></tr></table></figure><p><code>/var/log/mysqld.log</code> 여기에 임시비밀번호가 있습니다. 비밀번호를 복사해 놓은 후 다시 입력해 봅니다.</p><p>mysql 프롬포트가 나왔다면 성공입니다.</p><p>이제 root 유저의 비밀번호를 다시 설정해주고 airflow 유저를 생성하고 database를 만들어 주면 세팅은 끝납니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE mysql.user SET Password=PASSWORD(<span class="string">'패스워드'</span>)</span><br><span class="line">           WHERE User=<span class="string">'root'</span>;</span><br></pre></td></tr></table></figure><p>검색해서 나온 위 명령어로 비밀번호를 세팅해줍니다.</p><p>여기서 에러가 발생하는데 두 가지 에러가 발생합니다.</p><ol><li>syntax 에러</li><li>Your password does not satisfy the current policy requirements</li></ol><p>1번 에러의 경우에는 <code>&#39;</code> 를 잘 살펴보고 모양이 맞는지 한번 잘 확인해 봅니다. 혹은 mysql 버전에 맞지 않는 명령어일 가능성이 있습니다. mysql 5.7이상의 명령어인지 확인을 다시 해봅니다.</p><p>2번 에러의 경우에는 비밀번호가 너무 쉽다는 것입니다. mysql에는 비밀번호 정책이 상 중 하로 나누어져 있는데 기본 설정은 MEDIUM입니다. 복잡한 비밀번호를 사용하기는 싫었기 때문에 저는 이것을 LOW로 변경할 것입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> global validate_password_policy=<span class="string">'LOW'</span>;</span><br><span class="line"><span class="comment"># 쿼리 성공!</span></span><br></pre></td></tr></table></figure><p>LOW로 설정되었다면 비밀번호는 8자 이상으로만 세팅하면 됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter user <span class="string">'root'</span>@<span class="string">'localhost'</span> identified by <span class="string">'8자 이상 패스워드'</span>;</span><br><span class="line">use mysql;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>이제 airflow 사용자를 만들어주고 database도 만들어줍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 사용자 생성</span></span><br><span class="line">create user <span class="string">'airflow'</span>@<span class="string">'localhost'</span> identified by <span class="string">'비밀번호'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># DB 권한 부여</span></span><br><span class="line">$ grant all privileges on *.* to <span class="string">'airflow'</span>@<span class="string">'localhost'</span>;</span><br><span class="line">$ grant all privileges on DB이름.* to <span class="string">'airflow'</span>@<span class="string">'localhost'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># database 생성</span></span><br><span class="line">create database airflow;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install <span class="string">'apache-airflow[mysql]'</span></span><br></pre></td></tr></table></figure><p>험난 했던 MySQL 세팅은 완료되었습니다.<br><br></br></p><h2 id="4-Airflow-설치-및-세팅"><a href="#4-Airflow-설치-및-세팅" class="headerlink" title="4. Airflow 설치 및 세팅"></a>4. Airflow 설치 및 세팅</h2><p>이제 Airflow를 설치해봅시다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum update -y</span><br><span class="line"></span><br><span class="line">$ sudo yum install group <span class="string">"Development tools"</span> -y</span><br><span class="line"></span><br><span class="line">$ sudo yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel python3-devel.x86_64 cyrus-sasl-devel.x86_64 -y</span><br><span class="line"></span><br><span class="line">$ sudo yum install libevent-devel -y</span><br><span class="line"></span><br><span class="line">$ sudo pip3 install apache-airflow</span><br></pre></td></tr></table></figure><p>설치가 완료되었다면 airflow 폴더애 있는 airflow.cfg를 수정해서 앞서 설치한 redis와 mysql을 airflow와 이어줘야 합니다.</p><p><strong>하지만 아무리 찾아봐도 airflow 폴터가 보이지 않습니다. 분명히 설치를 했는데!</strong></p><p>airflow를 입력해서 airflow 명령어가 동작하는지 먼저 확인합니다. 만약 명령어가 작동한다면 아까 설정해둔 <code>AIRFLOW_HOME</code>경로에 airflow 폴더가 생성될 것입니다. 그 안에 configuration 파일이 있습니다.</p><p>만약 <code>airflow: command not found</code>에러가 발생한다면 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:~/.<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure><p>환경변수를 조정해서 airflow가 bin에서 실행되도록 합니다.</p><h3 id="airflow-cfg-설정"><a href="#airflow-cfg-설정" class="headerlink" title="airflow.cfg 설정"></a>airflow.cfg 설정</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 사용할 dag 폴더 지정</span></span><br><span class="line"><span class="comment"># subfolder in a code repository. This path must be absolute. 꼭 절대경로!</span></span><br><span class="line">dags_folder = /home/ec2-user/airflow/dags</span><br><span class="line"></span><br><span class="line"><span class="comment"># executor = SequentialExecutor</span></span><br><span class="line">executor = CeleryExecutor</span><br><span class="line"></span><br><span class="line"><span class="comment"># sql_alchemy_conn = sqlite:////home/airflow/airflow/airflow.db</span></span><br><span class="line">sql_alchemy_conn =  mysql+pymysql://airflow:비밀번호@127.0.0.1:3306/airflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># catchup_by_default = True</span></span><br><span class="line">catchup_by_default = False</span><br><span class="line"></span><br><span class="line"><span class="comment"># broker_url = sqla+mysql://airflow:airflow@127.0.0.1:3306/airflow</span></span><br><span class="line">broker_url = redis://airflow@127.0.0.1:6379/0</span><br><span class="line"></span><br><span class="line"><span class="comment"># result_backend = db+mysql://airflow:airflow@localhost:3306/airflow</span></span><br><span class="line">result_backend = db+mysql://airflow:비밀번호@127.0.0.1:3306/airflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># load_examples = True</span></span><br><span class="line">load_examples = False</span><br></pre></td></tr></table></figure><p>이 정도만 세팅 해줍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install boto3</span><br><span class="line">sudo pip3 install celery</span><br><span class="line">sudo pip3 install redis</span><br></pre></td></tr></table></figure><p>실행에 필요한 라이브러를 설치해주고 airflow db를 초기화 해봅시다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airflow initdb</span><br></pre></td></tr></table></figure><p>Done!이 나왔다면 성공입니다.</p><hr><p><br></br></p><h2 id="Airflow-실행"><a href="#Airflow-실행" class="headerlink" title="Airflow 실행"></a>Airflow 실행</h2><p>Airflow는 스케쥴러, 웹서버, 워커로 구성되어있습니다. 하나하나 백그라운드로 실행시켜줍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nohup airflow webserver &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">nohup airflow scheduler &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># queue를 설정했다면 -q를 통해 추가한다</span></span><br><span class="line">nohup airflow worker &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p><img src="/images/airflow_on_ec2/airflow_ui.png" alt="됐다!!!!!"></p><p>웹 UI가 예쁘게 뜬다면 성공입니다!</p><p>example dag를 실행해보고 안된다면 백그라운드로 실행된 프로세스를 종료한 뒤 nohup명령어를 빼고 실행합니다. 로그가 나오므로 해당 에러를 모두 해결한 뒤에 백그라운드로 실행시켜 주면 완료가 됩니다.</p><hr><p><br></br></p><h2 id="자잘한-에러-핸들링"><a href="#자잘한-에러-핸들링" class="headerlink" title="자잘한 에러 핸들링"></a>자잘한 에러 핸들링</h2><ol><li><p><code>Exception: Global variable explicit_defaults_for_timestamp needs to be on (1) for mysql</code></p><p> 위 에러가 등장한다면 mysql에서 timestamp 설정을 변경해 주어야 한다.</p><p> root 계정으로 들어가서 아래 명령어를 실행해준다.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL explicit_defaults_for_timestamp = 1;</span><br></pre></td></tr></table></figure></li><li><p><code>ModuleNotFoundError: No module named &#39;MySQLdb&#39;</code></p><p>  또는 OSError: mysql_config not found 이런 에러 메세지로 등장할 수 있다.</p><p> 아래 명령어로 해결한다.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install mysql-devel</span><br><span class="line"></span><br><span class="line">pip3 install <span class="string">'apache-airflow[mysql]'</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://airflow.apache.org/docs/">https://airflow.apache.org/docs/</a></p><p><a href="https://boomkim.github.io/2020/01/08/airflow-install-amazon-linux-2/">https://boomkim.github.io/2020/01/08/airflow-install-amazon-linux-2/</a></p><p><a href="https://openmind8735.com/aws/redis/2017/07/21/aws-ec2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%97%90-redis-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/">https://openmind8735.com/aws/redis/2017/07/21/aws-ec2-인스턴스에-redis-설치하기/</a></p><p><a href="https://serverfault.com/questions/894457/amazon-linux-2-ami-aws-how-to-install-mysql-in-amazon-linux-2">https://serverfault.com/questions/894457/amazon-linux-2-ami-aws-how-to-install-mysql-in-amazon-linux-2</a></p><p><a href="https://lemontia.tistory.com/943">https://lemontia.tistory.com/943</a></p><p><a href="https://m.blog.naver.com/aim4u/221766568746">https://m.blog.naver.com/aim4u/221766568746</a></p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/12/13/airflow-on-ec2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>데이터 사이언스를 위한 네트워크 Part 2</title>
      <link>http://tkdguq05.github.io/2020/11/29/network-part2/</link>
      <guid>http://tkdguq05.github.io/2020/11/29/network-part2/</guid>
      <pubDate>Sun, 29 Nov 2020 09:20:50 GMT</pubDate>
      <description>
      
        &lt;p&gt;Part 1에서 다룬 이론을 바탕으로 AWS 화면과 친숙해지자&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Part 1에서 다룬 이론을 바탕으로 AWS 화면과 친숙해지자</p><a id="more"></a><h1 id="데이터-사이언스를-위한-네트워크-Part-2"><a href="#데이터-사이언스를-위한-네트워크-Part-2" class="headerlink" title="데이터 사이언스를 위한 네트워크 Part 2"></a>데이터 사이언스를 위한 네트워크 Part 2</h1><p>이번 글에서는 AWS를 다루면서 보는 익숙하지만 생소한 용어들에서 다루려고 합니다. 자주봐서 익숙하기는 하지만 어떤 역할을 하는지, 어떤 개념인지는 잘 모르고 넘어가는 경우가 많습니다. 경험 상 이러한 개념적인 부분이 제대로 다져지지 않으면 업무를 할때마다 찾아보게 되서 생산성이 낮아지곤 했습니다. 이번 글을 통해 개념을 제대로 다지는 계기가 되었으면 좋겠습니다.</p><h2 id="AWS-GCP는-뭐에요"><a href="#AWS-GCP는-뭐에요" class="headerlink" title="AWS? GCP는 뭐에요?"></a>AWS? GCP는 뭐에요?</h2><p>AWS란? 이라고 검색했을때 나오는 결과들은 대체로 ‘클라우드 컴퓨팅 플랫폼’이라고 설명하고 있습니다. 클라우드 컴퓨팅 플랫폼 서비스라고 하면 Amazon같은 거대한 회사에 있는 거대한 서버를 비용을 지불하고 내가 쓸 만큼만 사용하는 서비스라고 생각하실 겁니다. 맞습니다. 하지만 한 발자국 더 들어가서 생각해보면, ‘내가 쓸 만큼? 어떻게 내가 쓰는 부분을 따로 나눌 수 있는거지?’라는 의문이 생길 수 있습니다. 실제로 사용하면서도 어떻게 내 것만 잘 분리가 되는지 의문이 드실 수 있습니다.</p><h3 id="VPC-Virtual-Private-Cloud"><a href="#VPC-Virtual-Private-Cloud" class="headerlink" title="VPC(Virtual Private Cloud)"></a>VPC(Virtual Private Cloud)</h3><p>AWS는 VPC를 이용해서 다른 사용자와 나를 분리시킵니다. 설명에 들어가기 전에 먼저 VPN에서 다뤄보겠습니다. VPN은 Virtual Private Network으로 실제로는 같은 네트워크 망에 있지만, 논리적으로 다른 네트워크인 것처럼 동작하는 것을 말합니다. VPC역시 같은 클라우드지만, 논리적으로 구역을 나눠놓은 것입니다.</p><p><img src="/images/network_part2/vpc1.png" alt=""></p><p><img src="/images/network_part2/vpc2.png" alt=""></p><p>VPC를 사용하게 되면 위 그림에서 아래 그림으로 구조가 변경됩니다. 복잡하던 시스템이 간단하게 바뀌었고 각각의 VPC는 완전히 독립된 네트워크처럼 작동할 수 있게 됩니다.</p><p>VPC를 구축하기 위해서는 사설 아이피, Private IP 대역에 맞춰야 합니다. 일반적인 IP는 Public IP로, 외부에서 사용하는, 한 곳에서만 사용할 수 있는 아이피입니다. 어떤 사람이 IP를 점유했다면, 그 IP는 다른 사람이 사용할 수 없습니다. Private IP는 내부 사용자들끼리 사용하는 IP입니다. 따라서 192.168.0.53이라는 IP는 누군가의 집 컴퓨터에서 사용하고 있는 Private IP일 수 있습니다. 결론적으로 클라우드 서비스 시스템은 어떻게 내가 사용할 클라우드를 나누냐면, 이 Private IP 범위를 이용해서 구역을 나누어 관리하는 것입니다. </p><p>Public IP와 Private IP가 쉽게 다가오지 않을 수 있을 것 같습니다. 비유를 해보자면, 서울시 강남구 XX아파트 1302동 704호는 Public IP라고 할 수 있고 그 집 내부의 안방은 Private IP라고 할 수 있습니다. 아파트의 주소는 세상에 딱 하나이지만, 안방은 어떤 집에서도 갖고 있는 곳이기 때문입니다.</p><p>이렇게 한번 설정된 아이피 대역은 수정이 불가하며 각 VPC는 하나의 리전에 종속됩니다. 각각의 VPC는 완전히 독립적이며, 만약 VPC간 통신을 원한다면 VPC 피어링 서비스를 고려해볼 수 있습니다.</p><h3 id="서브넷"><a href="#서브넷" class="headerlink" title="서브넷"></a>서브넷</h3><p><img src="/images/network_part2/subnet.png" alt=""></p><p>이제 서브넷을 구성할 수 있습니다. 처음 AWS EC2를 만들 때 어렵고 난감했던 개념이 서브넷이였습니다. 서브넷은 그림에서 보듯이 VPC를 더 잘게 쪼갠 것입니다. 목적에 따라서 퍼블릭 또는 프라이빗으로 설정할 수 있습니다. 퍼블릭은 누구나 들어올 수 있도록 설정한 것이고, 프라이빗은 특정 대상만 들어오는 것을 허용한다는 것입니다. 누구나 들어올 수 있다는 것은 인터넷 통신이 자유롭다는 말입니다.</p><p>보통 회사에서는 보안 때문에 프라이빗 서브넷을 구성해놓고 특정 대역을 열어 서비스하는 경우가 많습니다. 그런데 만약 프라이빗 서브넷의 EC2 인스턴스에서 텐서플로를 사용할 일이 있어 <code>pip install tensorflow</code> 를 한다면 어떻게 될까요? 프라이빗 서브넷은 인터넷 통신이 자유롭지 않기 때문에 별도의 설정이 없다면 설치가 되지 않을 것입니다.</p><h3 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h3><p>그래서 NAT 게이트웨이가 필요합니다. NAT 게이트 웨이는 프라이빗 서브넷이 인터넷과 통신하기 위한 아웃바운드 인스턴스입니다. 프라이빗 네트워크가 외부에서 요청되는 인바운드는 필요 없더라도 인스턴스의 펌웨어나 혹은 주기적인 업데이트가 필요하여 아웃바운드 트래픽만 허용되야 할 경우가 있습니다. 이때 퍼블릭 서브넷 상에서 동작하는 NAT 게이트웨이는 프라이빗 서브넷에서 외부로 요청하는 아웃바운드 트래픽을 받아 인터넷 게이트웨이와 연결합니다. 이렇게 되면 프라이빗 서브넷 안에서도 자유롭게 텐서플로를 설치할 수 있습니다.</p><h3 id="보안그룹"><a href="#보안그룹" class="headerlink" title="보안그룹"></a>보안그룹</h3><p>위에 개념을 숙지하고 호기롭게 AWS 클라우드를 이용하려고 하면 두 번째로 마주치는 벽이 바로 보안그룹입니다. 일종의 방화벽으로 쉽게 말하자면, 허용할 IP대역과 Port를 지정하는 것입니다. 관리하는 부분은 인바운드 트래픽과 아웃바운드 트래픽입니다. 보통 아웃바운드 트래픽은 제한을 걸어두지 않습니다. 네트워크가 나가는 것이기 때문에 크게 신경을 쓰지 않는 경우가 대부분입니다. 중요한 것은 들어오는, 인바운드 트래픽입니다. 회사나 집에 아무나 들어올 수 없는 것처럼, 클라우드에서도 보안그룹을 이용해서 들어올 인터넷 통신을 관리합니다. 방화벽 역할을 하는 것에는 사실 네트워크 ACL도 있지만 생략하도록 하겠습니다. 만약 보안정책인 네트워크 ACL과 보안그룹이 충돌한다면 보안그룹이 더 높은 우선순위를 갖습니다.</p><h3 id="Port-amp-Protocol"><a href="#Port-amp-Protocol" class="headerlink" title="Port &amp; Protocol"></a>Port &amp; Protocol</h3><p>보안그룹 설정을 실제로 하려고 들어가면 설정할 것이 Port와 Protocol입니다. 프로토콜을 먼저 선택하게 되는데, 실제로 클릭하게 되면 각종 알수없는 영어들의 리스트가 주르륵 흘러나옵니다. 대표적인 몇 가지만 알아보도록 하겠습니다.</p><p><img src="/images/network_part2/list.png" alt="실제 AWS에서 나오는 화면"></p><p>프로토콜 유형에서 <code>모든 트래픽</code>을 기준으로 설명을 할 수 있을 것 같습니다. 모든 트래픽의 윗 부분은 TCP/UDP에 관한 내용이고 그 아랫부분은 well-known 포트로 많이 사용하는 포트에 대해서 미리 지정해 놓은 것입니다. 보통 well-known 포트는 0~1023의 범위입니다.</p><h3 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP / UDP"></a>TCP / UDP</h3><p>TCP와 UDP는 OCI 7 Layer에서 4번째 Layer인 Transport Layer에 해당됩니다. 이 레이어의 역할은 저번 글에서도 다뤘듯이, End to End 서비스 , 커넥션(연결)을 관리하고 서비스와 서비스의 연결을 관리하며 TCP UDP 소켓을 통한 프로세스 별 통신을 하게 됩니다. 이 레이어에서는 port to port로 통신, 데이터는 segment라고 불리우고 있습니다. TCP와 UDP는 성격이 조금 다릅니다. TCP는 통신에서 정확성(신뢰성 있는 전송기능)을 중시한다면 UDP는 속도를 더 중시합니다.</p><p>TCP 프로토콜은 언제 사용할까요? 은행 서비스를 생각해 봅시다. 빠른 속도를 위해 신뢰성은 신경쓰지않고 은행 서비스를 구축했고 가족에게 1억원을 송금했습니다. 그런데 처리되는 도중에 에러가 발생해 1만원을 보낸 것이라고 처리가 되었습니다. 재앙이 발생했습니다.</p><p>TCP는 이렇듯 신뢰성있는 데이터 전송(RDT, Reliable Data Transfer)이 필요할 때 사용하게 됩니다. 그 외에 연결 제어, 흐름 제어, 혼잡 제어 기능을 수행할 수 있습니다.</p><p>UDP는 TCP에 비해 간단합니다. TCP에서 제공하는 기능을 제공하지 않으면 UDP기 때문입니다. 기능이 적어졌으므로 굉장히 가벼워 Overhead가 매우 적습니다. 따라서 많은 요청에 대해서 처리해야 하고, 신뢰성이 필요하지 않은 서비스에서 유용하게 사용됩니다. 혹시 UDP가 익숙하지 않으신가요? </p><p><img src="/images/network_part2/starcraft.png" alt="야 UDP하라고"></p><p><strong>학교 컴퓨터실에서 스타크래프트</strong>를 할 때 방을 만들때면 꼭, UDP를 사용했었던 것이 어렴풋이 기억이 나실 수도 있겠습니다. 이렇듯, 온라인 게임이나 DNS, 음성 인터넷 프로토콜, 동영상 서비스 등에서 UDP 프로토콜을 사용하고 있습니다.</p><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://medium.com/harrythegreat/aws-%EA%B0%80%EC%9E%A5%EC%89%BD%EA%B2%8C-vpc-%EA%B0%9C%EB%85%90%EC%9E%A1%EA%B8%B0-71eef95a7098">https://medium.com/harrythegreat/aws-가장쉽게-vpc-개념잡기-71eef95a7098</a></p><p><a href="https://brunch.co.kr/@toughrogrammer/15">https://brunch.co.kr/@toughrogrammer/15</a></p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/11/29/network-part2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>데이터 사이언스를 위한 네트워크 Part 1</title>
      <link>http://tkdguq05.github.io/2020/11/29/network-part1/</link>
      <guid>http://tkdguq05.github.io/2020/11/29/network-part1/</guid>
      <pubDate>Sun, 29 Nov 2020 08:58:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;막상 공부하기는 귀찮은 네트워크에 대해 공부해보자&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>막상 공부하기는 귀찮은 네트워크에 대해 공부해보자</p><a id="more"></a><h1 id="데이터-사이언스를-위한-네트워크-Part-1"><a href="#데이터-사이언스를-위한-네트워크-Part-1" class="headerlink" title="데이터 사이언스를 위한 네트워크 Part 1"></a>데이터 사이언스를 위한 네트워크 Part 1</h1><h2 id="왜-네트워크를-공부하게-되었나"><a href="#왜-네트워크를-공부하게-되었나" class="headerlink" title="왜 네트워크를 공부하게 되었나?"></a>왜 네트워크를 공부하게 되었나?</h2><p>데이터 분야의 많은 분들이 자주 접하시지만 잘 느끼지 못하는 부분 중에 하나가 네트워크라고 생각합니다. 저만 하더라도 데이터 엔지니어링 업무를 맡기 전까지는 데이터가 어떻게 전달되고 받는 것인지 몰랐고, 알 필요도 없다고 생각했습니다. 하지만 업무를 진행하면 할 수록, 특히 AWS를 자주 접하게 될 수록 벽에 부딪히는 느낌이 들었습니다. 두 가지 벽이었는데 하나는 컴퓨터가 어떻게 작동하는지 모른다는 점이었고(CS, OS영역) 다른 하나는 네트워크에 대한 것이었습니다. 이 한계를 극복하고자 공부를 시작했고 이를 통해 조금이나마 넓어진 시야를 얻게되어 제가 갖게된 지식의 일부분을 잘 정리해보려고 합니다. </p><p>Part 1에서는 전반적인 개요와 이론적인 설명 -OSI 7 Layer에 대해서 설명할 예정이며, Part2에서는 AWS를 사용할 때 자주 등장하는 용어들에 대한 정리와 설명을 할 예정입니다.</p><h2 id="네트워크"><a href="#네트워크" class="headerlink" title="네트워크"></a>네트워크</h2><p>네트워크는 <code>소셜</code>이라는 말과 같이 있을 때 훨씬 더 친숙하게 느껴지는 것 같습니다. ‘소셜 네트워크 서비스’란 사용자 간의 자유로운 의사소통과 정보 공유, 그리고 인맥 확대 등을 통해 사회적 관계를 생성하고 강화해주는 온라인 플랫폼을 의미합니다. 이 SNS에서 가장 중요한 부분은 이 서비스를 통해 사회적 관계망을 형성하는 것입니다.(출처: 위키백과)</p><p>결국 네트워크는 어떤 망이라는 것을 뜻합니다. 소셜 네트워크는 사람 간의 사회적인 관계망을 의미하고, 우리가 파고들 네트워크는 인터넷 망, 그리고 컴퓨터 연결 망을 뜻하는 것입니다.</p><p>위키백과에서는 네트워크를 다음과 같이 설명합니다. “컴퓨터 네트워크 또는 컴퓨터망은 노드들이 자원을 공유할 수 있게 하는 디지털 전기통신망의 하나. 즉, 분산되어 있는 컴퓨터를 통신망으로 연결한 것을 말한다. 컴퓨터 네트워크에서 컴퓨팅 장치들은 노드 간 연결을 사용하여 서로에게 데이터를 교환한다.”</p><p>네트워크의 구조는 집단 크기와 사용자의 대역폭에 따라 달라집니다. 사람이 얼마나 많이 쓰느냐에 따라 구조를 바꿔야 되는 것입니다.  업종에 따라서도 달라질 수 있습니다. 서비스의 중요도에 따라서 달라지는 것인데, 예를 들어 공공기관과 게임 업종의 네트워크의 구조는 그 서비스의 중요도에 따라서 차이가 나게 됩니다.</p><p>네트워크의 통신은 서버-클라이언트 방식, 그리고 익숙한 P2P(Peer to Peer)가 있습니다. 네트워크를 구성하는 형태는 다양하며 대표적으로 star, ring, mesh, bus, tree, redundancy가 있습니다. 소개만 하고 넘어가겠습니다.</p><p>네트워크는 집단의 크기나 서비스의 중요도나 대역폭에 따라 달라진다고 앞서 말씀 드렸습니다. 이에 따라 크게 세 종류로 나눠볼 수 있습니다. 홈 네트워크, 기업용 네트워크, 그리고 클라우드 네트워크 입니다.</p><p>네트워크의 종류에 따라 인터넷이 거치게 되는 경로가 달라지게 되는데 간단하게 요약하자면 다음과 같습니다.</p><ol><li>홈 네트워크<ul><li>인터넷→ISP(회선 업체)→모뎀(모뎀에는 한 대의 컴퓨터만 연결)→공유기(여러대 사용가능)→컴퓨터</li></ul></li><li>기업용 네트워크<ul><li>ISP → 전용선 → 라우터 → 방화벽 → L3 백본 → L2 스위치 → 서버,컴퓨터 → L4 로드밸런서 → DMZ(외부 공개)</li></ul></li><li>클라우드 네트워크(AWS)<ul><li>인터넷 → Route53(DNS 서비스) → IGW → VPC → ELB → Auto Scaling → Security Group → EC2</li></ul></li></ol><p>홈 네트워크의 경로만 눈에 익숙하고 다른 경로들에서는 낯선 용어들이 많이 보일 것으로 생각됩니다. 그나마 클라우드 네트워크에서 조금 다뤄본 용어들이 등장하는 것 같습니다. 이제 본격적으로 네트워크를 다뤄보면서 용어들에 익숙해져 보도록 하겠습니다.</p><hr><h2 id="OSI-7-Layer-Open-Systems-Interconnection"><a href="#OSI-7-Layer-Open-Systems-Interconnection" class="headerlink" title="OSI 7 Layer(Open Systems Interconnection)"></a>OSI 7 Layer(Open Systems Interconnection)</h2><p>네트워크에 대해서 조금 맛 만이라도 본 분들은 OSI 7 Layer를 들어보셨을 것입니다. 네트워크 하면 바로 나오는 게 사실 OSI 7 Layer입니다. 하지만 누군가가 갑자기 와서 Layer 4가 뭐지 라고 물어보거나 OSI 7 Layer 자체가 무엇이냐고 물어보면 당황하는 표정을 숨기며 애써 뭐였지 뭐였지 배웠는데, 기억하는 척을 하는 자신을 만나게 될 것입니다. </p><p>이제 OSI 7 Layer에 대해 알아보면서 데이터의 흐름이 어떻게 되는 건지 파악하면서 자연스럽게 머리에 남겨 보도록 합시다.</p><p>OSI 7 Layer는 개방형 시스템으로, 네트워크 프로토콜과 통신을 7계층으로 표현한 것입니다. 프로토콜을 기능 별로 나누고 계층 별로 구분을 하기 위해서 만들어 졌습니다. 이렇게 나눈 이유는 벤더 간에 호환성을 위한 <strong><code>표준</code></strong>이 필요했기 때문입니다. 이런 체계가 잡힌 이후에 표준에 의한 용이성과 쉬운 접근성, 그리고 유지관리의 수월성을 통해 기술의 발전이 일어나게 되었고 지금처럼 네트워크의 트래픽 흐름을 살펴볼 수 있게 되었습니다. 자잘한 역사는 넘어가도록 하겠습니다.</p><h3 id="OSI-7-Layers의-구조"><a href="#OSI-7-Layers의-구조" class="headerlink" title="OSI 7 Layers의 구조"></a>OSI 7 Layers의 구조</h3><p><img src="/images/network_part1/layers.png" alt="OSI 7 Layers"></p><p>아래로 갈수록 기계가 받아들이기 쉬운 언어이며 위로 갈수록 사람이 보기 편한 언어입니다. 즉, 전기적 신호가 인간이 이해하는 언어로 바뀌어 가는 과정이라고 보면 이해가 되실 겁니다. 이 레이어를 거치면서 어떻게 전기 신호가 인간에게 도달하는 지 살펴 보겠습니다. </p><p>간단하게 살펴보고 깊게 들어가보겠습니다. 가장 밑단의 Layer는 1단계부터 시작합니다. 1단계에서부터 시작하고 7단계로 올라가서 우리가 볼수있는, 인간에게 친숙한 변환된 정보를 마주하게 됩니다. </p><p>이제, 인터넷 선을 컴퓨터에 꽂겠습니다.</p><h3 id="Layer-1"><a href="#Layer-1" class="headerlink" title="Layer 1"></a>Layer 1</h3><p>Physical. <strong>물리 계층으로서 네트워크 하드웨어 전송 기술들로 구성되어 있습니다</strong>. </p><p>장치(컴퓨터)와 통신 매체 사이의 비정형 데이터의 전송을 담당하며 하드웨어 부분에 해당됩니다. 디지털 bit인 0,1을 전기 무선 또는 광 신호로 변환하고, 전송되는 방법과 제어 신호, 기계적 속성 등을 정의합니다. 데이터 전달의 역할만을 합니다. 대표적인 장비로는 케이블, 인터페이스(110V 220V), 허브, 리피터 등이 있습니다.</p><h3 id="Layer-2"><a href="#Layer-2" class="headerlink" title="Layer 2"></a>Layer 2</h3><p>Data Link. <strong>이더넷, 랜카드, MAC 통신을 담당하며 에러를 검출하고 재전송하는 역할을 합니다</strong>. </p><p>동일 네트워크 내에서 데이터를 전송하고 링크를 통해서 연결을 설정하고 관리하고 물리계층에서 발생할 수 있는 오류를 감지하고 수정합니다. 두 장치 간의 신뢰성 있는 정보 전송을 담당합니다. 전송 단위는 Frame이며 데이터 링크 계층은 MAC과 LLC로 이루어져 있습니다. 캡슐화하는 프레이밍과 흐름제어, 에러제어를 담당합니다. </p><ul><li>MAC(Media Access Control) 장비들이 통신하기 위한 각각의 일련번호</li><li>LLC(Logical Link Control)</li></ul><p>모뎀, 스위치, 브릿지가 대표적인 장비입니다.</p><hr><h3 id="Layer-3"><a href="#Layer-3" class="headerlink" title="Layer 3"></a>Layer 3</h3><p><strong>Network. IP통신과 라우팅을 담당합니다.</strong></p><p>다른 네트워크로 데이터를 전송하고 IP 주소로 통신 출발지 IP에서 목적지 IP로 데이터 통신 시 중간에서 어떻게 중계할 것 인가를 정합니다. 전송단위는 패킷이고 목적지까지 경로 설정을 합니다. 처리 데이터가 큰 경우에는 분할(패킷화)하고 전송 후에 목적지에서 재 조립하여 붙여진 sequence 넘버대로 메시지를 구현합니다. 대표적인 장비로는 L3 스위치, 라우터가 있습니다.</p><h3 id="Layer-4"><a href="#Layer-4" class="headerlink" title="Layer 4"></a>Layer 4</h3><p><strong>Transport. TCP / UDP 통신 후 어떤 서비스를 할지 결정합니다.</strong></p><p>호스트 간의 데이터(서비스) 전송을 포트로 정의해주는 레이어로 오류 복구 및 흐름 제어, 완벽한 데이터 전송을 보장합니다. TCP/UDP 방식이 존재하고 전송단위는 세그먼트이며 이 레이어 부터 소프트웨어 레벨에 해당합니다<strong>.</strong> 포트를 제어한다는 의미로 L4 로드밸런서가 있습니다. L4스위치는 3계층에서 온 트래픽을 분석하여 서비스 종류를 구분해 줍니다.</p><h4 id="로드밸런서의-역할"><a href="#로드밸런서의-역할" class="headerlink" title="로드밸런서의 역할?"></a>로드밸런서의 역할?</h4><p>EC2에서 로드 밸런서를 보셨을 겁니다. L4장비인 로드밸런서의 역할을 거의 그대로 하고 있다고 생각하면 됩니다. 로드밸런서는 날라오는 요청들을 받아서 잘 나누어 주는 역할을 합니다. 로드밸런서가 없다면, 요청이 한 곳으로 몰려서 비효율적으로 작업을 처리하게 되거나 심할 경우, 서버에 장애가 생겨 안정적인 서비스를 하기 힘들어집니다. </p><h3 id="Layer-5"><a href="#Layer-5" class="headerlink" title="Layer 5"></a>Layer 5</h3><p>Session. TCP/IP 통신 연결을 수립 유지 중단하는 역할을 합니다.</p><p>로컬 및 원격 애플리케이션 간의 IP/ Port 연결을 관리합니다.</p><p>Session Table에 구성되어 있으며 데이터는 테이블에 적혀있는 IP/Port로 연결됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -an <span class="comment">#명령어로 Session Table 확인가능</span></span><br></pre></td></tr></table></figure><h3 id="Layer-6"><a href="#Layer-6" class="headerlink" title="Layer 6"></a>Layer 6</h3><p>Presentation. 인코딩, 암호화 압축을 담당하고 데이터를 사람이 이해하도록 인코딩합니다.</p><p>사용자 프로그램과 네트워크 형식간에 데이터를 변환해 표현과 독립성을 제공합니다. 인코딩, 디코딩, 암호화, 압축이 이 레이어에 속하게 됩니다. ASCII, JPG, MPEG 등의 번역을 합니다.</p><h3 id="Layer-7"><a href="#Layer-7" class="headerlink" title="Layer 7"></a>Layer 7</h3><p>Application. 다양한 응용 서비스 계층입니다. HTTP, SMTP, 모바일 서비스 등이 여기에 해당됩니다. </p><p>응용 프로세스 간의 정보 교환을 담당하며, 사용자와 가장 밀접한 소프트웨어 단입니다. 이메일 서비스(SMTP), 파일전송(FTP)</p><h2 id="근데-데이터를-어떻게-전송하고-받는거지…"><a href="#근데-데이터를-어떻게-전송하고-받는거지…" class="headerlink" title="근데 데이터를 어떻게 전송하고 받는거지…"></a>근데 데이터를 어떻게 전송하고 받는거지…</h2><p>OSI 7 Layer를 공부해도 데이터가 어떻게 왔다갔다 하는지 잘 모르겠습니다. 이제 이론을 배웠으니 흐름이 어떻게 되는 건지 알아보도록 합시다. </p><p>데이터는 인캡슐레이션과 디캡슐레이션을 통해서 Layer 위로 올라가기도 하고 내려가기도 합니다. 인캡슐레이션은 쉽게 말해서 헤더를 붙이는 것을 말하고, 디캡슐레이션이란 헤더를 떼는 것을 말합니다. </p><p><strong>인캡슐레이션과 디캡슐레이션이 왜 필요한데요?</strong> 라고 물어보실 수 있습니다. 왜냐면 데이터 자체로는 상대방에게 전달이 되지 않기 때문입니다. 우리가 어떤 물건을 상대방에게 보내려고 할때 택배회사를 이용하는 것과 비슷하다고 보면 이해가 되실 겁니다. 물론 상대방에게 물건을 갖다가 주거나 앞에서 매몰차게 던지는 경우도 있긴 하지만, 품격있는 사회인인 우리는 택배회사를 이용한다고 가정해보겠습니다.</p><p>우리가 물건을 받으면 물건은 포장에 아름답게 쌓여져 있습니다. 우리는 소중한 존재이기에 예쁜 포장지로 쌓여져 있다고 생각해보겠습니다. 겉 리본을 풀고 예쁜 포장지를 풀고, 뾱뾱이를 제거하고 종이포장을 제거하고 … 해서 우리가 원하는 물건을 받게 됩니다. </p><p><img src="/images/network_part1/present.png" alt="데이터 받아라!"></p><p>데이터 역시 이와 같습니다. 데이터 또한 헤더로 쌓여져 있는 포장지를 디캡슐레이션 해나가서 최종단계인 Application 레이어에 도달해 우리가 이해할 수 있게 되어 있는 데이터를 마주하게 되는 것입니다.</p><p>다른 상대방에게 보낼 때는? 똑같이 역으로 예쁘게 포장을 해서 상대방에게 보내면 됩니다. </p><p>우리가 상대방에게 데이터를 전송한다고 해봅시다. 흐름은 다음 같습니다.</p><p>데이터(인코딩) → 세그먼트(Layer4) → 패킷(Layer3) → 프레임(Layer2) → 비트(Layer1)</p><p>인간이 이해하기 쉬운 형태로 되어있는 데이터가 기계가 이해할 수 있게 인코딩되고 헤더를 붙여나가면서, 최종적으로는 비트로 표현되어 다른 곳으로 보내어질 준비를 마치게 됩니다. </p><h4 id="OSI-7-Layer-요약"><a href="#OSI-7-Layer-요약" class="headerlink" title="OSI 7 Layer 요약"></a>OSI 7 Layer 요약</h4><table><thead><tr><th>Layer</th><th>PUD</th><th>Protocol</th><th>Device</th><th>Function</th></tr></thead><tbody><tr><td>7 (Application)</td><td>Data</td><td>HTTP, FTP, DNS, DHCP, SMTP, NFS, RTSP</td><td></td><td>사용자가 네트워크에 접근할 수 있도록 해주는 계층이다.사용자 인터페이스, 전자우편, 데이터베이스 관리 등 서비스를 제공한다.</td></tr><tr><td>6 (Presentation)</td><td>Data</td><td>JPEG, MPEG, SMB, AFP</td><td></td><td>데이터를 하나의 표현 형태로 변환한다.필요한 번역을 수행하여 두 장치가 일과되게 전송 데이터를 이해할 수 있도록 한다.</td></tr><tr><td>5 (Session)</td><td>Data(Payload)</td><td>SSH, TLS, ISO8327, Apple talk, NetBIOS</td><td></td><td>통신 세션을 구성하는 계층으로 포트(port) 연결이라고도 할 수 있다. 통신 장치 간의 상호 작용을 설정하고 유지하며 동기화한다. 사용자 간의 포트 연결(세션) 이 유효한지 확인하고 설정한다.</td></tr><tr><td>4 (Transport)</td><td>Segments</td><td>TCP, UDP, RTP, SCTP, SPX</td><td>Gateway</td><td>End to End Commnication전체메시지를 발신지 대 목적지 간 제어와 에러를 관리한다. 패킷들의 전송이 유효한지 확인하고 실패한 패킷은 다시 보내는 등 신뢰성 있는 통신을 보장하며 머리 말에는 Segment 가 포함된다.</td></tr><tr><td>3 (Network)</td><td>Packets</td><td>IP, ARP, ICMP, IGMP, RIP, IPX, DDP,OSPF, IS-IS, BGP</td><td>Router</td><td>다중 네트워크 링크에서 패킷을 발신지로부터 목적지로 최단 거리로 전달할 책임을 갖는다. 각 패킷이 시작지점에서 최종목적지까지 성공적으로 전달 되도록 한다.</td></tr><tr><td>2 (Data Link)</td><td>Frames</td><td>Ethernet, PPP, Wireless Len</td><td>Bridge, Switch</td><td>오류없이 한 장치에서 다른 장치로 프레임(비트의 모음)을 전달하는 역할로 스위치 같은 장비의 경우 MAC 주소를 이용하여 정확한 장치로 정보를 전달한다.</td></tr><tr><td>1 (Physical)</td><td>Bits</td><td>Ethernet, RS-232C,Modem</td><td>Hub, Reafiter</td><td>물리적 매체를 통해 비트 흐름을 전송하기 위해 요구되는 기능들을 조정한다.케이블, 연결 장치 등과 같은 기본적인 물리적 연결기의 전기적 명세를 정하고네트워크의 두 노드를 물리적으로 연결시켜준다.</td></tr></tbody></table><p>출처 : <a href="https://kin3303.tistory.com/247">https://kin3303.tistory.com/247</a></p><hr><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://ko.wikipedia.org/wiki/OSI_%EB%AA%A8%ED%98%95">https://ko.wikipedia.org/wiki/OSI_모형</a></p><p><a href="http://blog.naver.com/PostView.nhn?blogId=pst8627&logNo=221670903384">http://blog.naver.com/PostView.nhn?blogId=pst8627&amp;logNo=221670903384</a></p><p><a href="https://jhnyang.tistory.com/194">https://jhnyang.tistory.com/194</a></p><p><a href="https://kin3303.tistory.com/247">https://kin3303.tistory.com/247</a></p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/11/29/network-part1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>글또  5기 다짐하기</title>
      <link>http://tkdguq05.github.io/2020/11/15/geultto5/</link>
      <guid>http://tkdguq05.github.io/2020/11/15/geultto5/</guid>
      <pubDate>Sun, 15 Nov 2020 08:41:03 GMT</pubDate>
      <description>
      
        &lt;p&gt;글또 5기를 시작하며, 다짐하기.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>글또 5기를 시작하며, 다짐하기.</p><a id="more"></a><h1 id="글또-5기를-시작하며"><a href="#글또-5기를-시작하며" class="headerlink" title="글또 5기를 시작하며"></a>글또 5기를 시작하며</h1><p>막상 이 글을 적으려니 어떻게 시작해야 감이 잡히지 않았다. 그래서 지난 기수에 썼던 내 다짐글을 확인했다. <a href="https://tkdguq05.github.io/2020/02/24/geultto4/">글또 4기 다짐글</a><br>지난 번 글을 보니 꽤 들뜬 마음에 글을 작성한 느낌이 든다. 생각해보니, 9개월 전에 비해 요즘은 들뜰 일이 많이 없는 것 같다. 시간이 지나면서 무뎌지고 회사생활에 견디는 것으로 세월을 보내는 느낌이다. 글또 4기가 끝난 후에 한동안 글도 쓰지 않고 뒹굴 뒹굴 거리며 열심히 쳇바퀴 도는 삶을 지속했었다. 최근들어 이렇게 의미없이 살고 싶지 않다고 다짐했는데, 마침 글또 5기가 시작됐고 이전에 비해 좀 더 나은 글을 쓰면서 하루 하루를 다시 기록해봐야겠다고 마음먹었다.</p><p>지나고보니, 그렇게 지나간 시간이 너무나 아까웠기 때문이다.</p><h2 id="어떤-글을-쓸까-혹은-어떻게-성장할까"><a href="#어떤-글을-쓸까-혹은-어떻게-성장할까" class="headerlink" title="어떤 글을 쓸까, 혹은 어떻게 성장할까"></a>어떤 글을 쓸까, 혹은 어떻게 성장할까</h2><p>개발 관련 글은 다른 글과는 다르게 내가 경험하거나 공부한 내용들이 주이기 때문에, 글또 활동을 하며 어떤 글을 쓸지 결정하는 것은 어떻게 성장할지, 방향을 결정하는 것과 같다고 생각한다. 4기에서 썼었던 글을 쭉 보면, 논문 리뷰, pyspark, airflow 등 데이터 사이언스와 엔지니어링 그 사이인 것 같다. 사실 업무적으로는 추천시스템이나 모델링 관련 일을 더 많이 했는데, 새로 배운 개념들이 주로 엔지니어링 파트라 새로 얻은 내용을 주로 글로 작성했던 것 같다. (근데 지나고 보니 생각보다 글을 안쓴 것 같아서 민망하다.) 이번 5기에서도 엔지니어링 글들과 인프라 관련 글들을 작성해 나갈 것 같다. 회사에서의 담당 업무가 데이터 엔지니어링 쪽으로 옮겨졌기 때문이다. 옮겨졌다고 하니 강제적으로 배치된 느낌이긴 하지만, 사실 그렇지는 않고 엔지니어링 업무에 흥미가 생겼다. 그래서 거의 자원하다시피 된 것이고 관련 업무를 맡게 되었다. 엔지니어링 업무를 통해 실제로 서비스가 어떻게 돌아가고 데이터를 어떻게 흘려보내고 관리해야 하는 지에 알게 되어 재미를 느끼고 있다. 목표하는 바는 데이터 엔지니어링에 더 나아가 머신러닝 엔지니어링이지만, 일단 바닥을 잘 닦아볼 생각이다.</p><h2 id="글쓰기-외에-내년에는"><a href="#글쓰기-외에-내년에는" class="headerlink" title="글쓰기 외에, 내년에는"></a>글쓰기 외에, 내년에는</h2><p>글또 5기는 약 6개월 정도 진행될 예정이다. 그러니까 내년 5월까지인데, 연말도 되었고 앞으로 어떤 걸 해볼까에 대해서 처음으로 생각을 해보게 되었다. </p><p>사실 하고 싶은 건 많다. 예전부터 피아노를 배워보고 싶었고, 영상을 직접 찍고 편집해보고 싶기도 했다. 하지만 공부하고 운동하고 나면, 쉬느라 정신이 없었던 것 같다. 실제로 정신을 쓸 여유가 없었기도 했고, 연말 쯤 되니 아홉수 기운이 몰려와 안좋은 변화들을 마주하게 됐다. </p><p>많이 괴롭고 힘든 시기였지만, 어떻게 하겠는가? 이미 맞닥뜨린 상황에 좌절만 하고 있을 수는 없다. 최근에 MMA에 조금 빠지게 되면서 알게된 말이 있는데, 맥스 할러웨이의 <strong>“It is what it is”</strong>란 말이다. 맥스는 챔피언전에서 아주 훌륭하게 싸우고 판정에서 패배한 일이 있다. SNS에서도 많은 팬들과 선수들이 말도 안되는 일이라는 게시물을 남겼다. 하지만 맥스는  “It is what it was” 라며 패배를 받아들였고 파이터로서 바뀐 것은 없다고 말했다.<br><img src="/images/max.png" alt="it is what it is"></p><p>그래서 나도 좌절하지 않고 나아가기로 했다. 앞서 말한 것처럼 좌절하면서 보내버린 시간이 너무나 아깝기 때문이었다. 패배감에 빠져 내가 할 일을 못하게 되는 게 더 비참해 보였다. 그래서 올해의 마지막과 내년은 더 튼튼하게 살 예정이고 주변 사람들과 직장 동료들을 잘 챙기면서 앞으로 쭉 가볼 생각이다. 혼자만 잘 살기 보다는 동료들과 같이 성장하는 것을 더 선호하기 때문에, 같이 도와주고 끌어주면서 발전해 나가고 싶다.  </p><p>글이 조금 다른 쪽으로 많이 갔는데, 다시 돌아와서 내년에 내가 하고 싶은 것은 다음과 같다.  </p><h3 id="운동"><a href="#운동" class="headerlink" title="운동"></a>운동</h3><ul><li>꾸준히 하기, 주 3회 이상</li><li>쇠질 목표는 3대 350</li><li>달리기 목표는 5km 25분 안에 들어오기</li></ul><h3 id="학습"><a href="#학습" class="headerlink" title="학습"></a>학습</h3><ul><li>데이터 파이프라인 흐름 완벽하게 파악하기</li><li>사용하고 있는 스택의 기능 제대로 파악하기</li><li>Kubernetes kubeflow나 airflow에 적용하기</li><li>실시간 처리 모델 서비스 하기</li><li>데이터 엔지니어링 흐름이 다 보인다면 논문 보기</li><li>수학 공부 다시하기</li></ul><h3 id="삶"><a href="#삶" class="headerlink" title="삶"></a>삶</h3><ul><li>기술 분야 외에 다른 책, 두 달에 한 권은 읽기</li><li>핸드폰 사용시간 줄이기</li><li>자투리 시간이나 이동시간 활용하기</li><li>소중한 사람들을 잘 살피기</li></ul><p>대략적인, 글로 공개할 수 있는 목표는 이 정도인 것 같다. 언제 다 이룰 수 있을까 했지만, 꾸준히 하다보면 이루어지겠지. 이번 6개월도 열심히 살아보자!</p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/11/15/geultto5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SISG를 활용한 Fasttext에 대해서 알아보자</title>
      <link>http://tkdguq05.github.io/2020/08/14/Fasttext/</link>
      <guid>http://tkdguq05.github.io/2020/08/14/Fasttext/</guid>
      <pubDate>Fri, 14 Aug 2020 13:09:06 GMT</pubDate>
      <description>
      
        &lt;p&gt;자연어 처리 모델에 자주 사용되는 FastText를 뽀개보고 skipgram 모델과의 차이를 알아보자.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>자연어 처리 모델에 자주 사용되는 FastText를 뽀개보고 skipgram 모델과의 차이를 알아보자.</p><a id="more"></a><h1 id="Fasttext"><a href="#Fasttext" class="headerlink" title="Fasttext"></a>Fasttext</h1><p>출처 : <a href="https://en.wikipedia.org/wiki/FastText">Wikipedia</a><br>fastText는 Facebook의 AI Research lab에서 만든 단어 임베딩 및 텍스트 분류 학습을 위한 라이브러리입니다. 이 모델을 사용하면 단어에 대한 벡터 표현을 얻기 위해 비지도 학습 또는 지도 학습 알고리즘을 만들 수 있습니다.   </p><p>Fasttext는 위키피디아 설명에서 보듯이 Facebook에서 만들었고 그에 걸맞게 임베딩도 잘되고 성능도 우수한 편인 모델입니다. 실제로 지금 있는 회사에서도 자연어 처리를 할 때 Word2Vec이나 Fasttext의 도움을 받고 있습니다.  </p><p>오늘 살펴볼 내용은 Fasttext가 어떻게 학습을 하는지, 그리고 Skip gram 모델과 어떤 차이점이 있는지 입니다.<br>자연어 모델이나 Sequential 딥러닝 모델을 한번 쭉 살펴보신 분들은 이해가 빠를 수 있습니다. 하지만 글은 어렵지 않으니 천천히 따라오면 잘 이해할 수 있을 것입니다. 있을 것이라고 믿습니다.    </p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>기존의 embedding model은 unique word를 하나의 vector에 할당할 수 있었습니다. 그러나 이와 같은 방식은 vocabulary의 크기가 커지거나 rare word(못 봤었던 단어)가 많을수록 한계점을 내포하게 됩니다. 한계점이란 이러한 word들은 good word representation을 얻기 힘들다는 점입니다. 특히 현재까지의 word representation 기법들은 문자의 internal structure를 고려하지 않고 있기 때문에 학습이 더욱 힘들었습니다. 더 나아가 스페인어나 프랑스어의 경우 대부분의 동사가 40개 이상의 변형된 형태를 지니고 있는 복잡한 언어이기 때문에, 이러한 언어에서는 rare word 문제가 더욱 부각 됩니다. 이런 이유로 이처럼 형태학적인 특징이 풍부한 언어의 경우에는 subword 정보를 활용하여 rare word에 대한 한계점을 극복하고자 합니다. subword를 이용해서 vector representation을 개선시키고자 하는 것입니다. </p><h2 id="General-Model-Skip-gram"><a href="#General-Model-Skip-gram" class="headerlink" title="General Model, Skip-gram"></a>General Model, Skip-gram</h2><p>먼저 일반적인 모델인 skip-gram의 프로세스를 알아야 fasttext에 대해 잘 알 수 있습니다.<br><img src="/images/fasttext/model_explain.png" alt="skip-gram"><br>스킵 그램은 그림에서처럼 window size의 단어들을 슬라이딩 해 가면서 타겟 단어에 대해서 주변 단어들이 올 확률을 구해 나갑니다. 파란색으로 표시된 것이 타겟 단어이며 주위 단어들이 context word, 즉 주변 단어입니다. $w_t$와 $w_c$로 표현됩니다. 여기에 가정이 하나 추가되는데, context word는 조건부 독립(conditionally independent)이라는 가정입니다. </p><p><img src="/images/fasttext/skip-gram1.png" alt="skip-gram 모델"><br>위의 그림은 아까 살펴봤었던 과정을 모델의 관점에서 자세히 살펴보겠습니다. 레이어의 구성은 인풋 레이어, 히든 레이어, 아웃풋 레이어로 되어있습니다. 인풋 레이어에는 단어들이 들어가고 히든 레이어에는 타겟 단어에 대한 벡터값이 남습니다. 아웃풋 레이어 까지 거치게 되면 가중치 벡터들과 예측한 값이 나오게 되고 가중치 벡터에는 타겟단어와 주변단어들에 대한 가중치들이 저장되어 있습니다. 예측된 결과를 실제 값과 비교해서 각 단어들에 대한 loss값을 뽑아내게 되고 이것을 더하면 전체 loss값이 됩니다. </p><p>숫자를 통해서 이를 더 구체화 해보면 다음과 같습니다.<br><img src="/images/fasttext/skip-gram2.png" alt="skip-gram 계산 과정"></p><p>이렇게 계산되는 과정을 살펴보다 보면, 비효율적인 부분들이 발견됩니다. 어디일까요? 문제점을 발견하고 개선시켜나가 보겠습니다.</p><h2 id="Improvement"><a href="#Improvement" class="headerlink" title="Improvement"></a>Improvement</h2><h3 id="1-Row-Indexing"><a href="#1-Row-Indexing" class="headerlink" title="1. Row Indexing"></a>1. Row Indexing</h3><p><img src="/images/fasttext/row_indexing.png" alt="Row Indexing"><br>맨 처음 인풋이 들어간 부분과 $W_{input}$을 통해서 타겟에 대한 벡터값을 얻게 됩니다. 만약 들어가는 인풋 단어가 엄청나게 많다면 어떻게 될까요? 수 많은 계산을 일일이 해주어야 합니다. 하지만, 생각을 한번 바꿔보면 어떨까요? 인풋 단어들은 one-hot index로 되어 있습니다. 따라서 $W_{inpit}$의 row index를 그냥 가져오기만 하면 되지 않을까요? </p><p>이렇게 row index를 가져오면 계산을 효과적으로 줄일 수 있습니다. 결과적으로는 같지만 처리해야할 연산이 획기적으로 줄게 되는 것입니다.</p><h3 id="2-Negative-Sampling"><a href="#2-Negative-Sampling" class="headerlink" title="2. Negative Sampling"></a>2. Negative Sampling</h3><p><img src="/images/fasttext/negative_sampling.png" alt="Negative Sampling"><br>이번엔 다음부분으로 넘어가 봅시다. 어떤 부분이 비효율적일까요?<br>히든 레이어인 $h$와 $W_{output}$의 곱하는 부분과 softmax 계층의 병목이 보입니다. 생각해봅시다. latent vector $h$와 $W_{output}$도 역시 단어들이 많아지면 연산을 많이 처리해야 합니다. softmax 계층도 마찬가지입니다. 그러나 하나의 target word와 관련된 context word들은 window size내의 작은 word 정도밖에 안됩니다. 전체 단어를 굳이 다 처리해야 할 필요가 없는 것입니다. 즉, $h$와 $W_{output}$의 행렬 곱 연산은 인풋과 관련되어 있기 때문에 업데이트 되어야 할 단어는 몇 개 안되는데도 불구하고, vocabulary에 있는 모든 단어들과의 관계를 비교해야합니다. 여기서 비효율성이 발생하게 됩니다. </p><p>이를 해결하기 위해 <strong>Negative Sampling</strong>이 제안됩니다. Negative Sampling의 핵심은 지금의 multi-clas classification 문제를 간단한 binary classification 문제로 바꾸는 것입니다. 어떻게 바꿀까요?  </p><h4 id="How-to-Negative-Sampling"><a href="#How-to-Negative-Sampling" class="headerlink" title="How to Negative Sampling"></a>How to Negative Sampling</h4><p>먼저 알아야할 개념이 있습니다.   </p><ul><li>positive example: target word의 context word</li><li>negative example: target word의 context word가 아닌 word<br>우리는 context word를 1로 처리할 것이고, 아닌 단어들은 0으로 처리할 것입니다. 연산을 줄이기 위함입니다.  </li></ul><p><img src="/images/fasttext/negative_sampling_ex.png" alt="negative sampling example"><br>예를 들어보겠습니다. 위의 그림에서 dot product된 결과가 나오고 있습니다. (숫자는 임의로 입력한 값입니다) positive example들은 초록색으로 표시되어 label을 1로 처리하고, negative example들은 주황색으로 표시되어 label을 0으로 처리합니다. 이렇게 연산을 줄여서 처리한 뒤에 로스를 계산합니다. 단어가 많으면 많아질수록 줄어드는 연산의 양이 커질 것입니다. 그렇다면 의문점이 또 생깁니다. negative sampling을 하는 단어를 어떻게 정할까요?  </p><p>Negative Sampling은 Corpus 내에서 자주 등장하는 단어를 더 많이 추출하고 드물게 등장하는 단어는 적게 추출하고자 합니다. 이 목적을 달성하기 위해서 Probability distribution을 이용하는데 수식은 다음과 같습니다. </p><p><img src="/images/fasttext/ns_formula.png" alt="formula"><br>$f(w_i)$는 모든 corpus의 단어 중에서 특정 단어 $w_i$가 얼마나 들어있는지를 의미합니다. 따라서 위의 식에서 $P(w_i$은 전체 코퍼스에서 특정단어 $w_i$가 얼마나 있는지를 나타내는 식입니다. 빈도 수와 관계가 있다고 할 수 있겠습니다. 그러면 왜 $3\over4$ 라는 숫자를 사용할까요? 증명된 것은 없습니다. 논문에서 이 숫자를 사용했을 때 잘 되었던 것입니다. 이 파라미터는 수정이 가능하니 데이터에 맞게 조정하면 됩니다. </p><hr><p><img src="/images/fasttext/notation.png" alt="notation">  </p><p>우리가 지금까지 했었던 것을 간단하게 정리해 보겠습니다.<br><img src="/images/fasttext/skip_formula1.png" alt="skip gram formula1"><br>우리는 이 가정에서 출발했습니다. 가정을 이용해서 skip-gram 모델을 만들었습니다. 효율적으로 처리하기 위해 skip그램에 Row indexing을 사용했고 Negative sampling을 사용했습니다. 이를 통해서 우리가 얻고자 한 것은 다음의 수식입니다.</p><p><img src="/images/fasttext/skip_formula2.png" alt="skip gram formula2"><br>원래는 왼쪽의 수식의 값을 최대화 하는 것이었지만, 단어의 수가 많아지면 오른쪽의 수식으로 변경해 log-likielihood를 최대화 합니다. </p><p>context word가 올 확률에 대해서는 다양한 선택이 있겠지만  연산 후의 softmax 결과 값을 사용합니다.<br><img src="/images/fasttext/softmax.png" alt="softmax"></p><p>하지만 우리는 negative sampling을 통해 Multiclass Classification 문제를 Binary Classification로 변경했습니다. 결국 위의 softmax는 context 단어들의 존재 여부를 독립적으로 얘측에 대한 확률이 됩니다. </p><p>negative sampling에 의해서 골라진 contex word에 대한 포지션은 $c$로 표현됩니다. Binary Logistic loss에 의해서, 우리는 다음과 같은 negative log likelihood 값을 얻을 수 있습니다.<br><img src="/images/fasttext/skip_formula3.png" alt="negative log likelihood">  </p><p>밑 부분의 score값인 $s(w_t,w_c)$를 주의해서 봐주시기 바랍니다.   </p><p>이제 모든 타겟 단어에 대해서 다음과 같은 수식으로 정리가 되면, skip gram model에 대한 설명은 끝납니다.<br><img src="/images/fasttext/skip_objective.png" alt="skip gram objective"></p><hr><h2 id="Fasttext-SISG"><a href="#Fasttext-SISG" class="headerlink" title="Fasttext, SISG"></a>Fasttext, SISG</h2><p>Fasttext는 skip gram모델을 개선한 모델입니다. SISG(Subword Information Skip Gram)를 이용해 Skip gram모델의 성능을 개선합니다. SISG란 무엇일까요?</p><h3 id="SISG-Subword-Information-Skip-Gram"><a href="#SISG-Subword-Information-Skip-Gram" class="headerlink" title="SISG(Subword Information Skip Gram)"></a>SISG(Subword Information Skip Gram)</h3><p>SISG는 간단한 개념입니다. 각 단어 $w$는 n-gram의 bag을 담고 있다고 해봅시다. 이제 여기에 <code>&lt;</code>와 <code>&gt;</code>를 이용해서 단어의 시작과 끝을 알려줄 것입니다. 한 가지 더 <strong>단어 그 자체를 넣어 줄 것입니다.</strong> 각 단어 자체의 표현을 학습시키기 위함입니다. <code>where</code>이라는 단어의 처리에 관한 예를 들어봅시다.</p><p><img src="/images/fasttext/where.png" alt="how to process where"><br>n=3일 때의 예시입니다. 위의 예시처럼 <code>&lt;</code>,<code>&gt;</code>를 한 글자씩 처리해서 나누면 <code>re&gt;</code>로 끝나게 됩니다. 그런데 여기에 <code>&lt;where&gt;</code>도 같이 넣어주는 것이 핵심입니다. 이유를 생각해봅시다. 중간에 <code>her</code>이란 단어가 눈에 띄었을 겁니다. her는 단어로 처리되어야 할까요? 아닙니다. her은 그냥 단어의 조각일 뿐이며 subword에 해당됩니다. 진짜 단어였다면 <code>&lt;her&gt;</code>로 표현이 되어야 할 것입니다. </p><p>이렇게 만든 후에 n-gram의 벡터표현을 모두 더한 score 값을 구하면, 그것이 바로 SISG의 목적 함수가 됩니다. 아까 봤던 score함수가 바뀌었습니다. score함수만 바꿔주면 fasttext의 목적합수 입니다.<br><img src="/images/fasttext/sisg.png" alt="SISG Score">  </p><p>이를  pseudo code로 나타내면.<br><img src="/images/fasttext/pseudo_code.png" alt="pseudo code for computing loss"><br>(뒷부분에 neg가 아니라 neg_sample인데 오타가 있습니다.) 참고바랍니다.</p><p>마지막으로 평가에 대해서 입니다. 임베딩의 각 버전에 대해, 임베딩만을 기반으로 주어진 account 셋의 topic을 예측하도록 분류기를 훈련합니다. hold out set의 account에 대해 예측 된 주제를 사람이 라벨링 한 topic과 비교하여 임베딩이 topic의 유사성을 얼마나 잘 파악하는지 평가할 수 있습니다.  </p><hr><p>Fasttext는 Skip Gram 모델을 subword를 활용하자는 간단한 아이디어로 만들어진 모델입니다. 모델에서 활용되는 이런 센스들을 잘 익혀두면 다른 모델에 적용하거나, 다른 논문들을 읽을 때 큰 도움이 될 것 같습니다. </p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/08/14/Fasttext/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Kubernetes Beginning</title>
      <link>http://tkdguq05.github.io/2020/07/30/k8s-genesis/</link>
      <guid>http://tkdguq05.github.io/2020/07/30/k8s-genesis/</guid>
      <pubDate>Thu, 30 Jul 2020 00:35:47 GMT</pubDate>
      <description>
      
        &lt;p&gt;자 이제 쿠버네티스에 대해 공부해보자. Docker in kubernetes, k8s architecture, cluster, and pods.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>자 이제 쿠버네티스에 대해 공부해보자. Docker in kubernetes, k8s architecture, cluster, and pods.</p><a id="more"></a><p>지난 글들로부터 가상화에 대해서 공부했고, 도커에 대해서 살펴봤습니다. 쿠버네티스는 가상화와 도커가 기본이 되는 시스템입니다. 가상화와 도커에 대해서 기억이 잘 나지 않는다면 잠시 보고 와도 좋습니다.   </p><p><a href="https://tkdguq05.github.io/2020/07/03/docker/#more">인프라의 기초, Docker에 대해서 알아보자</a>.<br><a href="https://tkdguq05.github.io/2020/06/07/virtualization/#more">클라우드 서비스의 기초. Virtualization, 가상화에 대해서</a>  </p><hr><h1 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes?"></a>Kubernetes?</h1><p>쿠버네티스를 최초로 만들고 사용한 곳은 구글입니다. 시스템에 배포 가능한 어플리케이션 구성 요소의 수가 많아지면서 모든 구성 요소의 관리가 어려워질 수 밖에 없기 때문입니다. 구글은 전 세계에서 소프트웨어 구성 요소와 인프라를 잘 배치하고 관리하는 방법이 필요하다는 것을 최초로 깨달은 회사일 것입니다. 수십만 대의 서버를 운영하고 엄청난 규모의 배포관리를 처리하는 기업입니다. 이로 인해 구글은 수천 개의 소프트웨어 구성 요소를 관리하고 비용 효율적으로 개발, 배포할 수 있는 솔루션을 개발해야만 했습니다. 그래서 등장한 것이 쿠버네티스의 전신인 보그-오메가 이며, 2014년에 구글은 쿠버네티스를 출시하게 됩니다. 구글이 만든 시스템답게 정말 잘 됩니다!</p><p>만약 구글이 모놀리스 어플리케이션으로 개발을 했다면 어땠을까요? 아마 이 정도의 확장은 불가능 했을 것 입니다. 모놀리스 어플리케이션이란 한 덩어리처럼 개발을 하는 것입니다. 큰 돌로 이루어진 건축물에 비유를 할 수 있습니다. 이와 반대되는 개념은 마이크로스서비스 기반 어플리케이션입니다. 이는 단일 역할을 책임지는 여러 조각으로 구성된 소프웨어로 구성되어 있습니다. 구글은 각 부분이 알아서 잘 돌아가는 MSA구조로 이루어져 있기 때문에 이렇게 확장할 수 있었습니다. 그리고 그것을 가능하게 해준 것이 바로 쿠버네티스입니다.   </p><p>쿠버네티스는 컨테이너화된 어플리케이션을 쉽게 배포하고 관리할 수 있게 해주는 소프트웨어 시스템입니다. 어플리케이션은 컨테이너에서 실행되어 동일한 서버에서 실행되는 다른 어플리케이션에 영향을 주지 않아 동일한 하드웨어의 다른 조직의 어플리케이션이 실행될 때 영향을 주지 않습니다.  이를 통해 쿠버네티스를 사용하게 되면, 제공된 하드웨어를 최대한으로 사용할 수 있게 됩니다. 쿠버네티스를 활용하면 모든 노드가 하나의 거대한 컴퓨터 처럼 수천대의 노드에서 어플리케이션을 실행할 수 있습니다. </p><h2 id="Kubernetes을-사용하면-좋은-점"><a href="#Kubernetes을-사용하면-좋은-점" class="headerlink" title="Kubernetes을 사용하면 좋은 점"></a>Kubernetes을 사용하면 좋은 점</h2><h4 id="먼저-개발자가-어플리케이션-핵심-기능에-집중할-수-있게-됩니다"><a href="#먼저-개발자가-어플리케이션-핵심-기능에-집중할-수-있게-됩니다" class="headerlink" title="먼저 개발자가 어플리케이션 핵심 기능에 집중할 수 있게 됩니다."></a>먼저 개발자가 어플리케이션 핵심 기능에 집중할 수 있게 됩니다.</h4><p>쿠버네티스를 클러스터의 운영체제로도 생각할 수 있습니다. 이렇게 되면 어플리케이션 개발자가 특정 인프라 관련 서비스를 어플리케이션에 구현하지 않아도 됩니다. 쿠버네티스를 활용하면 되니까요. 쿠버네티스에는 서비스 디스커버리, 스케일링, 로드밸런싱, 자가치유, 리더선출 같은 것들이 들어갑니다. 따라서 어플리케이션 개발자는 기능을 구현하는 데 집중을 하면 되고, 인프라에 관련된 고민을 하지 않아도 됩니다.</p><h4 id="운영-팀이-효과적으로-리소스를-활용할-수-있습니다"><a href="#운영-팀이-효과적으로-리소스를-활용할-수-있습니다" class="headerlink" title="운영 팀이 효과적으로 리소스를 활용할 수 있습니다."></a>운영 팀이 효과적으로 리소스를 활용할 수 있습니다.</h4><p>쿠버네티스는 클러스터에 컨테이너화된 어플리케이션을 실행하고 구성 요소들 간에 연결되는 방법에 대한 정보를 제공하며, 이를 이용해 모든 어플리케이션이 계속 실행되도록 합니다. 어플리케이션은 어떤 노드에서 실행되든 상관이 없기 때문에 쿠버네티스는 언제든지 어플리케이션을 재배치하고 조합함으로써 주어진 리소스를 잘 활용할 수 있게 됩니다.</p><h2 id="Kubernetes-Architecture"><a href="#Kubernetes-Architecture" class="headerlink" title="Kubernetes Architecture"></a>Kubernetes Architecture</h2><p>쿠버네티스 클러스터가 어떻게 구성되어 있는지 알아봅시다. 쿠버네티스는 두 가지 유형으로 나눌 수 있습니다. 마스터 노드와 워커 노드입니다.  </p><ul><li>마스터 노드는 쿠버네티스 컨트롤 플레인을 실행합니다. 컨트롤 플레인은 전체 쿠버네티스 시스템을 제어하고 관리합니다.</li><li>워커 노드는 실제 배포되는 컨테이너 어플리케이션을 실행합니다.<br><img src="/images/kube_arc.png" alt="Kubernetes Cluster Architecture"></li></ul><h3 id="Control-Plain"><a href="#Control-Plain" class="headerlink" title="Control Plain"></a>Control Plain</h3><p>컨트롤 플레인은 클러스터를 제어하고 작동시키는 역할입니다. 하나의 마스터 노드에서 실행하거나 여러 노드로 분할되고 복제되어 고가용성을 보장할 수 있는 여러 구성 요소로 구성 되어 있습니다. 그 구성요소는 다음과 같습니다.</p><ul><li><p>Kubernetes API 서버 : 사용자 , 컨트롤 플레인 구성 요소와 통신한다.</p></li><li><p>Scheduler : 어플리케이션의 배포를 담당한다.(스케쥴링이라는 용어는 파드가 특정 노드에 할당됨을 의미합니다.) </p><ul><li><p>노드가 배정되지 않은, 새로 생성된 파드를 감지하고 실행할 노드를 선택하는 컨트롤 플레인 컴포넌트입니다. 스케쥴링 결정을 위해서 고려되는 요소들은 다음과 같습니다.  </p><ul><li>리소스에 대한 개별 및 총체적 요구 사항</li><li>하드웨어/소프트웨어/정책적 제약</li><li>어피니티(affinity) 및 안티-어피니티(anti-affinity) 명세</li><li>데이터 지역성</li><li>워크로드-간 간섭</li><li>데드라인</li></ul></li></ul></li><li><p>Controller Manager : 컨트롤러 매니저는 구성요소 복제본, 워커 노드 추적, 노드 장애 처리 등과 같은 클러스터 단의 기능을 수행한다.  </p></li><li><p><a href="https://github.com/etcd-io/etcd">etcd</a> : 클러스터 구성을 지속적으로 저장하는 신뢰할 수 있는 분산 데이터 저장소이다. </p></li></ul><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>워커 노드는 컨테이너화된 어플리케이션을 실행하는 시스템입니다. 어플리케이션을 실행하고 관리하며 서비스를 제공하는 작업은 다음 구성 요소에 의해 수행됩니다.</p><ul><li>Contianer Runtime : 컨테이너를 실행하는 도커나 rkt 등등</li><li>kubelet : API 서버와 통신하고 노드의 컨테이너를 관리한다.<ul><li>kubelet은 파드를 관리한다고 생각하면 됩니다. 클러스터의 각 노드에서 실행되는 에이전트로 kubelet은 파드에서 컨테이너가 확실하게 동작하도록 관리합니다. kubelet은 다양한 메커니즘을 통해 제공된 파드 스펙의 집합을 받아서 컨테이너가 해당 파드 스펙에 따라 원할하게(Health) 동작하게 합니다. kubelet은 쿠버네티스를 통해 생성되지 않은 컨테이너는 관리하지 않습니다. </li></ul></li><li>kube-proxy : 어플리케이션 구성 요소 간에 네트워크 트래픽을 로드밸런싱한다.<ul><li>kube-proxy는 클러스터의 통신을 담당합니다. 클러스터의 각 노드에서 실행되는 네트워크 프록시로, 쿠버네티스의 서비스 개념의 구현부입니다. kube-proxy는 노드의 네트워크 규칙을 유지 관리합니다. 이 네트워크 규칙이 내부 네트워크 세션이나 클러스터 밖에서 파드로 네트워크 통신을 할 수 있도록 해줍니다.<br>kube-proxy는 운영 체제에 가용한 패킷 필터링 계층이 있는 경우, 이를 사용합니다. 그렇지 않으면 kube-proxy는 트래픽 자체를 forward합니다.</li></ul></li></ul><h3 id="Kubernetes-cluster가-상호작용하는-방법"><a href="#Kubernetes-cluster가-상호작용하는-방법" class="headerlink" title="Kubernetes cluster가 상호작용하는 방법"></a>Kubernetes cluster가 상호작용하는 방법</h3><p>클러스터는 마스터와 노드들로 구성이 되어있고 각 노드들은 도커, kubelet, kube-proxy 데몬을 실행합니다. 우리가 설치한 kubectl 명령어를 실행하면 마스터 노드에 쿠버네티스 API 서버로 REST요청을 보내서 클러스터와 상호작용하게 됩니다.<br><img src="/images/kube_cluster.png" alt="노드 세 개인 쿠버네티스 클러스터와 상호작용하는 모습"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes</span><br></pre></td></tr></table></figure><p>이제 명령어로 node들을 확인할 수 있습니다.   </p><p>이렇게 간단하게 쿠버네티스 클러스터 구조에 대해 살펴봤습니다. </p><hr><h1 id="Docker-in-Kubernetes"><a href="#Docker-in-Kubernetes" class="headerlink" title="Docker in Kubernetes"></a>Docker in Kubernetes</h1><p>지난 번 도커 글을 연장해서 쿠버네티스로 이어지는 흐름을 만들어보겠습니다. 지난 도커 글에서는 간략한 소개만 했기 때문에 이미지와 이미지 레이어에 대한 이야기를 깊게 못해서 조금 더 설명을 해보겠습니다. </p><h2 id="Docker-Image"><a href="#Docker-Image" class="headerlink" title="Docker Image"></a>Docker Image</h2><p>우리가 어떤 어플리케이션을 만들었다고 가정합시다. 이 어플리케이션을 이미지로 구성해서 내 환경과 같이 만들어, 어떤 환경에서 누구나 작업하게 만들고 싶습니다. 이렇게 이미지로 패키징하기 위해서는 Dockerfile을 만들어야 합니다. 이 파일에는 도커가 이미지를 생성하기 위해 수행해야 할 지시 사항들이 담겨져 있습니다. 이 Dockerfile은 .py와 같은 파일과 같은 위치에 있어야 합니다. Dockerfile을 살펴보겠습니다.  </p><p>책 Kubernetes in Action의 예제를 사용하겠습니다.  </p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">7</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> app.js /app.js</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"node"</span>, <span class="string">"app.js"</span>]</span></span><br></pre></td></tr></table></figure><p>FROM은 기본 이미지로 사용할 컨테이너 이미지를 정의합니다. ADD는 로컬 디렉토리의 app.js 파일을 이미지의 루트 디렉토리에 동일한 이름으로 추가한다는 뜻입니다.  ENTRYPOINT는 이미지를 실행했을 때 수행돼야 할 명령어를 나타냅니다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t &lt;name&gt; .</span><br><span class="line"></span><br><span class="line"><span class="comment">#실제 사용</span></span><br><span class="line">$ docker build -t kubia .</span><br></pre></td></tr></table></figure><p>이 명령어를 이용하면 이름대로 이미지가 빌드됩니다. 도커에게 현재 디렉토리의 컨텐츠를 기반으로 이름으로 적힌 이미지를 빌드하라고 요청합니다. 도커는 Dockerfile을 보고 명령에 기반해 이미지를 빌드합니다. 이미지가 컴퓨터에 저장돼 있지 않으면, 도커는 Docker Hub에서 이미지를 다운 받습니다. 도커의 이미지는 하나의 큰 덩어리 파일이 아니라 여러개의 레이어로 구성됩니다. 그래서 빌드를 할 때 필요한 이미지가 있다면 필요한 이미지 레이어만 다운로드 하는 것 입니다. </p><p>도커 이미지를 배포하는 것은 저번 글에서 설명을 했습니다. 이제 컨테이너 이미지에 어플리케이션을 패키징하고 도커 허브를 통해 사용할 수 있게 됐습니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker tag kubia luksa/kubia</span><br><span class="line"></span><br><span class="line">$ docker push luksa/kubia <span class="comment"># 버전 명을 적지 않으면 최신 버전으로 알아서 작성해 주지만 시간이 더 걸립니다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 다른 머신에서 이미지 실행하기</span></span><br><span class="line">$ docker run -p 8080:8080 -d luksa/kubia</span><br></pre></td></tr></table></figure><p>이제 쿠버네티스 클러스터에 어플리케이션을 배포할 수 있게 됐습니다. 배포를 위해서는 쿠버네티스 클러스터가 필요합니다.  </p><p>쿠버네티스 클러스터를 구성하는 법은 다양합니다. mini kube를 설치하는 방법도 있고, AWS에 EKS나 GCP를 이용해서 node를 만들고 쿠버네티스 환경을 만들 수 있습니다. 각자의 환경이 구성되었다고 가정하고 진행하겠습니다.  </p><h2 id="Kubernetes-client-설치"><a href="#Kubernetes-client-설치" class="headerlink" title="Kubernetes client 설치"></a>Kubernetes client 설치</h2><p>kubectl CLI 클라이언트가 있어야 쿠버네티스를 다룰 수 있습니다.   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* 리눅스 기준</span><br><span class="line"><span class="comment">#파일 다운로드</span></span><br><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s \</span><br><span class="line">   https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl</span><br><span class="line"><span class="comment">#파일 권한 변경</span></span><br><span class="line">chmod +x ./kubectl</span><br><span class="line"><span class="comment">#파일을 PATH가 설정된 폴더로 옮긴다(alias 명령어로 실행하기 위해)</span></span><br><span class="line">sudo mv ./kubectl /usr/<span class="built_in">local</span>/bin/kubectl</span><br><span class="line"><span class="comment">#설치 확인</span></span><br><span class="line">kubectl version --client</span><br></pre></td></tr></table></figure><p>kubectl 정보가 나오면 성공입니다.<br>이제 아까 전에 만든 node.js 어플리케이션을 구동해 보겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl run kubia --image=luksa/kubia --port=8080 --generator=run/v1</span><br><span class="line">&gt; replicationcontroller <span class="string">'"kubia" created</span></span><br></pre></td></tr></table></figure><p>–image=luksa/kubia 부분은 실행하는 컨테이너 이미지를 명시하는 것이며, -port=8080은 쿠버네티스에 어플리케이션이 8080포트를 수신 대기해야 한다는 것을 알려줍니다.  –generator부분은 디플로이먼트 대신 레플리케이션컨트롤러를 생성하기 때문에 사용했습니다. 레플리케이션 컨트롤러는 조금 이따 설명하겠습니다.  </p><h3 id="백그라운드에서-무슨-일이-일어나고-있는-것일까"><a href="#백그라운드에서-무슨-일이-일어나고-있는-것일까" class="headerlink" title="백그라운드에서 무슨 일이 일어나고 있는 것일까?"></a>백그라운드에서 무슨 일이 일어나고 있는 것일까?</h3><p>일단 지금 무슨 일이 일어난 것인지 설명해보겠습니다. 현재 도커 이미지를 푸시해서 도커 허브에 공유해놓았고 공유된 이미지를 가져와서 kubectl을 이용해 구동했습니다. kubectl 명령은 쿠버네티스의 API서버로 REST http요청을 전달하고 클러스터에 새 레플리케이션 컨트롤러 오브젝트를 생성합니다. 레플리케이션 컨트롤러는 새 파드를 만들고 스케쥴러에 의해 워커 노드 중 하나에 스케줄링을 완료합니다. kubelet은 파드가 할당된 것을 보고 이미지가 로컬에 없는 것을 확인합니다. 이미지를 받기 위해 도커에게 특정 이미지를 풀하도록 지시하고 luksa/kubia 이미지를 받은 후 도커는 컨테이너를 이미지를 이용해 생성하고 실행합니다.  </p><p>과정을 살펴봤듯이, 우리가 직접 컨테이너를 직접 생성하거나 동작하지 않습니다. 파드만을 이용했습니다. 하지만 파드도 직접 만들지 않았고 쿠버네티스에서 알아서 잘 만들었습니다. kubectl run을 하면 레플리케이션 컨트롤러를 생성하고 이것이 실제 파드를 만들어 냅니다. 클러스터 외부에서 파드에 접근하기 위해 쿠버네티스에게 레플리케이션 컨트롤러에 의해 관리되는 모든 파드를 단일 서비스로 노출하도록 명령합니다. 결국 쿠버네티스의 시스템은 레플리케이션 컨트롤러, 파드, 서비스로 구성됩니다. </p><h4 id="가장-중요한-구성요소는-파드입니다"><a href="#가장-중요한-구성요소는-파드입니다" class="headerlink" title="가장 중요한 구성요소는 파드입니다."></a>가장 중요한 구성요소는 파드입니다.</h4><p>여기서 파드는 하나의 컨테이너를 갖고 있지만, 보통 파드는 원하는 갯수의 컨테이너를 가질 수 있습니다. 컨테이너 내부에는 현재 Node.js 프로세스가 있고 포트 8080에 바인딩 되어 http요청을 기다리고 있습니다. 파드는 자체의 고유한 private ip와 host name을 갖습니다.</p><h4 id="레플리케이션-컨트롤러를-살펴보겠습니다"><a href="#레플리케이션-컨트롤러를-살펴보겠습니다" class="headerlink" title="레플리케이션 컨트롤러를 살펴보겠습니다."></a>레플리케이션 컨트롤러를 살펴보겠습니다.</h4><p>레플리케이션 컨트롤러는 항상 정확히 하나의 파드 인스턴스를 실행하도록 지정합니다. 보통 파드를 복제하고 항상 실행 상태로 만듭니다. 여기서는 파드의 replicas를 지정하지 않았습니다. 따라서 파드를 하나만 생성했습니다. 어떤 장애 등의 이유로 파드가 죽어버리면 레플리케이션 컨트롤러는 지정된 파드 수를 채우기 위해 새로운 파드를 생성할 것입니다. </p><h4 id="이제-서비스를-살펴보겠습니다"><a href="#이제-서비스를-살펴보겠습니다" class="headerlink" title="이제 서비스를 살펴보겠습니다."></a>이제 서비스를 살펴보겠습니다.</h4><p>kubia-http 서비스가 필요한 이유를 알기위해 파드의 주요 특성을 더 이해해 볼 필요가 있습니다. 파드는 영원하지 않습니다. ephemeral하기 때문에 사라질 수 있습니다. 파드가 죽어버릴 수 있고 누군가 파드를 kill할 수도 있으며, 비정상 노드에서 파드가 제거될 수 있습니다. 물론 사라지면 레플리케이션 컨트롤러에 의해서 다시 새 파드로 대체됩니다. 중요한 것은 새 파드는 다른 IP주소를 할당받는 다는 것입니다. 그렇기 때문에 서비스가 필요합니다. 서비스를 이용하면, 파드의 IP주소가 바뀌는 문제와 여러 개의 단일 파드를 단일 IP와 포트의 쌍으로 노출하는 문제를 해결할 수 있습니다. </p><p>서비스가 생성되면 정적 IP를 할당받습니다. 그리고 서비스가 있는동안 변경되지 않습니다. 파드에 직접 연결해야 하지만 클라이언트는 서비스의 IP 주소를 통해 연결해야 합니다. 서비스는 어떤 파드가 어떤 IP를 받는지 상관없이 파드 중 하나로 연결해 요청을 처리합니다.<br>서비스는 동일한 서비스를 제공하는 하나 이상의 파드 그룹의 정적인 위치를 나타냅니다. 서비스의 IP와 포트로 요청이 들어오면 그 순간 서비스에 속해 있는 파드 중 하나로 요청을 전달하게 됩니다.</p><h2 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h2><p>쿠버네티스에 대해서 조금이라도 본 사람은 파드에 대해서도 들어본 적이 있을 것입니다. 파드는 노드 안에 구성된 여러개의 컨테이너를 가질 수 있는 컨테이너의 그룹입니다. 쿠버네티스는 개별 컨테이너를 직접 다루지 않고 파드를 다룹니다. 이 파드들은 kubectl로 조회할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods</span><br></pre></td></tr></table></figure><p>혹시 파드의 상태가 Pending상태라면 파드의 단일 컨테이너가 준비가 되지 않은 것이다. 할당된 워커 노드가 컨테이너를 실행하기 전에 컨테이너 이미지를 다운로드하는 중이기 때문일 수도 있고, 리소스 부족일 수도 있다. 조금 기다려본 후 계속 pending으로 나온다면 리소스를 늘려주면 된다. 다운로드가 완료되고 파드의 컨테이너가 생성되면 Running으로 나온다.  파드에 대해서는 간단히 설명하고 나중에 따로 깊게 다뤄 보도록 하겠습니다.<br><img src="/images/pods.png" alt="pods"> </p><hr><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary."></a>Summary.</h1><p>쿠버네티스에 대해서 공부한 내용을 간단하게 요약해 보겠습니다.</p><ul><li>모놀리스 어플리케이션은 처음에 구축하기 쉽지만 가면 갈수록 유지 관리하기가 힘들고 확장이 불가능해 집니다.</li><li>마이크로서비스 기반 어플리케이션 아키텍쳐는 각 구성 요소의 개발을 요이하게 하지만 하나의 시스템으로 작동하도록 배포하고 구성하기 어렵습니다.</li><li>쿠버네티스는 전체 데이터 센터를 어플리케이션 실행을 위한 컴퓨팅 리소스로 제공하게 합니다.</li><li>쿠버네티스를 통해서 개발자는 시스템 관리자의 도움 없이도 어플리케이션을 배포할 수 있게 됩니다.</li><li>쿠버네티스를 통해서 시스템 관리자는 쿠버네티스가 고장 난 노드가 자동으로 처리되게 함으로써 더 편하게 잠을 잘 수 있게 됩니다. </li><li>쿠버네티스는 마스터 노드와 워커 노드로 이루어져있습니다.</li><li>어플리케이션을 컨테이너 이미지로 패키징하고 원격에 푸시해 누구나 사용하게 할 수 있습니다.</li><li>쿠버네티스는 파드를 이용해 어플리케이션을 배포합니다.</li></ul><p>여러 내용을 전달하려고 하다보니 글이 장황해진 것 같습니다. 다음 글에서는 파드에 대해서 더 깊게 알아보고 네임스페이스로 파드를 겹치지 않는 그룹으로 나누는 방법을 살펴보겠습니다.</p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/07/30/k8s-genesis/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
