<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Unreasonable Effectiveness</title>
    <link>http://tkdguq05.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Thu, 08 Apr 2021 02:21:01 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Airflow Worker 분리하기</title>
      <link>http://tkdguq05.github.io/2021/04/04/airflow-clusterization/</link>
      <guid>http://tkdguq05.github.io/2021/04/04/airflow-clusterization/</guid>
      <pubDate>Sun, 04 Apr 2021 06:23:20 GMT</pubDate>
      <description>
      
        &lt;p&gt;Airflow를 나눠봤습니다. 그런데 이제 Autoscaling을 곁들인&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Airflow를 나눠봤습니다. 그런데 이제 Autoscaling을 곁들인</p><a id="more"></a><h1 id="Airflow-Clusterization"><a href="#Airflow-Clusterization" class="headerlink" title="Airflow Clusterization"></a>Airflow Clusterization</h1><h2 id="Airflow를-나눠봤습니다-그런데-이제-Autoscaling을-곁들인"><a href="#Airflow를-나눠봤습니다-그런데-이제-Autoscaling을-곁들인" class="headerlink" title="Airflow를 나눠봤습니다. 그런데 이제 Autoscaling을 곁들인"></a>Airflow를 나눠봤습니다. 그런데 이제 Autoscaling을 곁들인</h2><p>Airflow의 구성요소들을 다 쪼개볼 겁니다. 어떻게 나눌 것이냐면, 크게 Airflow Main, Airflow DB, Airflow Worker입니다. Airflow Main에는 웹 서버와 스케쥴러를 돌아가게 만들 것이고, DB에는 MySQL을 띄워 놓을 것입니다. Worker는 오토스케일링을 걸어둘 것이구요. 귀찮게 <strong>왜 이렇게 하냐구요?</strong></p><p>기존에 Airflow는 하나의 서버에서 잘 돌아가고 있었습니다. 그래서 <a href="https://tkdguq05.github.io/2021/02/21/airflow-basic2/#more">Airflow Basic</a> 글을 통해서 정리해 놓기도 했습니다. 문제는 처리할 DAG와 Task가 너무 많아진 것이었습니다. Airflow의 구성요소 각각이 어떤 역할을 하는지 궁금하시거나 잘 기억이 안나시는 분은 <a href="https://tkdguq05.github.io/2021/02/21/airflow-basic2/#more">이 글</a>을 읽어보시면 좋습니다.</p><p>처리할 작업이 많아지면 Worker 하나로는 처리하기 부담스러워집니다. 스케쥴러가 내려준 많은 작업을 처리하다가 다른 작업을 못하게 현상이 자주 발생하게 됩니다. 그래서! 워커를 늘려줘야겠다는 생각을 한 것입니다. 워커에 오토스케일링을 걸어서, 작업 부하가 걸리면 워커를 늘려서 처리하고, 부하가 줄어들면 워커를 줄이려는 것입니다.<br><img src="https://miro.medium.com/max/2800/1*W0hyXlN4H0x0BNK4NwYPTw.gif" alt="힘들때 도와줘!"></p><hr><p>작업 계획은 다음과 같습니다.</p><ol><li>Airflow Main 세팅</li><li>Airflow DB 세팅</li><li>Airflow Worker 기본 이미지 세팅</li><li>Airflow Worker 세팅</li><li>Assemble!</li></ol><hr><p><br></br></p><h2 id="Airflow-Main"><a href="#Airflow-Main" class="headerlink" title="Airflow Main"></a>Airflow Main</h2><p>Airflow Main에는 Webserver와 Scheduler를 구성해 놓을 것입니다. Airflow Main의 기본적인 설정은 <a href="https://tkdguq05.github.io/2020/12/13/airflow-on-ec2/#more">이 글</a>에서의 설정과 같습니다. 여기서 MySQL을 따로 가져갈 것이니 MySQL설정만 빼놓고 따라하시면 좋을 것 같습니다. 다만 저는 Airflow 1.10.14 버전을 사용하도록 하겠습니다. 최신 2.0이상 버전은 DAG가 조금 달라져서 수정을 해줘야 하거든요.<br><br></br></p><h3 id="Airflow-Home"><a href="#Airflow-Home" class="headerlink" title="Airflow Home"></a>Airflow Home</h3><p>먼저 저는 AWS환경을 이용해서 구축을 할 것이기 때문에 EC2를 하나 만들어주고, 새로 생긴 인스턴스에 Airflow home을 잡아주도록 하겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> AIRFLOW_HOME=/home/ec2-user/airflow <span class="comment">#기본주소</span></span><br></pre></td></tr></table></figure><p><strong>이 HOME주소는 꽤나 중요합니다</strong>. Airflow가 시작되는 곳이기도 하고, <strong>설정 파일을 불러오는 곳</strong>이기도 하기 때문입니다.  원하는 주소로 작성하시되, Worker에도 동일한 주소를 입력해주셔야 합니다. 그렇지 않으면 <code>execute_command encountered a CalledProcessError</code> ,<code>Celery command Failed</code> 를 만나시게 될 것입니다. <sup><a href="#footnote_1">1</a></sup></p><p>Airflow의 Dag를 실행하려면 <strong>airflow를 구성하고 있는 모든 서버에 동일한 경로와 이름으로 DAG파일이 존재</strong>해야 한다는 것을 기억해주세요.<br><br></br></p><h3 id="Redis-설정"><a href="#Redis-설정" class="headerlink" title="Redis 설정"></a>Redis 설정</h3><p>레디스 설정은 다행히 저번 글에 나와 있는 것과 똑같습니다. 그대로 따라하시면 됩니다.<br><br></br></p><h3 id="Airflow-설치"><a href="#Airflow-설치" class="headerlink" title="Airflow 설치"></a>Airflow 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update -y</span><br><span class="line"></span><br><span class="line">sudo yum install group <span class="string">"Development tools"</span> -y</span><br><span class="line"></span><br><span class="line">sudo yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel python3-devel.x86_64 cyrus-sasl-devel.x86_64 -y</span><br><span class="line"></span><br><span class="line">sudo yum install libevent-devel -y</span><br><span class="line"></span><br><span class="line">sudo pip3 install apache-airflow==1.10.14</span><br><span class="line"></span><br><span class="line">airflow version <span class="comment">#버전이 뜬다면 성공!</span></span><br></pre></td></tr></table></figure><p>설치가 되었으면 <code>airflow initdb</code> ,  <code>airflow webserver</code>를 사용해서 airflow가 뜨는지 확인해 봅니다.</p><p>에러가 발생한다구요? 그렇다면 아래 Trouble Shooting 부분을 참고해보세요. (sqlalchemy version 조정) <sup><a href="#footnote_2">2</a></sup>  </p><hr><p><br></br></p><h2 id="MySQL-설정"><a href="#MySQL-설정" class="headerlink" title="MySQL 설정"></a>MySQL 설정</h2><p>Airflow Main 세팅이 끝났다면, DB로 사용할 새 인스턴스를 만들고 MySQL을 설치해줍니다.</p><p>이전 글과 달라지는 부분이 DB 세팅에서 발생합니다. mysql 5.7버전으로 설치하는 것 까지는 동일합니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line">sudo yum localinstall mysql57-community-release-el7-11.noarch.rpm </span><br><span class="line">sudo yum install mysql-community-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 설치된 이후</span></span><br><span class="line">sudo service mysqld start</span><br></pre></td></tr></table></figure><p>airflow 사용자를 추가해봅시다. 먼저 root로 접속을 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line"><span class="comment"># 패스워드를 입력</span></span><br><span class="line">Enter Password : <span class="comment">#/var/log/mysqld.log에 있는 임시비밀번호 사용</span></span><br></pre></td></tr></table></figure><p><strong>달라지는 부분이 발생하는 곳이 여기입니다.</strong> airflow 사용자를 생성할 때 모든 접속 <code>%</code> 에 대해서 허용해주어야 합니다. 기존에는 내부 주소, <code>localhost</code>에 대해서 허용했습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 사용자 생성</span></span><br><span class="line">create user <span class="string">'airflow'</span>@<span class="string">'%'</span> identified by <span class="string">'비밀번호'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># DB 권한 부여</span></span><br><span class="line">grant all privileges on *.* to <span class="string">'airflow'</span>@<span class="string">'%'</span>;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>DB가 설정되었으면 Airflow Main과 연결을 해주어야 합니다. 이 DB 서버가 사용하는 Private IP가 있습니다. 이 주소를 AWS에서 확인하고 Airflow Main의 airflow.cfg에 넣어줘서 어떤 DB를 바라볼지 Airflow Main에게 알려줘야 합니다.</p><p>기본적인 airflow main의 airflow.cfg 설정은 이렇게 해줍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 사용할 dag 폴더 지정</span></span><br><span class="line"><span class="comment"># subfolder in a code repository. This path must be absolute. 꼭 절대경로!</span></span><br><span class="line">dags_folder = /home/ec2-user/airflow/dags <span class="comment">#원하는 위치와 디렉토리로 지정</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># executor = SequentialExecutor</span></span><br><span class="line">executor = CeleryExecutor <span class="comment">#원하는 Executor 선택</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sql_alchemy_conn = sqlite:////home/airflow/airflow/airflow.db</span></span><br><span class="line">sql_alchemy_conn =  mysql+pymysql://airflow:@[mysql서버PrivateIP]:3306/airflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># catchup_by_default = True</span></span><br><span class="line">catchup_by_default = False</span><br><span class="line"></span><br><span class="line"><span class="comment"># broker_url = sqla+mysql://airflow:airflow@127.0.0.1:3306/airflow</span></span><br><span class="line">broker_url = redis://airflow@[main서버PrivateIP]:6379/0</span><br><span class="line"></span><br><span class="line"><span class="comment"># result_backend = db+mysql://airflow:airflow@localhost:3306/airflow</span></span><br><span class="line">result_backend = db+mysql://airflow:비밀번호@[mysql서버PrivateIP]:3306/airflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># load_examples = True</span></span><br><span class="line">load_examples = False <span class="comment">#예시를 보고 싶다면 True</span></span><br></pre></td></tr></table></figure><p><code>broker_url</code> , <code>cluster_address</code>에는 Main의 Private IP주소를 넣고, <code>sql_alchemy_conn</code>, <code>result_backend</code> 에는 DB의 Private IP주소를 넣습니다.</p><p>이렇게 설정해주고 다시 한번 <code>airflow initdb</code> 를 해주면 새로 작성해준 주소로 DB경로가 입력이 됩니다.</p><p>추가로, <strong>MySQL서버에도 Redis를 설치해주어야 합니다</strong>. broker인 Redis를 통해 scheduler와 executor를 연결해주어야 하기 때문입니다. </p><p><img src="https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2019/04/17/sagemaker-airflow-2.gif" alt="AWS Managed Airflow 사진 참조"></p><p>위 그림에서 보듯이 main은 webserver와 scheduler를 담당하고 MySQL 서버는 DB와 executor쪽을 담당하게 됩니다. executor에 보낼 매개가 필요하기 때문에 브로커인 Redis를 설정해줍니다.<br><br></br></p><h3 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h3><p>webserver를 띄우고 잘 되는지 확인해봅시다. 잘 나오면 다행입니다. 그런데 1.10.10 이상 버전으로 오면서 UI에 변화된 부분이 있습니다. 아주 좋은 기능이라고 생각하는 것 중 하나인데, 그건 시간대를 드디어 설정해서 볼 수 있다는 것입니다. 기존에는 UTC가 고정이어서 +9해서 계산하는게 영 별로였거든요. </p><p><img src="/images/airflow_cluster/airflow_ui.png" alt="ㅇ"></p><p>사진에서 보다시피 <strong>KST로 설정할 수 있습니다</strong>. 그리고 유저도 설정해서 볼 수 있죠. 이걸 적용하기 위해서는 config에서 하나를 더 수정해주어야 합니다.</p><p>다시 airflow.cfg로 들어가서</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use FAB-based webserver with RBAC feature</span></span><br><span class="line">rbac=True</span><br></pre></td></tr></table></figure><p>이렇게 설정해줍니다. <strong>RBAC는 Role-Based Access Control</strong>의 약자로써, 아까 보셨듯이 유저별로 접근을 통제하는 시스템입니다. 그렇다면 유저도 만들어주어야겠죠.</p><p>Airflow Main의 쉘로 들어가서</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airflow create_user -r Admin -u admin -e email주소 -f admin -l user -p 비밀번호</span><br></pre></td></tr></table></figure><p>이렇게 입력을 해줍시다. 각 플래그의 의미는 다음과 같습니다.</p><ul><li>-r : Role, 역할. Admin, Op, User, Viewer, Public 이 정해져 있고, 커스텀 롤 생성 가능. (자세한 내용은 <a href="https://oboki.net/workspace/data-engineering/airflow/rbac/">여기</a>를 참고하세요)</li><li>-u : User명</li><li>-e : Email 주소</li><li>-f : First Name</li><li>-l : Last Name</li><li>-p : Password, 비밀번호</li></ul><p>이제 webserver를 열어주고 들어가면</p><p><img src="/images/airflow_cluster/lotsofcircles.png" alt="wtf"></p><p>아름다운 원 운동을 바라보면서 멘탈이 흔들릴 수 있습니다. 하지만 이렇게 나오게 된 것은 한 가지를 빼먹었기 때문입니다. 앞서서 우리가 중요한 config를 바꿨을 때는 DB에 알려준 것을 기억하실 것입니다. RBAC는 보안에 관련된 것이니까 중요하다고 볼 수 있겠습니다. 그렇다면 DB에도 뭐가 바뀌었는지 알려주어야 합니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airflow upgradedb</span><br></pre></td></tr></table></figure><p>이 명령어는 DB를 초기화 시키지 않고 설정값을 DB에 업데이트 시켜주는 역할을 합니다. 이 명령어를 입력해주면?</p><p><img src="/images/airflow_cluster/upgradedb.png" alt="해-결!"></p><p><img src="/images/airflow_cluster/airflow_ui.png" alt="UI 등장"></p><p>짠! 1.10.14의 UI가 등장했습니다. 오른쪽 상단의 시간 설정이 가능하다면 성공하신 것입니다.  </p><p><br></br></p><h3 id="Fernet-Key"><a href="#Fernet-Key" class="headerlink" title="Fernet Key"></a>Fernet Key</h3><p>RBAC를 통해 보안이 강화되었습니다. 이를 통해 활성화 된 것이 하나 더 있다면, <code>fernet_key</code> 를 통한 encryption입니다. Variable이나 Connection을 이용하는 분이라면, DAG를 실행시켰을 때 <code>JSONDecodeError: Expecting value: line 1 column 1</code> 이런 에러를 마주할 가능성이 높습니다. 실제 에러가 난 부분을 보면 Variable의 Value를 가져오는 부분에서 문제가 발생하고 있습니다. 실제로 어떤 Value를 가져오는지 확인해보면, “g8dgasv90s8fd09x9adxfcx” 같이 알 수 없는 암호문으로 되어 있는 것을 목격할 수 있습니다. </p><p>‘아 그렇다면 encrypt 옵션을 False로 바꿔야지!’라는 생각으로 mysql로 들어가서 variables를 찾은 뒤에 <code>is_encrypt</code> 를 다 0으로 변경해봤습니다. 하지만 이렇게 해도 이미 Variable에 등록할 때에 암호화된 코드로 DB에 들어가기 때문에 key값으로 value를 조회해도 나오는 값은 위에 있는 알 수 없는 암호문입니다. </p><p>결국에는 이것을 해독해주어야 합니다. 이 암호를 해독해주는 열쇠가 바로 <code>fernet_key</code> 입니다. fernet_key는 한번 생성해주어야 합니다. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cryptography.fernet <span class="keyword">import</span> Fernet</span><br><span class="line">fernet_key= Fernet.generate_key()</span><br><span class="line">print(fernet_key.decode())</span><br></pre></td></tr></table></figure><p>여기서 나온 키 값을 복사해서 airflow.cfg의 fernet_key 부분에 넣어줍니다. 그리고 이 키 값은 저장해놨다가 airflow worker에 있는 airflow.cfg에도 동일하게 적용을 해줍니다.  </p><hr><p><br></br></p><h2 id="Airflow-Worker-기본-이미지-세팅"><a href="#Airflow-Worker-기본-이미지-세팅" class="headerlink" title="Airflow Worker 기본 이미지 세팅"></a>Airflow Worker 기본 이미지 세팅</h2><p>Airflow Worker를 세팅해보겠습니다. 그 전에 기본 이미지를 설정해 줄 것입니다. 물론 Worker를 쫙 설치하고 세팅해준다음에 AMI를 만들어서 오토스케일링을 진행해도 되지만, 만약 설정값을 바꿀일이 생긴다면? 그때마다 AMI를 새로 만들어야 할 것입니다. 당연히 AWS관리자나 TA분과의 관계가 좋지 않아질 것입니다. </p><p>제가 선택한 방법은 Docker입니다. Docker를 이용해서 위에서 진행한 세팅을 한번에 잡아줄 것이고, 이 이미지를 시작 템플릿으로 설정할 것입니다. 설정 값을 바꿀 일이 있다면 이미지가 저장된 곳에 들어가서 변경한 후 다시 Push해주면 됩니다. </p><p>기본 이미지는 Docker와 기타 사용할 명령어에 대한 라이브러리가 설치된 정도면 됩니다. 저는 Docker정도만 설치했고 이것을 AMI로 만들어 줬습니다. 이 AMI를 시작템플릿에 넣을 것이고 시작템플릿에 있는 고급 설정을 통해 서버가 시작되면서 Docker Image를 Run 해 줄 수 있는 명령어를 넣어줄 것입니다.</p><p><img src="/images/airflow_cluster/docker_ami.png" alt="Airflow%20Clusterization%202f196f07c5a7412285ad666bc5db2e46/docker_ami.png">  </p><p><br></br></p><h3 id="Docker-Airflow-Worker-이미지-구성"><a href="#Docker-Airflow-Worker-이미지-구성" class="headerlink" title="Docker Airflow Worker 이미지 구성"></a>Docker Airflow Worker 이미지 구성</h3><p><strong>본격적으로 Worker 이미지를 만들어보겠습니다.</strong></p><p>구성요소는 다음과 같습니다.</p><ul><li>Dockerfile</li><li>files<ul><li>airflow.cfg</li><li>config<ul><li>log_config.py</li></ul></li></ul></li><li>sources<ul><li>airflow.sh</li><li>cron</li><li>hostname_resolver.py</li><li>requirements.txt</li></ul></li></ul><p>디렉토리명은 임의로 정해놓은 것이기 때문에 다르게 설정하셔도 됩니다. files부터 설명드리면, airflow.cfg는 위에서 보셨던 그 설정파일입니다. airflow main에서 설정했던 파일을 복사해서 넣어주시면 좋습니다. config 폴더에는 airflow의 log설정과 관련된 파일이 있습니다.</p><p>sources에는 airflow.sh로 쉘 스크립트를 통해 실행하는 명령이 담겨 있고, cron작업을 위한 cron, 도커 내부에서 동작하기 때문에 도커의 호스트를 알려주는 hostname_resolver.py, 그리고 필요한 python 라이브러리 설치를 위한 requirements.txt가 있습니다.  </p><p><br></br></p><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:18.04</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">  git \</span><br><span class="line">  cron \</span><br><span class="line">  vim \</span><br><span class="line">  python3-pip \</span><br><span class="line">  python3-dev \</span><br><span class="line">  build-essential \</span><br><span class="line">  libmysqlclient-dev \</span><br><span class="line">  libssl-dev \</span><br><span class="line">  libkrb5-dev \</span><br><span class="line">  libsasl2-dev \</span><br><span class="line">&amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line">ADD ./<span class="built_in">source</span>/* /app/</span><br><span class="line">ADD ./files/airflow.cfg /app/</span><br><span class="line">ADD ./files/config/ /data/airflow/config/</span><br><span class="line">ADD ./<span class="built_in">source</span>/hostname_resolver.py /usr/<span class="built_in">local</span>/lib/python3.6/dist-packages/airflow/</span><br><span class="line">RUN chmod 0744 /app/airflow.sh</span><br><span class="line">RUN <span class="built_in">export</span> AIRFLOW__CORE__HOSTNAME_CALLABLE=airflow.hostname_resolver:resolve</span><br><span class="line">RUN <span class="built_in">export</span> AIRFLOW__CORE__FERNET_KEY=***</span><br><span class="line">ADD ./<span class="built_in">source</span>/cron /etc/cron.d/</span><br><span class="line">RUN chmod 0744 /etc/cron.d/cron</span><br><span class="line">RUN crontab /etc/cron.d/cron</span><br><span class="line">RUN touch /var/<span class="built_in">log</span>/cron.log</span><br><span class="line"></span><br><span class="line">WORKDIR /app</span><br><span class="line">RUN mkdir -p /data/airflow/DAGS <span class="comment">#제가 만든 DAG 폴더</span></span><br><span class="line">RUN git <span class="built_in">clone</span> DAGS <span class="comment">#제 github에 있는 DAGs</span></span><br><span class="line"></span><br><span class="line">RUN pip3 install -r requirements.txt</span><br><span class="line">RUN python3 -m pip install sqlalchemy==1.3.15 <span class="comment">#에러 방지</span></span><br><span class="line"><span class="comment">#CMD ["tail","-f","/var/log/cron.log"]</span></span><br><span class="line">CMD ./airflow.sh <span class="variable">$NAME</span></span><br></pre></td></tr></table></figure><p>기본 세팅으로 들어가는 라이브러리가 좀 있습니다. git이나 cron, vim등은 자주 사용하기 때문입니다. 그 외에 ADD 부분을 보시면 /source라든가 /files가 있는데 이것은 제가 빌드하기 전에 만들어 놓은 디렉토리 입니다. 이 디렉토리 안에 필요한 파일들을 넣어놨고, 빌드 후에 원하는 위치로 옮기고 실행해줄 것입니다.</p><p>export로 환경 설정 해주는 부분이 있는데 여기에 원래는 AIRFLOW_HOME 설정도 해줬습니다. 하지만 이것은 docker run할 때 넣어주기 때문에 빼놨습니다. 그리고 fernet key부분은 아래에서 설명하겠습니다.  </p><p><br></br></p><h4 id="airflow-sh"><a href="#airflow-sh" class="headerlink" title="airflow.sh"></a>airflow.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">export</span> C_FORCE_ROOT=<span class="string">"true"</span></span><br><span class="line">crontab /etc/cron.d/cron</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/airflow initdb</span><br><span class="line">mv /app/airflow.cfg /data/airflow/</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/airflow worker -q <span class="variable">$1</span> &amp;</span><br><span class="line">cron &amp;&amp; tail -f /var/<span class="built_in">log</span>/cron.log</span><br></pre></td></tr></table></figure><p>쉘 스크립트에는 Celery 작업을 위한 <code>C_FORCE_ROOT</code>가 있습니다. 이것은 root 권한으로 셀러리를 돌리겠다는 표시이구요. 그 외에는 cron 등록, db initialize 등이 있는데 worker -q에 $1이 있는 이유는 docker를 run할 때 어떤 큐 값으로 실행시킬 건지 정하기 위해서 입니다. 워커를 여러 대 둘 수 있는데 큐를 따로 관리할 수 있으면 좋으니까요.  </p><p><br></br></p><h4 id="cron"><a href="#cron" class="headerlink" title="cron"></a>cron</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* * * * * <span class="built_in">cd</span> /data/airflow/DAGs &amp;&amp; git fetch --all &amp;&amp; git reset --hard origin/master</span><br><span class="line">* * * * * find /data/airflow/logs/* -ctime +7 -<span class="built_in">exec</span> rm -f &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>cron 작업에는 사용할 DAG들이 있는 git repo를 받는 부분과, log관리하는 코드가 같이 들어있습니다.  </p><p><br></br></p><h4 id="hostname-resolver-py"><a href="#hostname-resolver-py" class="headerlink" title="hostname_resolver.py"></a>hostname_resolver.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resolve</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> requests.get(<span class="string">'http://169.254.169.254/latest/meta-data/local-ipv4'</span>).text</span><br></pre></td></tr></table></figure><p>hostname_resolver.py에는 aws의 메타 데이터를 이용해서 docker의 host명을 가져오는 코드가 들어있습니다. 혹시 웹 서버에서 DAG 작업로그를 보려고 하는데 나오지 않는다면, 이 부분을 의심해 보세요.  </p><p><br></br></p><h4 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">boto3==<span class="number">1.12</span><span class="number">.0</span></span><br><span class="line">pymongo==<span class="number">3.10</span><span class="number">.1</span></span><br><span class="line">celery==<span class="number">4.4</span><span class="number">.0</span></span><br><span class="line">mysqlclient==<span class="number">1.4</span><span class="number">.6</span></span><br><span class="line">pymysql==<span class="number">0.9</span><span class="number">.3</span></span><br><span class="line">redis==<span class="number">3.4</span><span class="number">.1</span></span><br><span class="line">apache-airflow==<span class="number">1.10</span><span class="number">.14</span></span><br></pre></td></tr></table></figure><p>requirements에는 필요한 라이브러리들이 담겨있습니다.</p><p>이렇게 워커 이미지를 구성했으면, 빌드를 시작해봅시다.   </p><p><br></br></p><h3 id="Docker-Build-and-Run"><a href="#Docker-Build-and-Run" class="headerlink" title="Docker Build and Run"></a>Docker Build and Run</h3><p>만든 이미지를 AWS ECR에 올려볼 것입니다. 이를 위해 다음과 같은 순서의 작업을 수행하여야 합니다.</p><ol><li><p>인증 토큰을 검색하고 레지스트리에 대해 Docker 클라이언트를 인증합니다. AWS CLI 사용:</p><p><code>aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin *******</code></p><p>참고: AWS CLI를 사용하는 중 오류가 발생하면 최신 버전의 AWS CLI 및 Docker가 설치되어 있는지 확인하십시오.</p></li><li><p>다음 명령을 사용하여 도커 이미지를 빌드합니다. 도커 파일을 처음부터 새로 빌드하는 방법에 대한 자세한 내용은 <a href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/docker-basics.html">여기</a>  지침을 참조하십시오. 이미지를 이미 빌드한 경우에는 이 단계를 건너뛸 수 있습니다.</p><p><code>docker build -t 이미지명 .</code></p></li><li><p>빌드가 완료되면 이미지에 태그를 지정하여 이 리포지토리에 푸시할 수 있습니다.</p><p><code>docker tag 이미지명:tag 리포지토리주소/이미지명:tag</code></p></li><li><p>다음 명령을 실행하여 이 이미지를 새로 생성한 AWS 리포지토리로 푸시합니다.<br><code>docker push 리포지토리주소/이미지명:tag</code></p></li></ol><p>위에 있는 것들은 ECR의 푸시 명령에 있는 것들이기 때문에 해당 페이지에 있는 코드를 복사해서 넣으시면 됩니다.</p><p>빌드가 되었다면, 이미지 구성은 끝입니다. 이제 필요한 것은 시작 템플릿을 방금까지 만든 이미지를 이용해서 구성하고, 이것을 오토스케일링 그룹에 넣어서 워커를 쫙 만들어 주면 됩니다.  </p><p><br></br></p><h3 id="Start-Template"><a href="#Start-Template" class="headerlink" title="Start Template"></a>Start Template</h3><p>시작 템플릿 구성</p><p><img src="/images/airflow_cluster/start_template.png" alt="도커 기본이미지를 만들고 여기에 넣어주기"></p><p>시작 템플릿 이름은 잘 넣어주시면 되고, AMI에는 아까 구성한 Docker AMI를 넣어주도록 합니다. 이 도커 AMI를 기본으로 설치하고 그 위에 도커 이미지를 Run 해 줄 것입니다.</p><p>이제 맨 밑에 고급 세부 정보로 들어와서 사용자 데이터를 넣어줍니다.</p><p><img src="/images/airflow_cluster/advanced_template.png" alt="여기에 docker 명령어를 넣어주자"></p><p>사용자 데이터는 이 시작 템플릿이 시작될 때 실행할 수 있는 명령어입니다. 여기에 docker run 명령어를 넣을 것입니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">su - ubuntu -c <span class="string">"aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin *******;docker run -p 8793:8793 -e AIRFLOW_HOME=/data/airflow -e NAME=main -d ***********/작성한이미지명:태그"</span></span><br></pre></td></tr></table></figure><p><strong>shebang을 꼭 넣어주셔야 합니다.</strong></p><p>shebang을 넣지 않으면 이 명령어를 인식할 수 없어서 에러가 발생합니다. 한 번 더 강조합니다. <strong>shebang 꼭 넣어야 한다고!</strong>  빼먹어서 저 처럼 삽질 많이 하지 마십시오. 그 뒷 부분에는 su ubuntu가 있습니다. 이후에 실행할 명령어는 ubuntu유저로 실행해야하기 때문입니다. 그래서 switch user를 해주시고 다음의 명령어를 입력해줍니다.</p><p>하나씩 자세히 볼까요?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin *******</span><br></pre></td></tr></table></figure><p>이것은 아까 사용했던 명령어로, 인증 토큰을 검색하고 레지스트리에 대해 Docker 클라이언트를 인증하는 것입니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8793:8793 -e AIRFLOW_HOME=/data/airflow -e NAME=main -d ***********/작성한이미지명:태그</span><br></pre></td></tr></table></figure><p>도커 이미지를 run하는 명령어입니다. 8793포트를 열어줘야 워커에 대해서 통신이 가능합니다. <code>-p</code>를 이용해 포트를 적어주세요. <code>-e</code> 명령어는 도커에서 환경설정 관련된 부분입니다. airflow home을 airflow main과 같은 위치로 잡아주시면 됩니다. <code>NAME</code>은 worker -q 다음에 들어갈 큐의 topic 명입니다. 제가 작성한 DAG들은 main 토픽을 사용하므로 main으로 했습니다. 다른 topic을 사용하시는 분은 다른 걸로 넣어주세요. <code>-d</code>는 백그라운드로 실행시킨다는 의미이며, 그 다음에는 ECR 이미지의 주소를 넣어줍니다.</p><p>시작템플릿 작성이 끝났습니다.   </p><hr><p><br></br></p><h3 id="Assemble"><a href="#Assemble" class="headerlink" title="Assemble!"></a>Assemble!</h3><p>이제 구성이 모두 되었습니다. airflow main에 들어가서 airflow webserver와 airflow scheduler를 올려줍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup airflow webserver &amp;</span><br><span class="line">nohup airflow scheduler &amp;</span><br></pre></td></tr></table></figure><p>오토스케일링 그룹에도 워커를 늘려주고 도커 이미지가 올라올 때까지 조금 기다려줍니다. 다 올라오고 나면 dag를 잘 돌리는지 test 해 봅니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">airflow list_tasks [TASK명]</span><br><span class="line">airflow [TASK명] [DAG id] [Task id] [date]</span><br></pre></td></tr></table></figure><p>잘 돌았다면 성공입니다!</p><hr><p>  <br></br></p><h2 id="Trouble-Shooting"><a href="#Trouble-Shooting" class="headerlink" title="Trouble Shooting"></a>Trouble Shooting</h2><h3 id="1-DAG가-무한-생성"><a href="#1-DAG가-무한-생성" class="headerlink" title="1. DAG가 무한 생성?"></a>1. DAG가 무한 생성?</h3><p><img src="/images/airflow_cluster/catchup.png" alt="그만돌아!"></p><p>갓 만든 따끈따끈한 DAG를 On했습니다. 그런데 DAG하나가 끝나기도 전에 새로운 DAG들이 계속해서 실행되는 현상을 목격할 수 있습니다. 이런 경우는 <code>catch_up</code> 옵션이 활성화 되어있기 때문입니다. catupup은 <code>start_date</code>부터 현재 시간까지 실행하지 못한 DAG들을 실행하겠다는 의미입니다. 임시로 실행하는 DAG야 신경 안써도 큰 문제는 되지 않겠지만, API가 엮어있거나 대용량 데이터를 끌어서 사용하는 DAG라면 문제가 커질 수 있습니다. 이는 airflow.cfg에서 해결할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catchup_by_default = False</span><br></pre></td></tr></table></figure><p>airflow.cfg에서 <code>catchup_by_default</code> 옵션을 찾아서 False로 변경해주시면 됩니다. 기본값은 True입니다. </p><p>혹시 이렇게 했는데도 문제가 계속 발생한다면, <strong>웹 서버와 스케쥴러를 모두 종료하신 후에 다시 실행시켜 수정한 옵션 값을 적용해주면 됩니다</strong>.<br><br></br></p><h3 id="2-pip3-permission-denied"><a href="#2-pip3-permission-denied" class="headerlink" title="2. pip3 permission denied"></a>2. pip3 permission denied</h3><p>열심히 글을 따라 치는데 뜬금없이 <code>pip3 permission denied</code> 이런 에러가 발생할 수 있습니다. 이런 경우에는 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install [library]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 위 명령어가 안된다면</span></span><br><span class="line">python3 -m pip install --user [library]</span><br></pre></td></tr></table></figure><p>위와 같은 명령어로 해결할 수 있습니다.  </p><p><br></br></p><h3 id="3-Command-python-setup-py-egg-info-failed-with-error-code-1"><a href="#3-Command-python-setup-py-egg-info-failed-with-error-code-1" class="headerlink" title="3. Command python setup.py egg_info failed with error code 1"></a>3. Command python <a href="http://setup.py/">setup.py</a> egg_info failed with error code 1</h3><p>역시나 ec2-user에서 열심히 설치를 하는 중에 이 에러를 마주칠 수 있습니다. 이 에러는 pip 업데이트가 되지 않아 발생한 에러로 볼 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip install --upgrade --ignore-installed pip setuptools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 또는</span></span><br><span class="line">python3 -m pip install -U pip</span><br></pre></td></tr></table></figure><p>  <br></br></p><h3 id="4-ModuleNotFoundError-No-module-named-‘sqlalchemy-ext-declarative-clsregistry’"><a href="#4-ModuleNotFoundError-No-module-named-‘sqlalchemy-ext-declarative-clsregistry’" class="headerlink" title="4. ModuleNotFoundError: No module named ‘sqlalchemy.ext.declarative.clsregistry’"></a>4. ModuleNotFoundError: No module named ‘sqlalchemy.ext.declarative.clsregistry’</h3><p> <a name="footnote_2">2</a><br>위의 에러는 sqlalchemy 버전이 맞지 않아서 발생하는 문제입니다. 그렇다면 버전을 낮춰주면 됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sqlalchemy 버전 낮추면서 해결</span></span><br><span class="line">python3 -m pip install sqlalchemy==1.3.15</span><br></pre></td></tr></table></figure><p><br></br></p><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a name="footnote_1">1</a> 출처 : <a href="https://louisdev.tistory.com/26">https://louisdev.tistory.com/26</a></li><li><a href="https://yahwang.github.io/posts/87">https://yahwang.github.io/posts/87</a></li><li><a href="https://potensj.tistory.com/73">https://potensj.tistory.com/73</a></li><li><a href="https://oboki.net/workspace/data-engineering/airflow/rbac/">https://oboki.net/workspace/data-engineering/airflow/rbac/</a></li><li><a href="https://github.com/puckel/docker-airflow/issues/387">https://github.com/puckel/docker-airflow/issues/387</a></li><li><a href="https://airflow.apache.org/docs/apache-airflow/stable/security/secrets/fernet.html#rotating-encryption-keys">https://airflow.apache.org/docs/apache-airflow/stable/security/secrets/fernet.html#rotating-encryption-keys</a></li><li><a href="https://devlog.jwgo.kr/2019/07/05/celery-daemonization/">https://devlog.jwgo.kr/2019/07/05/celery-daemonization/</a></li><li><a href="https://aws.amazon.com/ko/blogs/korea/build-end-to-end-machine-learning-workflows-with-amazon-sagemaker-and-apache-airflow/">https://aws.amazon.com/ko/blogs/korea/build-end-to-end-machine-learning-workflows-with-amazon-sagemaker-and-apache-airflow/</a></li></ul>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2021/04/04/airflow-clusterization/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Apriori와 FP-Growth. 추천 시스템 시리즈</title>
      <link>http://tkdguq05.github.io/2021/03/07/apriori-FP/</link>
      <guid>http://tkdguq05.github.io/2021/03/07/apriori-FP/</guid>
      <pubDate>Sun, 07 Mar 2021 13:09:05 GMT</pubDate>
      <description>
      
        &lt;p&gt;추천 시스템에 대해서, Apriori와 FP-Growth&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>추천 시스템에 대해서, Apriori와 FP-Growth</p><a id="more"></a><h2 id="추천시스템은"><a href="#추천시스템은" class="headerlink" title="추천시스템은?"></a>추천시스템은?</h2><p><strong>추천시스템은 사용자에게 상품을 제안하는 소프트웨어 도구 이자 기술입니다</strong>. 추천 시스템은 사용자 입장에서 수십 만개의 상품 풀에서 원하는 것을 빠르게 찾을 수 있다는 점에서 큰 의의가 있습니다. 제가 가장 많이 접하는 Youtube 추천 영상을 생각해보면 이해가 빠릅니다. 영상은 하루에도 수억개가 올라올테지만, 제가 원하는 것이 아주 잘 올라오는 것을 확인할 수 있습니다. 추천 시스템이 없다면 영상을 찾는데 시간이 너무 오래 걸릴 것입니다. 기업 입장에서도 추천은 매우 중요합니다. 사용자가 영상을 찾는데 너무 많은 시간을 소비한다면, 짜증을 느낄 것이고 이 플랫폼에 대한 이용율이 떨어질 것입니다. 또한 커머스라면 적절한 상품을 추천을 함으로써 매출을 극대화 시킬 수 있겠습니다.</p><p>그렇다면 추천 시스템에서는 사용자가 누구인지 타겟팅 하는 것이 중요해집니다. 하지만, 사용자를 타겟팅하는 것은 사업부나 마케팅 입장에서 아주 상이한 점이 있습니다. 그리고 추천 목적도 도메인 마다 상이하므로 이 부분은 생략하고 넘어가도록 하겠습니다. </p><p><br></br></p><h2 id="추천-시스템의-흐름"><a href="#추천-시스템의-흐름" class="headerlink" title="추천 시스템의 흐름"></a>추천 시스템의 흐름</h2><img src="/images/recommendation_association/flow.png" alt="추천시스템의 흐름" style="zoom:50%;" /><p>추천 시스템이 어떻게 발전해 왔는지 살펴보겠습니다. 05년에 먼저 시작된 것은 연관 상품 추천, 장바구니 분석으로도 잘 알려진 Association Rule과 Apriori 알고리즘입니다. 이 알고리즘은 같이 구매하는 상품의 패턴을 잘 파악할 수 있는 알고리즘이였습니다. 이것이 발전하는 와중에 협업 필터링이 새롭게 등장했고 넷플릭스 추천대회를 통해 ALS등의 고급 테크닉이 나오게 되었습니다. 그러던 와중 Apriori의 한계를 극복하려는 시도로 만들어진 FP-Growth가 등장했습니다. 2010년대가 넘어가면서 많은 데이터를 쌓아두기 시작하는 빅데이터 시대가 열리게 되었고, 이 역사적 흐름에 맞춰 Spark와 Spark를 이용한 다양한 추천 알고리즘이 등장하기 시작했습니다. 이후에는 딥러닝을 이용한 다양한 추천시스템이 나왔고, 최근에는 개인화 추천시스템으로 넘어가고 있습니다. 이 흐름에서 오늘은 추천의 흐름 맨 앞단인, 연관상품 추천 부분을 다뤄보겠습니다.</p><p><br></br></p><h2 id="Association-Analysis"><a href="#Association-Analysis" class="headerlink" title="Association Analysis"></a>Association Analysis</h2><p>Association Analysis는 <strong>룰 기반</strong>의 분석입니다. 상품과 상품 사이에 어떤 연관이 있는지 알아보기 위해 시작한 분석입니다. 우리말로 해석하면 <code>연관 분석</code>이 되겠습니다. </p><p>여기서 연관에 대해서 정의해볼 필요가 있습니다. <strong>연관</strong>은 무엇일까요?</p><p>연관은 얼마나 잦은 빈도로 구매를 하는지, A에서 B를 구매하는 패턴을 의미합니다. 이 연관 분석은 흔히 장바구니 분석이라고도 불리며, 가장 유명한 예시는 역시 맥주과 기저귀 분석일 것입니다. 하지만 이 맥주와 기저귀 예시에서 보더라도, 이 분석으로 나온 결과가 상관 관계가 그리 크지 않았습니다. </p><h3 id="Association-Analysis-Metric"><a href="#Association-Analysis-Metric" class="headerlink" title="Association Analysis, Metric"></a>Association Analysis, Metric</h3><p>이 규칙의 평가 지표에 대해서 알아보겠습니다. 어떤 분석에는 항상 지표가 있어야 평가를 할 수 있고, 이 평가를 통해서 분석 방법을 개선할수도 있겠습니다. 이 지표는 세 가지로 나뉩니다.</p><ul><li>support, 지지도<ul><li>A→B에 대해서 조건 A에 대한 확률을 보는 것.</li><li>P(A) 또는 P(A,B)</li><li>$P(A)$</li></ul></li><li>confidence, 신뢰도<ul><li>A상품을 구매했을 때, B상품의 구매까지 이어질 확률</li><li>$confidence(A\rightarrow B)=\dfrac {P(A,B)}{P(A)}$</li></ul></li><li>lift, 향상도<ul><li>사건이 동시에 얼마나 발생하는지 비율, 독립성을 측정</li><li>$lift(A\rightarrow B)=\dfrac {P(A,B)}{P(A)\cdot P(B)}$</li></ul></li></ul><p>연관 분석 관련 알고리즘은 흔히 지지도를 베이스로 잡고 연관도를 측정하는데, 신뢰도와 향상도를 항상 고려하면서 추천 분석을 진행해야 좋은 결과가 나올 수 있습니다. </p><h3 id="Association-Analysis-적용하기"><a href="#Association-Analysis-적용하기" class="headerlink" title="Association Analysis 적용하기"></a>Association Analysis 적용하기</h3><p>이제 본격적으로 연관 분석을 진행해 보겠습니다. 먼저 상품이 4개 있다고 가정하겠습니다. 이 연관 분석은 가능한 모든 경우의 수를 찾아내고 지지도와 신뢰도, 향상도가 높은 규칙들을 찾아내야 합니다. 그렇다면 모든 경우의 수는 몇 가지가 될까요? 고등학교 수학시간에 배운 개념을 한 번 떠올려 봅시다. </p><ul><li>4개의 상품일 때 경우의 수<ul><li>${}_4 \mathrm{C}_1+ {}_4 \mathrm{C}_2 +{}_4 \mathrm{C}_3 + {}_4 \mathrm{C}_4 = 15$</li></ul></li></ul><p>15개의 경우의 수가 나왔습니다. 이렇게 연관 분석은 모든 경우의 수를 계산해서 진행해야 합니다. 아이템 수가 많아진다면 어떻게 될까요? 결과가 예상되기 시작합니다. </p><img src="/images/recommendation_association/exponential.png" alt="급격하게 상승하는 규칙 수" style="zoom:50%;" /><p>아이템이 100개라면 $1.26\times10^{30}$ 으로 엄청난 코스트가 발생합니다. 이를 극복하기 위해서, <strong>Aprirori가 등장했습니다.</strong></p><h2 id="Apriori"><a href="#Apriori" class="headerlink" title="Apriori"></a>Apriori</h2><p>Apriori는 아이템 셋의 증가를 효과적으로 줄이기 위해 다음과 같은 가정을 사용합니다.</p><ul><li>빈번한 아이템셋은 하위 아이템 셋 또한 빈번할 것</li><li>빈번하지 않은 아이템셋은 하위 아이템 셋도 빈번하지 않다. 고로 빼버리자!</li></ul><p>글로는 이해가 잘 안되니 큰 그림을 갖고 이해를 한 번 해보도록 하겠습니다.</p><img src="/images/recommendation_association/association_rule.png" alt="Apriori Rule" style="zoom:50%;" /><ul><li>맨 처음에 4개의 아이템에 대해서 단일 항목집단을 만들어 냅니다. </li><li>2,3 아이템 셋이 빈번하지 않다고 한다면(서포트가 가장 낮다면), 가정에 따라 그 하위인 023, 123, 0123도 빈번하지 않을 것이다!<ul><li>$Support(2,3) &gt; Support(0,2,3), (1,2,3)$</li></ul></li></ul><p>이런 식으로 진행이 됩니다. 이것을 정리하자면 다음과 같습니다.</p><ul><li>k개의 아이템을 가지고 단일항목집단 생성</li><li>단일항목집단에서 지지도 계산 후 최소 지지도 이상의 항목만 선택</li><li>2에서 선택된 항목 만을 대상으로 2개항목집단 생성</li><li>2개항목집단에서 최소 지지도 혹은 신뢰도 이상의 항목만 선택</li><li>위의 과정을  k개의 k-item frequent set을 생성할 때까지 반복</li></ul><p>이제 본격적으로 예를 들어 진행해보도록 하겠습니다.</p><h2 id="Apriori-적용하기"><a href="#Apriori-적용하기" class="headerlink" title="Apriori 적용하기"></a>Apriori 적용하기</h2><img src="/images/recommendation_association/tran_to_sparse.png" alt="Transaction 데이터를 Sparse Matrix로" style="zoom:50%;" /><img src="/images/recommendation_association/data.png" alt="Sparse Data" style="zoom:50%;" /><p>다음과 같이 위에 Transaction 데이터가 주어졌습니다. 이 데이터를 잘 분리해서 0과 1로 이루어지는 Sparse Matrix로 만들어줍니다. 재료가 준비되었다면, 아까와 같이 단일 항목집단을 생성해줍니다.</p><ul><li><p>단일 항목집단 생성 및 최소 지지도 계산</p><img src="/images/recommendation_association/min_support.png" alt="단일항목집단 생성" style="zoom:50%;" /><p>위의 매트릭스를 갖고 각 항목에 대해 서포트를 계산해봅시다. 우유는 전체 4건의 거래번호에서 2개만 있으므로 0.5가 되고, 양상추를 4건에서 3개가 있으므로 0.75가 됩니다. 이렇게 보듯이 서포트는 확률에 대한 값을 의미합니다. 여기서 최소의 서포트를 가지는 쥬스를 과감하게 삭제해줍니다.<br><br></br></p></li><li><p>2개 항목집단 생성</p><img src="/images/recommendation_association/min_support2.png" alt="최소 서포트 이상 항목 선택" style="zoom:50%;" /><p>위에서 선택한 항목을 기반으로 2개 항목 집단을 만듭니다. 4개의 항목을 가지고 2개씩 붙여주는 집합을 구성하면 됩니다. 조합을 이용하면 ${}_4 \mathrm{C}_2=6$ 6개의 집단이 만들어집니다. 이 역시 서포트를 계산해주고 최소 서포트를 가진 집단을 지워줍니다. </p><img src="/images/recommendation_association/summary.png" alt="정리를 하면?!" style="zoom:50%;" /><p>이것을 정리해주면 위와 같이 진행됩니다. 생각보다 많은 연산이 줄어든 것을 확인할 수 있습니다. 여기까지 Support를 바탕으로 알고리즘을 진행했습니다. confidence와 lift도 활용해서 진행할 수 있고, 다른 지표들도 잘 확인해야 한다는 점을 꼭 알아 두시면 좋습니다.</p></li></ul><h2 id="Apriori의-장-단점"><a href="#Apriori의-장-단점" class="headerlink" title="Apriori의 장 단점"></a>Apriori의 장 단점</h2><p>이 알고리즘의 장 단점은 명확합니다. 장점은 일단 너무 쉽습니다. <strong>원리가 간단해서</strong> 쉽게 이해할 수 있고 이 의미를 쉽게 파악할 수 있습니다. 또한 유의한 연관성을 갖는 구매패턴을 다양하게 찾아주는 장점을 가지고 있습니다. </p><p>다만, 단점은 데이터가 커질 때 발생합니다. 데이터가 크다면 속도가 느리고 연산량이 그래도 또 많아집니다. 그리고 실제 알고리즘을 사용하게 되면 너무 많은 연관상품들이 나타나는 문제가 발생합니다. 그리고 장점에서도 보이듯이 상품들의 <strong>유의한 연관성</strong>, 즉 연관 상품들이 상관관계는 의미하지만 <strong>그것이 인과를 의미하진 않습니다.</strong> 결과만을 본다면 어떤 것이 원인인지 파악하기 힘듭니다. 치킨과 치킨무를 예를 들어보면, 이 둘은 장바구니에 같이 담기는 패턴이 굉장히 많을 것입니다. 서포트가 높기 때문에 추천 셋으로 많이 등장할 것입니다. 하지만 결과만을 보고 치킨무를 샀기 때문에 치킨을 구매한 것인지, 치킨 때문에 치킨무를 산 것인지 알기는 힘듭니다. 우리의 경험에 의한 지식으로 당연히 치킨이 원인이라는 것을 단번에 알 수는 있지만, 복잡한 패턴이 나오면 판단하기 쉽지 않습니다. </p><h2 id="FP-Growth-Frequent-Pattern"><a href="#FP-Growth-Frequent-Pattern" class="headerlink" title="FP-Growth(Frequent Pattern)"></a>FP-Growth(Frequent Pattern)</h2><p>FP-Growth는 데이터가 점점 많이 쌓이기 시작하면서 Apriori의 연산 속도를 개선하기 위해 등장했습니다. 이 연관 규칙을 어떻게 효과적으로 빠르게 만들 수 있었을까요? 코딩 알고리즘을 배우면 많이 등장하는 개념이 있습니다. <code>Tree</code> 입니다.</p><h3 id="핵심-아이디어-연관-규칙을-트리로-만들어-단점을-개선해보자"><a href="#핵심-아이디어-연관-규칙을-트리로-만들어-단점을-개선해보자" class="headerlink" title="핵심 아이디어 : 연관 규칙을 트리로 만들어 단점을 개선해보자!"></a>핵심 아이디어 : 연관 규칙을 트리로 만들어 단점을 개선해보자!</h3><p>FP-Growth도 기본적인 성질은 Apriori를 따라갑니다. 따라서 기본적인 설정은 Apriori와 거의 같습니다. Tree 구조를 활용했다는 점만 다르다고 볼 수 있습니다. 알고리즘을 적용하는 순서는 다음과 같습니다.</p><ul><li><p>모든 거래를 확인해 각 아이템마다의 서포트를 계산하고 최소 지지도 이상의 아이템만 선택</p></li><li><p>모든 거래에서 빈도가 높은 아이템 순서대로 순서를 정렬(여기서 부터 달라짐)</p></li><li><p>부모 노드를 중심으로 거래를 자식노드로 추가해주면서 tree를 생성</p></li><li><p>새로운 아이템이 나올 경우에는 부모노드부터 시작하고, 그렇지 않으면 기존의 노드에서 확장</p></li><li><p>위의 과정을 모든 거래에 대해 반복하여 FP Tree를 만들고 최소 지지도 이상의 패턴만을 추출</p></li></ul><p>자, 이제 아까의 데이터를 갖고 FP-Growth를 적용해봅시다.</p><h3 id="FP-Growth-적용하기"><a href="#FP-Growth-적용하기" class="headerlink" title="FP-Growth 적용하기"></a>FP-Growth 적용하기</h3><img src="/images/recommendation_association/data.png" alt="Data" style="zoom:50%;" /><p>데이터는 똑같이 준비해 놓았습니다.</p><ul><li><p>주스는 똑같이 삭제</p><img src="/images/recommendation_association/fp-growth.png" alt="주스 데이터는 삭제" style="zoom:50%;" /><p>주스를 삭제하고 정리를 한번 해줍니다.</p></li><li><p>트리 형성</p><img src="/images/recommendation_association/sorted_data.png" alt="정렬된 데이터" style="zoom:50%;" /><img src="/images/recommendation_association/fp-growth2.png" alt="FP-Tree 그리기 1" style="zoom:50%;" /><p>트리를 만드는 과정은 생각보다 간단합니다. 먼저 Root 노드를 만들어주고, 가장 빈도가 높은 순으로 노드 옆에 붙여줍니다. 여기에서는 기저귀와 양상추로 노드를 구성해보겠습니다. 거래번호 0의 아이템대로 기저귀 옆에 우유 노드를 붙여주고, 양상추에도 기저귀와 맥주, 우유를 붙여줍니다. 거래번호를 따라가면서 같은 아이템이 나온다면, 그림과 같이 아이템 옆에 숫자를 +1 시켜줍니다. </p><img src="/images/recommendation_association/fp-growth3.png" alt="FP-Tree 그리기 2" style="zoom:50%;" /></li></ul><ul><li><p>연관 규칙 찾기, 지지도 낮은 순서 부터 조건부 패턴을 생성 (우유부터 시작)</p><img src="/images/recommendation_association/conditional1.png" alt="조건부 패턴 1" style="zoom:50%;" /><p>이제 서포트가 낮은 순서부터 조건부 패턴을 만들어줍니다. 우유의 서포트가 가장 낮으므로 우유가 붙어있는 노드를 따라가서  조건부 패턴을 파악해줍니다.</p><img src="/images/recommendation_association/conditional2.png" alt="조건부 패턴 2" style="zoom:50%;" /><p>이런식으로 조건부 패턴을 다 파악했다면, 어떤 아이템이 들어왔을 때 트리를 통해서 추천 아이템을 전달할 수 있게됩니다. 위의 조건부 패턴 표를 보고, 맥주를 구매한 고객이 등장한 경우를 생각해보겠습니다. 맥주가 들어온 고객에게는 기저귀를 구매한 경우와 양상추를 구매한 경우로 나뉘게 됩니다. 양상추를 구매한 경우는 거기서 더 진행이 되지 않으므로 끝이나고, 기저귀를 구매했다면 더 깊게 들어가 양상추까지 구매한 패턴을 알 수 있게 됩니다. Tree를 타고 진행이 된다는 것이 느껴지시나요? <strong>Tree구조라는 점이 FP-Growth의 가장 큰 특징입니다.</strong></p></li></ul><h3 id="FP-Growth-장-단점"><a href="#FP-Growth-장-단점" class="headerlink" title="FP-Growth 장 단점"></a>FP-Growth 장 단점</h3><p>장점은 역시 Tree구조이기 때문에 Apriori보다 훨씬 <strong>빠르며</strong>, DB에서 스캔하는 횟수도 줄어들게 됩니다. Apriori와 비교하면, Apriori는 최소 한 번의 DB스캔에서부터 가장 긴 트랜잭션의 아이템 셋을 뒤져야 할 가능성이 있는 반면, FP-Growth는 첫번째 스캔으로 단일 항목집단을 만들고, 두 번째 스캔으로 Tree구조를 완성합니다. 완성한 FP-Tree를 이용해서 분석하면 되니까, <strong>딱 2번만 스캔하면 됩니다</strong>. 후보 Itemset을 생성할 필요없이, Tree만 구성하면 끝인 것입니다. </p><p>단점은 <strong>아직도 대용량 데이터 셋</strong>에서 메모리를 효율적으로 사용하지 않는다는 점입니다. 초기 알고리즘이라 그런 점이 있지만 이 한계 때문에 다양한 시도들이 제안되었습니다. 또한 Apriori에 비해 설계하기 어렵고, 서포트의 계산은 무조건 FP-Tree가 만들어져야 가능하다는 단점이 존재합니다. </p><p><br></br></p><hr><h3 id="연관-분석-알고리즘의-한계"><a href="#연관-분석-알고리즘의-한계" class="headerlink" title="연관 분석 알고리즘의 한계"></a>연관 분석 알고리즘의 한계</h3><p>마지막으로 이 알고리즘들의 한계에 대해서 지적해보면서 글을 마무리 해보려고 합니다. 글을 쭉 읽다보면, 최소 서포트에 대한 개념이 자주 등장합니다. 최소 서포트는 아이템이 많아지게 되면서 설계자가 직접 지정해야 합니다. 아이템 셋을 얼마나 뽑아낼지, 얼마나 상관관계가 괜찮은지에 따라 서포트 값을 설정해주어야 하는 것입니다. 하지만, <strong>최소 지지도를 선정</strong>하는 정답은 존재하지 않습니다. 계산 공식은 없고 여러 지표들을 조합해서 분석하면서 최적의 값을 지정하곤 합니다. 가장 큰 한계점으로, 실제 서비스에서는 최적 서포트 값이 매번 바뀌므로 계산하는 공식이 필요한데, 사실상 만들기는 불가해서 서비스에 잘 사용하지 않고 있습니다. 다만 많은 패턴들을 보여주는 장점이 있기 때문에 베이스라인으로 사용해서 EDA하는 식으로 많이 활용하고 있습니다. </p><p>또한 <strong>인과를 알기 어렵다는 한계</strong>가 발견됩니다. 이렇게 원인과 결과를 확실하게 분석하고 싶다는 아이디어가 등장하면서 Casual Inference라는 연구분야가 자연스럽게 만들어졌습니다. 인과 추론에 관심있는 분들은 Causual Inference 키워드로 찾아보시면 좋습니다. </p><p>그리고 <strong>메모리와 시간을 너무 많이 소비</strong>하는 알고리즘이기 때문에, 즉, 가성비가 잘 나오지 않아 사용하기 힘듭니다. 최근이야 Spark를 통해서 대용량 처리도 가능해졌긴 하지만, 굳이 큰 비용을 들이면서까지 연관분석을 하려는 시도는 많이 보이지 않는 것 같습니다. 위에서 지적한대로 지표를 직접 지정해줘야하는 문제와 더불어 서비스에 잘 활용되지 않는 큰 이유 중에 하나입니다. </p><p>이런 한계들 때문에 <strong>Collaborative Filtering</strong> 계열 알고리즘이 부상하기 시작했고, 목적에 따라 user based추천, item based 추천을 생성하기 시작했습니다. CF의 한계와 더 좋은 성능을 위해서 딥러닝을 활용해 패턴을 인식시키고자 하였고, 최근에는 개인화 추천까지 발전해오고 있는 흐름입니다. </p><hr><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li>T-Academy : <a href="https://tacademy.skplanet.com/live/player/onlineLectureDetail.action?seq=194">https://tacademy.skplanet.com/live/player/onlineLectureDetail.action?seq=194</a></li><li>ratsgo’s blog 연관규칙 : <a href="https://ratsgo.github.io/machine%20learning/2017/04/08/apriori/">https://ratsgo.github.io/machine learning/2017/04/08/apriori/</a></li><li>시간여행자 블로그 : <a href="http://openuiz.blogspot.com/2018/11/fp-growth-algorithm-frequent-pattern.html">http://openuiz.blogspot.com/2018/11/fp-growth-algorithm-frequent-pattern.html</a></li><li>떡춘님 블로그 : <a href="https://blog.naver.com/sindong14/220661064114">https://blog.naver.com/sindong14/220661064114</a></li></ul>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2021/03/07/apriori-FP/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Airflow Basic. 두 번째</title>
      <link>http://tkdguq05.github.io/2021/02/21/airflow-basic2/</link>
      <guid>http://tkdguq05.github.io/2021/02/21/airflow-basic2/</guid>
      <pubDate>Sun, 21 Feb 2021 06:52:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;Airflow 구조 파악하기, 실수 줄이기&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Airflow 구조 파악하기, 실수 줄이기</p><a id="more"></a><h1 id="글에-들어가기-전에…"><a href="#글에-들어가기-전에…" class="headerlink" title="글에 들어가기 전에…"></a>글에 들어가기 전에…</h1><p>Airflow의 구조에 대해서 들어가기 전에, Airflow의 컨셉에 대해서 간략하게 설명한 글이 있습니다. 기본적인 개념에 대해서 먼저 알고 싶으신 분은 <a href="https://tkdguq05.github.io/2020/03/14/airflow-start/#more">Airflow Basic</a>을 읽어주시면 감사하겠습니다. 간단하게 컨셉을 이해한 뒤에 이 글을 읽으시면 더욱 좋습니다.</p><br></br><h2 id="Airflow-구성요소"><a href="#Airflow-구성요소" class="headerlink" title="Airflow 구성요소"></a>Airflow 구성요소</h2><p>Airflow의 구성요소는 크게 3개입니다. Airflow Webserver, Scheduler 그리고 Worker 입니다. 실제로 Airflow를 설치하셨다면, <code>airflow webserver</code>, <code>airflow scheduler</code>, <code>airflow worker</code> 명령어를 입력하면 됩니다. 세 명령어를 다 입력했다면, airflow를 다 띄웠다고 할 수 있습니다. 운영하고 있는 Airflow 서버에서도 이상이 있으면 체크하는 것이 명령어를 입력한 세 개의 구성요소입니다. 먼저 Airflow의 구성요소에 대한 큰 그림을 보고 각 구성요소들에 대해서 설명해보도록 하겠습니다.</p><img src="/images/airflow_basic2/airflow_arc.png" alt="Airflow Architecture" style="zoom:50%;" /><br></br><h3 id="Airflow-Scheduler"><a href="#Airflow-Scheduler" class="headerlink" title="Airflow Scheduler"></a>Airflow Scheduler</h3><p>Airflow의 스케쥴러는 말 그대로 Airflow의 작업들을 스케쥴링 해줍니다. DAG들을 파싱해서 스케쥴된 작업들의 작업 간격을 확인하고 실제로 작업 명령을 워커에 전달합니다. 또한 DAG에 걸려있는 의존성을 확인하고 걸려있다면, 실행 큐에 더해줍니다. 이와같이 스케쥴러는 Airflow의 심장과 같은 역할을 수행하고 DAG와 직접적으로 붙어있습니다. 붙어야 하는 DAG의 위치는 airflow.cfg 파일에서 지정할 수 있습니다. airflow.cfg는 airflow에 대한 설정들이 모여져 있는 파일입니다.</p><img src="/images/airflow_basic2/airflow_dag_path.png" alt="Airflow Dag의 경로" style="zoom:50%;" /><p>하나의 서버에서 돌아가는 싱글구조의 Airflow라면 이 설정에서 딱히 조정할 것은 없습니다. 다만 mysql에 접속할때 사용하는 user명과 비밀번호를 넣어줘야 합니다. 싱글구조가 아니라면(워커와 스케쥴러가 분리되어 있다면) 스케쥴러의 ip주소도 넣어줍니다. configuration에서 <code>result_backend</code>와 <code>sql_alchemy_conn</code>을 찾아서 수정해줍니다. Airflow의 mysql 설정이 궁금하신 분들은 <a href="https://tkdguq05.github.io/2020/12/13/airflow-on-ec2/">Airflow EC2에 구축하기</a>를 참고하시면 좋습니다.</p><img src="/images/airflow_basic2/airflow_mysql_path1.png" alt="result_backend를 수정해주자" style="zoom:50%;" /><img src="/images/airflow_basic2/airflow_mysql_path2.png" alt="sql_alchemy_conn을 수정하자" style="zoom:50%;" /><br></br><h3 id="Airflow-Worker"><a href="#Airflow-Worker" class="headerlink" title="Airflow Worker"></a>Airflow Worker</h3><p>Airflow 워커는 스케쥴러에서 할당해놓은 작업들을 DB에서 갖고와서 실제로 실행합니다. 작업들은 DAG를 구성할때 queue를 이용해서 어떤 워커에서 수행할지 결정되고 워커는 큐를 설정해서 기동합니다. 워커는 <code>airflow worker -q main</code> 과 같이 큐를 설정할 수 있습니다. DAG에서 queue를 아래와 같이 지정해놓으면 스케쥴러는 해당 큐에 맞게 작업을 나눠놓고 워커는 자신의 큐에 맞는 작업을 찾아서 갖고옵니다. 찾은 큐를 워커에서 실행하고, 실행후 나온 로그들을 회수합니다. 이 로그들은 Metastore(Airflow DB)에 저장되고 저장된 로그들은 웹 서버를 통해 확인할 수 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">t1 = BashOperator(</span><br><span class="line">    task_id=<span class="string">'t1'</span>,</span><br><span class="line">    bash_command=<span class="string">"sleep 1"</span>,</span><br><span class="line">    queue=<span class="string">"main"</span>,</span><br><span class="line">    dag=dag)</span><br><span class="line"></span><br><span class="line">t2 = BashOperator(</span><br><span class="line">    task_id=<span class="string">'t2'</span>,</span><br><span class="line">    bash_command=<span class="string">"sleep 1"</span>,</span><br><span class="line">    queue=<span class="string">"main2"</span>,</span><br><span class="line">    dag=dag)</span><br><span class="line"></span><br><span class="line">t3 = BashOperator(</span><br><span class="line">    task_id=<span class="string">'t3'</span>,</span><br><span class="line">    bash_command=<span class="string">"sleep 1"</span>,</span><br><span class="line">    queue=<span class="string">"main3"</span>,</span><br><span class="line">    dag=dag)</span><br></pre></td></tr></table></figure><p><strong>워커가 큐를 찾아 가져오는 구조가 좀 특이합니다</strong>. 일반적으로 생각하기에는 스케쥴러가 워커에 작업을 보내줄 것 같은데, 그렇지 않습니다. 이 큐를 가져오는 구조 라는 특성 때문에 Airflow를 싱글구조에서 워커와 DB, 스케쥴러로 나누는 구조로 변경할때, 보안그룹 설정에서 스케쥴러의 인바운드 포트만 열어주게 됩니다. 스케쥴러의 인바운드 포트만 열어주고, 워커의 airflow.cfg로 들어가서 어떤 metastore에서 작업을 할당받을지 주소를 적어주면 끝입니다. 사실상 스케쥴러 인스턴스의 airflow.cfg만 가져와서 그대로 붙여주면 아주 쉽게 설정이 끝납니다.</p><br></br><h3 id="Airflow-Webserver"><a href="#Airflow-Webserver" class="headerlink" title="Airflow Webserver"></a>Airflow Webserver</h3><p>웹 서버는 Airflow의 Metastore 저장된 로그를 보여주거나 스케쥴러에 의해 파싱된 DAG들을 시각화해서 제공합니다. 이 UI를 통해 DAG들이 돌아가는 상황과 결과들을 확인할 수 있습니다.</p><img src="/images/airflow_basic2/airflow_web.png" alt="Airflow 웹 서버" style="zoom:50%;" /><p>Dag를 만든 후에 스케쥴러가 Dag폴더의 위치를 찾으면 여기에 있는 Dag를 파싱해서 웹으로 보여줍니다. 가장 왼쪽에 On이라고 되어 있는 부분이 있는데, 맨 처음에는 Off로 되어 있습니다. 이것을 On으로 바꿔주고, 현재 시간이 Dag에 설정된 <code>start_date</code> 보다 나중 시간이라면 정상적으로 작업을 실행하고, 그렇지 않으면 작업을 수행하지 않습니다. </p><br></br><h3 id="주의해야-할-점"><a href="#주의해야-할-점" class="headerlink" title="주의해야 할 점"></a>주의해야 할 점</h3><ol><li><p>Timezone, - UTC, KST</p></li><li><p>dag_name</p></li><li><p>병렬작업 설정</p></li></ol><p>Airflow Basic에 있는 내용들을 종합하면 간단한 Dag는 작성해서 파이프라인을 만들 수 있을 것입니다. 여기서부터는 작업하면서 실수가 잦았던 부분에 대해서 다뤄보려고 합니다. </p><p>첫 번째는 시간대 설정입니다. 이 글을 보고 계시는 대부분의 분들은 KST시간대를 사용하시는 분들일 것입니다. 하지만 Airflow는 한국인이 만든 것이기 아니기 때문에, 모든 사람들이 다 사용할 수 있게 시간대를 UTC로 설정해두었습니다. 그래서, 작업하는 시간대와 Webserver에서 보여지는 시간대는 UTC를 사용합니다. 위 UI에서도 Last Run이 보이는데, 이것은 UTC시간대를 적용해서 나오는 시간입니다. 하지만, 만약에 Airflow를 AWS위에 올려서 사용하고 cron 스케쥴을 잡아서 실행한다면, 이 cron스케쥴은 KST를 적용받습니다. </p><img src="/images/airflow_basic2/schedule_interval.png" alt="schedule_interval" style="zoom:50%;" /><p>위의 사진에서 보든이 schedule_interval에는 cron 스케쥴이 들어갑니다. 작성된 스케쥴을 그대로 읽으면 AM 01:30분에 돌아가게 됩니다. 지금은 글로 설명되어 있어서 ‘이게 왜 헷갈리지’ 라고 생각하실 수도 있겠지만, Last Run이나 Airflow의 Tree View를 보면서 작업 수행 시간을 확인하다 보면 스케쥴 인터벌에 UCT로 작성하는 큰 실수를 할 수 있습니다. 물론 이것은 개인의 경험에 의한 경고입니다. 시간을 잘 확인하는 습관을 들입시다.</p><blockquote><p>Airflow 1.10.10 버전 부터는 UI에서 Timezone을 선택할 수 있다고 합니다. </p><p><a href="https://github.com/apache/airflow/pull/8046">https://github.com/apache/airflow/pull/8046</a></p></blockquote><p>두 번째는 dag_name입니다. Dag를 만들고 잘 돌아가면 보통 Dag를 새로 만들어서 구성하기 보다는, 복사해서 붙여넣고 자잘한 부분만을 수정하는 경우가 많습니다. 저도 그렇습니다. 이럴 경우에 다른 자잘한, 중요한 로직과 관련된 부분들은 수정을 잘 하는데, dag_name을 바꿔놓지 않는 경우가 많습니다. 이렇게 되면, Webserver에서 Graph view를 볼 때, Dag가 새로고침 할때마다 변경되는 기이한 현상을 목격할 수 있습니다. 분명히 변경이 된 것을 Code에서 확인을 했는데, 실제로 Graph View에 나오는 것은 이전 코드입니다. 새로 고침을 하면 또 수정된 코드로 보입니다. 이것은 만들어진 dag파일명은 다르지만 dag_name이 같아서 웹 서버가 같은 dag_name을 호출하기 때문입니다. 흔히 dag파일명으로 Airflow 웹 서버가 구분할 것이라고 생각하지만, 웹 서버는 dag_name을 읽어옵니다. 이 dag_name은 위 사진에서처럼, with DAG()안에 들어갑니다.</p><p>세 번째는 병렬작업 설정입니다.</p><img src="/images/airflow_basic2/airflow_paralell.png" alt="병렬실행" style="zoom:50%;" /><p>어떤 작업을 사진처럼 병렬로 예쁘게 실행시키고 싶을 때가 있습니다. 물론 이것은 그림으로만 병렬이고, 실제로는 작업이 하나씩 돌아가는 구조입니다. 그 이유는 코드를 확인해보면 됩니다. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">  step_adder = EmrAddStepsOperator(</span><br><span class="line">    task_id=<span class="string">"emr_connection_&#123;&#125;"</span>.format(file),</span><br><span class="line">    job_flow_id=created_job_flow_id,</span><br><span class="line">    aws_conn_id=<span class="string">"aws_default"</span>,</span><br><span class="line">    steps=get_pyspark_execute_step(file),</span><br><span class="line">    queue=<span class="string">"main"</span>,</span><br><span class="line">    dag=dag</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  step_checker = EmrStepSensor(</span><br><span class="line">    task_id=<span class="string">"job_execution_&#123;&#125;"</span>.format(file),</span><br><span class="line">    job_flow_id=created_job_flow_id,</span><br><span class="line">    step_id=<span class="string">"&#123;&#123;&#123;&#123; task_instance.xcom_pull('emr_connection_&#123;&#125;', key='return_value')[0] &#125;&#125;&#125;&#125;"</span>.format(file),</span><br><span class="line">    aws_conn_id=<span class="string">"aws_default"</span>,</span><br><span class="line">    queue=<span class="string">"main"</span>,</span><br><span class="line">    dag=dag</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">dataloader_checker &gt;&gt; step_adder &gt;&gt; step_checker &gt;&gt; preprocessing_end</span><br></pre></td></tr></table></figure><p>병렬 구조로 돌리는 것은 사실 for문으로 묶여있습니다. 병렬처럼 묶는 방법은 다양하지만 여기서는 for문을 사용했습니다. 이렇게 for문으로 구성하고 작업 순서를 부등호를 이용해서 정해주면 끝이지만, 여기서 실수가 자주 발생합니다. <code>indentation</code> 을 집중해서 보셔야 합니다. 여기서 작업 순서가 적힌 dataloader~~ 부분을 부면 for문 안쪽으로 indentation이 잡혀있습니다. 보통  for문을 다 작성하면 ‘다 됐다!’라는 생각에 tab을 치지 않고 작업순서를 넣는데, 이렇게 되면 병렬로 잡힐거라고 생각했던 작업이 다 깨져버리게 됩니다. Tab을 꼭 한번 눌러주고 작업 순서를 작성해주시면 아주 좋습니다.</p><hr><h3 id="덧붙여"><a href="#덧붙여" class="headerlink" title="덧붙여,"></a>덧붙여,</h3><p>Airflow를 이용하면 위 코드에서처럼 EMR을 연계해서 작업을 수행할 수 있습니다. Airflow의 장점중에 하나인데, 다양한 Hook과 Operator가 많다는 것입니다. Hook과 Operator를 조합하면 다양한 서비스 파이프라인을 개발할 수 있습니다. Airflow와 EMR을 연계해서 Spark job을 실행하고 값을 저장 부분은 다음 글로 작성해보도록 하겠습니다. 부족한 글 읽어주셔서 감사합니다.</p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2021/02/21/airflow-basic2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS 비용관리의 서막, EMR</title>
      <link>http://tkdguq05.github.io/2021/01/24/cost-mgt-emr/</link>
      <guid>http://tkdguq05.github.io/2021/01/24/cost-mgt-emr/</guid>
      <pubDate>Sun, 24 Jan 2021 06:36:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;FinOps? EMR 비용관리&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>FinOps? EMR 비용관리</p><a id="more"></a><h1 id="비용관리의-서막-FinOps"><a href="#비용관리의-서막-FinOps" class="headerlink" title="비용관리의 서막, FinOps?"></a>비용관리의 서막, FinOps?</h1><p>비용관리를 본격적으로 시작하게되는 때는 언제일까요? 비용관리에 대한 책에 감명을 받아서? 물론 FinOps에 관한 책을 추천 받았고 이런 책이 있다는 것에 대해서 놀라기도 했습니다. 본격적으로 비용관리를 체계를 갖추어 해야겠다는 생각도 같이 들었습니다. 하지만 일반적으로는 AWS 요금이 과하게 부과된 날이지 않을까 합니다. 12월의 평화로운 어느 날에 개발 팀장님께서 조용히 저를 부르셨고, 충격적인 12월의 요금을 보면서 비용관리의 필요성을 깨닫게 되었습니다. </p><p>앞서 FinOps에 관한 책을 추천 받았다고 했는데, 이 책을 기반으로 비용 관리를 해야겠다고 마음을 먹었습니다. 이 책은 마이클 풀러의 <a href="https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcQ12PNmpt2mrX5XbiP5lOyLJ1hA5trRV5ficm1fL_vGDRuCpvRb">Cloud FinOps: Collaborative, Real-Time Cloud Financial Management</a> 입니다.<br><img src="https://image.yes24.com/Goods/74391396/L" alt="cloud finops">책에 대한 소개글을 작성하려고 한게 아니기 때문에 간단하게 책에 대해서 읽어본 소감을 말하자면, 엄청나게 세밀하게 관리포인트를 집어주지는 않습니다. 제가 아는 내용이 많지 않아서 그럴 수도 있겠습니다. 비용관리라는 말을 듣고 어떻게 관리할 수 있을까? 에 대해서 생각해보면 나오는 개념들이 정확한 용어로 설명이 되어있기는 합니다. 나쁜 책은 아니라고 생각합니다. 실무자보다는 윗 분들이 먼저 읽었으면 합니다.</p><h2 id="FinOps"><a href="#FinOps" class="headerlink" title="FinOps"></a>FinOps</h2><p>FinOps는 Finance + DevOps가 결합된 말입니다. 클라우드 환경에서 재무와 개발/운영을 긴밀히 결합함으로써 비용을 최적화하여 관리하고 통제할 수 있도록 하는 것입니다. 클라우드 비용 최적화를 위한 베스트 프렉티스와 공통된 표준 정책으로 기술과 비즈니스, 재무 전문가를 결합함으로써 비즈니스 가치 극대화하려는 것입니다.(출처 : Bespin Global)<br>회사에서 비용관리를 제대로 시작하게 되면서 FinOps라는 말을 붙이지는 않았습니다. 재무에 관련된 인원을 포함하기 어려웠기 때문입니다. 대신에 비용관리에 관련된 사람들이 모였습니다. AWS의 비용 급상승에 관련된 부서의 실무자와 개발 팀장님, TA, 기획 팀장님입니다. 사실상 운영에 관련된 모든 사람이 모이게 되었습니다. 이렇게 모인 사람들과 비용에 대해서 논의했고 현재는 1차적인 최적화 작업을 완료하였습니다. </p><h2 id="비용의-원인-EMR"><a href="#비용의-원인-EMR" class="headerlink" title="비용의 원인, EMR"></a>비용의 원인, EMR</h2><p>다시 문제의 12월의 끝자락으로 돌아와서, 원인 파악을 해보기 시작했습니다. 원인 중 하나는 EMR 비용의 갑작스러운 증가였습니다. EMR이 무엇일까요? 구글에 검색하면 기다렸다는 듯이 AWS는 <a href="https://docs.aws.amazon.com/ko_kr/emr/latest/ManagementGuide/emr-what-is-emr.html">문서</a>를 만들어 놓았습니다. 쉽게 말하자면, EMR은 AWS 위에서 Hadoop이나 그 기반 프레임워크들을 위한 빅 데이터 프레임워크 실행을 간소화하는 관리형 클러스터 플랫폼입니다. 저희의 경우 Spark를 사용하기 위해 EMR을 쓰고 있습니다. </p><h3 id="예상되는-비용-포인트"><a href="#예상되는-비용-포인트" class="headerlink" title="예상되는 비용 포인트"></a>예상되는 비용 포인트</h3><ol><li>많은 고객사에 대한 대응</li><li>오버 사이징된 클러스터</li><li>Airflow TerminateJobFlow</li><li>EMR Cluster 관리</li></ol><p>첫 번째는 많은 고객사에 대한 대응이였습니다. 새롭게 오픈한 서비스로 인해 고객사가 갑자기 많이 들어오게 되었습니다. FinOps 책에 나온대로, 비용은 $사용량\times요율$ 이므로 사용량이 늘어났기 때문에 비용이 갑자기 증가될 수 밖에 없었습니다. 갑자기 늘어난 고객사를 줄일 수도 없는 노릇이므로, 다른 관리 포인트를 찾아 봤습니다. </p><p>두 번째는 오버 사이징된 클러스터였습니다. 현재 제공하고 있는 서비스들은 대부분 Airflow를 사용해서 Spark로 작업을 처리한 뒤 종료되는 구조를 가지고 있습니다. 작업을 할 때 만들어지는 클러스터들의 스펙은 대부분 동일한데, 소규모 고객사에 대해서 서비스를 할 때도 같은 스펙을 사용하고 있었습니다. 고객사의 일 평균 방문 수와 상품의 sku 수를 따져서 고객사 규모를 측정하는데, 이 기준에서 작은 고객사로 분류되는 고객사들의 클러스터 스펙을 조정해 주었습니다. </p><p>세 번째는 Airflow의 TerminateJobFlow입니다. 앞서 설명한대로, EMR 클러스터는 작업을 마치면 Airflow의 TerminateJobFlow 오퍼레이터를 이용해 작업을 종료해 클러스터를 삭제하게 됩니다. EMR은 오래 돌 수록 요금이 어마어마하게 부과되기 때문에 이런 파이프라인을 만들어 두었습니다. 그런데 가끔 이 오퍼레이터가 말을 안듣는 경우가 발생하곤 합니다. 현재의 Airflow에 있는 DAG들은 새벽에도 많이 실행되고 있습니다. 그래서 출근했을 때 새벽 내내 돌고 있는 EMR 클러스터들을 마주하게 되는 경우가 종종 있었습니다. </p><p>이런 와중에 EMR 콘솔 페이지에 나오지는 않지만 EC2 페이지에 등장하는 EMR 클러스터들이 발견되었습니다. 12월 초 부터 쌩쌩 도는 인스턴스들이었는데, 네임 태그도 달려있지 않은, 알 수 없는 것들이었습니다. 12월 초 부터 계속 돌고 있었기 때문에, 여기서 큰 비용이 발생하고 있었습니다.<br><img src="/images/cost_mgt/screen2_edit.png" alt="쌩쌩 도는 인스턴스들"></p><p>그래서 이 인스턴스들이 왜 남아있는지 알기 위해서 AWS측에 문의를 넣었습니다. 몇 번의 핑퐁이 오갔고<br>“As you can observe above, that either the cluster didn’t finish the step it was running or the step itself didn’t get submitted to it or the TerminateJobFlows API call was not made by the Airflow workflow.”<br>이러한 답변과 기타 등등을 얻을 수 있었습니다. 결국 미팅을 잡고 이야기 하기로 했습니다.(참고로 보통 이런 미팅을 하게 되면 인도 출신 엔지니어와 이야기를 하게 됩니다. 저는 인도 악센트에 친숙하지 않아서 애를 많이 먹었습니다. <del>전화 미팅이었지만 이역만리 타국과의 통화에 감사함보다는 실시간 채팅에 더 감사하게 되었다는 후기</del>)</p><p>AWS 측과 얘기를 한 후 추가로 알게 된 사실이 있었습니다. 그것은 <code>VisibleToAllUsers</code>라는 옵션이었습니다. AWS EMR에는 독특하게 모든 유저에게 클러스터를 보이는, VisibleToAllUsers이 존재합니다. 이 옵션이 체크되어 있지 않으면, 클러스터 페이지에서 해당 클러스터를 볼 수 없게 됩니다. 12월에 종료되지 않은 이 클러스터들은 이 옵션에 체크되어 있지 않은 상태로 생성이 되었고, 그래서 클러스터 콘솔 페이지에서 관리를 할 수 없었던 것이었습니다. </p><p>Airflow에서 EMR 클러스터를 생성할 때도 마찬가지입니다. <code>VisibleToAllUsers</code>옵션을 지정해서 클러스터를 생성할 수 있습니다. 이 옵션이 제대로 지정되지 않았고, 그래서 삭제되지 않고 관리되지 못한 인스턴스들이 발생한 것이었습니다. 12월 초에 새로운 서비스를 위한 Airflow 인스턴스를 새로 만들었는데, 이 파라미터값을 관리하는 Connection 부분이 초기화 되었던 것입니다. 당시에 인수인계다 뭐다 정신이 없었고 그런 상황에서 체크를 제대로 하지 않고 넘어갔던 것이 화근이었습니다. </p><p>아무튼 이렇게 해서 Connection에서 emr_default 부분에 <code>VisibleToAllUsers</code>을 true로 변경해 주었고, 클러스터 페이지에 나타나지 않는 인스턴스들은 사라지게 되었습니다. 하지만 추가 대응 방안이 필요했습니다. (AWS 측에서는 Airflow 매니지드 서비스를 이용하라고 했지만, 진심 너무 비쌉니다. 이렇게 된거 GCP로 옮기면 어떨까? Composer 참 싼데, 보고 있나 AWS?? You See Me??)</p><p>네 번째는 EMR Cluster 관리에 대한 것입니다. EMR Cluster 페이지에 직접 들어가서 삭제되지 않은 클러스터들을 일일이 보는 프로세스가 맘에 들지 않았습니다. 자동화에 집착하는 집착맨이기 때문에, 좀 더 세련된 방법을 찾고 싶었습니다. TA 분과 이야기 해 본 결과 boto3를 이용하면 클러스터에 페이지에 쉽게 접근할 수 있다는 것을 알 게 되었습니다. </p><h2 id="boto3로-클러스터-관리하기"><a href="#boto3로-클러스터-관리하기" class="headerlink" title="boto3로 클러스터 관리하기"></a>boto3로 클러스터 관리하기</h2><p>Boto3는 AWS에서 제공하는 파이썬 용 SDK(software development kit)입니다. boto3를 사용하면, S3나 EMR등 AWS의 다양한 서비스에 접근이 가능합니다.</p><p>boto3가 없다면 <code>pip3 install boto3</code>로 설치해 주시고, AWS에 로그인 해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import boto3</span><br><span class="line">from pprint import pprint</span><br><span class="line"></span><br><span class="line">client &#x3D; boto3.client(&#39;emr&#39;)</span><br><span class="line"></span><br><span class="line">response &#x3D; client.describe_cluster(ClusterId&#x3D;&#39;j-xxxxxxxxxx&#39;)</span><br><span class="line"></span><br><span class="line">pprint(response)</span><br></pre></td></tr></table></figure><p>이렇게 입력을 해주면 해당 클러스터 아이디에 대한 값들이 쫙 나오게 됩니다. <del>너무 쉽죠? AWS를 쓰세요. boto3는 참 좋습니다. 대신 더럽게 비쌉니다.</del> 이 정보들은 dictionary로 되어 있으니, 키 값을 잘 조회 해서 값에 접근하면 됩니다.</p><p>대표적인 키 값은 Cluster, Ec2InstanceAttributes, Id, Name, NormalizedInstanceHours, Status, Timeline 등입니다. 저는 TimeLine을 이용해서 생성시간과 현재시간의 차를 구한 다음, 항상 띄어놓는 분석용 EMR 시간보다 작고 5시간 이상 RUNNING하거나 WAITING하고 있는 클러스터들을 종료시킬 생각입니다. 활용방안은 다양하니 각자의 관리포인트대로 작업하시면 될 것 같습니다.</p><hr><h2 id="이렇게-해서"><a href="#이렇게-해서" class="headerlink" title="이렇게 해서"></a>이렇게 해서</h2><p>비용관리가 발생한 상황과, FinOps, EMR, 관리 방법에 대해서 간단하게 작성하게 되었습니다. 문제 상황부터 지금까지 우여곡절이 참 많았는데, 정리하니까 내용은 그렇게 많지 않네요. 삽질을 많이 했다는 뜻입니다. 여러분들은 부디 삽질을 최소화하시고 많은 이득을 취하시길 바랍니다. 짧막한 삽질 글을 읽어주셔서 감사합니다. </p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2021/01/24/cost-mgt-emr/#disqus_thread</comments>
    </item>
    
    <item>
      <title>20201227. 2020년 회고하기</title>
      <link>http://tkdguq05.github.io/2020/12/27/20201227/</link>
      <guid>http://tkdguq05.github.io/2020/12/27/20201227/</guid>
      <pubDate>Sun, 27 Dec 2020 10:21:27 GMT</pubDate>
      <description>
      
        &lt;p&gt;약속들이 눈에 보이지 않는 캘린더를 보며, 일 년이 왜 이렇게 빠른지 생각하다가, 한 해를 잘 보냈다는 뿌듯함 보다는 허무함이 몰려왔다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>약속들이 눈에 보이지 않는 캘린더를 보며, 일 년이 왜 이렇게 빠른지 생각하다가, 한 해를 잘 보냈다는 뿌듯함 보다는 허무함이 몰려왔다.</p><a id="more"></a><h1 id="2020년-돌아보기"><a href="#2020년-돌아보기" class="headerlink" title="2020년 돌아보기"></a>2020년 돌아보기</h1><iframe width="400" height="230" src="https://www.youtube.com/embed/5rGpxaKQPw0" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>   <h2 id="먼저-캘린더를-열어봤다"><a href="#먼저-캘린더를-열어봤다" class="headerlink" title="먼저 캘린더를 열어봤다."></a>먼저 캘린더를 열어봤다.</h2><p> 올 한해 많은 일이 일어났다고 생각했다. 머리 속이 복잡해서 캘린더를 보면서 하나씩 정리하고 싶어졌다. 캘린더를 열어서 1월부터 몇 번 아래로 내려가니 벌써 2020년 12월이었다. 업무 내용이나 약속이 간단하게 적힌, 그나마도 한 달 한 달이 스크롤을 내릴수록 개인적인 일들과 약속들이 눈에 보이지 않는 캘린더를 보며, 일 년이 왜 이렇게 빠른지 생각하다가, 한 해를 잘 보냈다는 뿌듯함 보다는 허무함이 몰려왔다. 올 해에 내가 한 일들을 정리하고 새로운 계획을 세워봐야겠다고 머릿속으로 다짐했는데 마음이 먹어지지가 않는다. 새 계획은 내년에 하기로 하고, 그보다는 나에게 마음정리가 더 필요한 것 같다.</p><hr><h2 id="1월부터-6월은"><a href="#1월부터-6월은" class="headerlink" title="1월부터 6월은"></a>1월부터 6월은</h2><p> 2020년이 시작되고 나서는 굉장히 바빴었다. 작년에 연구소 조직이 개편되면서 TFT가 조직되었고 인수인계 사항으로 나온 Spark를 업무에 적용해야 했었다. 기본적인 Spark에 대한 이해부터 시작해서 Pyspark, conf 세팅 등, 하루하루 해야할 게 많았고 배우고 성장하기 바빴다. 회사에서 워크샵도 갔었고 연봉협상도 처음해보고 새로 접하는 일이 많았다. <code>데이터 엔지니어링</code>에도 관심이 생겨서 세션이 있으면 주말에도 참가해서 정리를 했고, 내용이 괜찮으면 이를 정리해서 블로그에 업로드를 하던가 팀원들에게 공유를 했다. 배우고 공부하는게 재밌었던 것 같았다. 팀 내부적으로도 스터디가 계속 지속되었었고 구매확률 예측과 같은 업무 내용도 흥미로웠다. </p><p> 3월 4월에는 <code>새로운 팀원</code>들이 들어와서 팀 규모가 커졌다.  새 팀원 중 한 분은 기존에 서비스되고 있던 모델에 관심이 많았고, 해당 분야를 다뤄본 경험도 있어 모델을 고도화해보기도 했다. 모델 고도화 측면 뿐 아니라, 새 사람들이 들어오니 새로운 시각에서 서비스를 돌아볼 수도 있었고 업무 내용에 대해 다양한 논의를 할 수 있었다. 코로나가 이 때 갑자기 심해지기 시작하면서 행동에 제약이 생기기 시작했지만, 기존 TFT 팀원들의 업무능력들이 조화를 이루면서 1년도 안되는 시간만에, 나름 데이터 팀 답게 일을 할 수 있을 것 같다고 생각했다. 6월에는 제주도 여행을 떠났다.</p><h2 id="7월-부터-12월은"><a href="#7월-부터-12월은" class="headerlink" title="7월 부터 12월은"></a>7월 부터 12월은</h2><p> 어떤 일에 제대로 마음먹기 시작할 때 항상 제동이 걸렸다. 개인적인 일이든 업무적인 일이든 제대로 하려고 하면 잘 안됐다. <code>뭐든 간에 사람이 가장 중요하다는 걸 제대로 느끼게 되었다.</code> 개인적인 일은 제쳐두고 일에 대해서만 생각해보자. 하반기가 흘러가면서 퇴사자분들이 많이 나왔다. 개발팀에서 특히 많이 나왔는데, 오래 계셨던 분들이 주로 나가게 되었고, 이로 인해 회사 분위기가 어수선했었다. 팀 내부적으로라도 결속시키고 싶었고, 뭐든 새로 하는 일에 열심히 하려고 했고 새 마음가짐을 가지려고 했는데, 옆에 있는 동료가 힘들어하니 잘 안되더라. 애매한 상태로 시간이 지났고, 결국 몇 명이 팀을 떠나게 되었다. 그 중에는 오래 일을 같이 하고 믿었던 동료도 있었다. 덕분에 데이터 엔지니어링 파트에 대해서 인수인계를 받게되고 업무를 시작하게 되었다. 이와 더불어 여러가지 일이 한꺼번에 덮치면서 멘탈 챙기기가 힘들어졌다. 거기에 코로나까지 난리를 쳐대는 바람에 헬스장이 문을 닫게 되었고, 거의 유일한 스트레스 해소 창구이자, 나에게 집중할 수 있는 시간이었던 <code>운동시간</code>이 사라지게 되었다. </p><p> 운동을 계속하다가 안하게 되니까 스트레스에 대응하는게 많이 힘들어졌다. 업무적으로 힘들거나 다른 일로 힘들어도 헬스장에 가서 운동 한번 하고 오면 말끔하게 고민이 사라졌는데, 그럴 수 없었다. 동시에 목과 어깨가 아프기 시작해서 일에 집중하기도 힘들어졌다. 평소대로라면 도수치료라도 받으러 가겠지만, 굉장히 밀접하게 접촉해야하는 환경이라 가기가 꺼려졌다. 잠깐 힘들어했었는데, ‘그래 근데 뭐 어쩌라고’ 하는 생각으로 다시 뛰기 시작했다. 미세먼지가 엄청 심하지 않으면 나가서 3키로 이상 뛰었던 것 같다. 운동하니까 확실히 나아졌다. 몸의 병이든 마음의 병이든 일단 움직여야 낫는 것 같다.</p><h2 id="다시"><a href="#다시" class="headerlink" title="다시"></a>다시</h2><p> 멘탈이 좀 나아지니 팀을 좀 추스려야겠다는 생각을 했다. 갑자기 인원조정을 하게 되었고, 업무 담당자도 바뀌게 되어 정리를 하지 않으면 혼란이 있을 것 같았다. 어떻게 해야할까 고민하다가, 어디서부터 잘못되었을까, 뭘 안하기 시작했을까 생각했다. 팀이 힘들어지면서는 10시에 했었던 스크럼 미팅이 생략되었고 코드 리뷰, 문서 정리, 팀 내부 미팅과 스터디 등이 점차적으로 사라지게 되었다. 개인이 맡은 업무만 하게 되고 얻은 지식은 고사하고 진행사항도 파악하기 힘들어졌다. 여기서부터 시작해야겠다고 생각했다. 아마 남은 팀원들 모두 이렇게 생각했을 것 같다. 당장 <code>스크럼</code>을 다시 재개했고 하루에 어떤 일을 할 건지 지난 업무 진행상황과 어려운 점을 간략하게 얘기했다. 스크럼에서 다 같이 논의해서 해야할 문제가 있으면 미팅을 잡아서 따로 얘기했다. 이런 상황에서 데이터 팀을 위한 칸반보드가 필요하다는 의견이 나왔고, 해외 기업들의 데이터 조직의 스크럼 방식과 칸반보드 등을 조합해서 우리만의 칸반보드를 만들어냈다(물론 블로그의 다음 글은 이 내용이 될 것이다). 업무 내용을 정리하고 내년에 단기적으로 그리고 장기적으로 해야할 일들을 작성했다. 이렇게 정리하고 나니 하루하루 뭘 해야할지 명확해졌고 어떤 내용을 공부할지도 정해졌다. 스터디가 자연스레 필요해졌다. 팀원들끼리 모여서 어떤 내용을 같이 공부할지 의논했고 그 내용에 대한 도서를 구매하게 되었다. 물론 아직 여러 걱정거리들이 남긴했지만, 적은 팀원들로도 할 수 있구나란 생각이 들었고, 어떤 업무에 대해서 인원을 충원해야할 지도 명확해진 것 같다. 그리고 팀이 예전과 비슷한 정도의 활기를 되찾게 되었다. 마음이 잘 맞는 사람들이라 정말 다행이고 감사하다. 좋은 사람들이다.</p><hr><h2 id="남은-2020년에는-연차를-썼다"><a href="#남은-2020년에는-연차를-썼다" class="headerlink" title="남은 2020년에는 연차를 썼다"></a>남은 2020년에는 연차를 썼다</h2><p> 연차를 계산해보니 생각보다 많이 남아서 24일부터 남은 연차를 모두 썼다. 그러니까 글을 쓰고난 내일에도 나는 출근을 하지 않는다. 당장 내일은 할게 좀 많아 보인다. 회사에서 작성하라는 Self Review를 늦장부리다가 못 썼기 때문이다. 내일은 SR을 마저 쓰고 사놓은 책들을 찬찬히 볼 예정이다. 다행히도 오늘까지 보고싶었던 넷플릭스의 스위트홈을 몰아서 다 봤고, 웹툰까지 3만원을 결제해서 결말까지 봐버렸다. 방해할게 아무것도 없어서 맘 편히 책을 보고 공부할 수 있을 것 같다. 다만 하나 걸리는 점이 있다면 목뼈가 너무 아프다는 건데, 얼른 고쳐버려서 뭘 하든 제약에 걸리지 않고 바로 할 수 있도록 만들어야겠다. 2020년이 다 가기 전에 남은 힘든 점과 기분좋아지게 하는 점들을 써놓아야겠다.</p><h3 id="힘든-것들"><a href="#힘든-것들" class="headerlink" title="힘든 것들"></a>힘든 것들</h3><ul><li>목과 어깨가 스트레칭을 해도 아프다. 적어도 한 5년치 묵혀놓은 거라 잘 안풀리겠지만 치료해보자.</li><li>하도 근력운동을 안하다 보니 근육이 많이 빠지고 살이 쪘다. 맨몸운동 열심히 하자.</li><li>연말이 되니 인간관계에 대해 생각이 많아진다. 적게 생각하고 연락이나 한 번 해보자.</li><li>뭐가 힘든지 사실 대충 생각해놨었는데, 그 중 하나는 1년을 회고하려는 생각에 마음이 많이 무거웠다는 점이다. 결코 올 해는 안 좋았던 날이 좋았던 날보다 많았던 날 같고 뭔가 뒤숭숭했다. 그런데 글을 쓰다보니 괜찮아졌다. 다 쓰고보니 작년보다 고민이 좀 없어진 것 같기도 하고…</li></ul><h3 id="기분-좋아지게-하는-것들"><a href="#기분-좋아지게-하는-것들" class="headerlink" title="기분 좋아지게 하는 것들"></a>기분 좋아지게 하는 것들</h3><ul><li>코로나가 심해지면서 재택근무가 시작되었다. 3일에 한번 재택을 하는 거긴 하지만, 경기도에서 출퇴근하다가 1초만에 출퇴근하게 되는게 너무 행복하다. 물론 일은 계속 잡고있게 되서 고민이긴 하지만.</li><li>골수 나얼 팬인데 최근에 나얼 님이 유튜브를 시작했다.  <code>나얼의 음악세계</code> 한 10년 전에 KBS 심야 라디오에서 진행했던 프로그램 명과 동일하다. 일단 잠을 자야해서 라디오를 녹음하고 다음 날에 챙겨 들었었던 기억이 있다. 근데 이제 토요일마다 유튜브에서 LP판으로 나얼 형이 직접 틀어준다. 옛날 생각나고 너무 행복하다.</li><li>직접 만든 <code>사과잼</code>이 너무 맛있다. 재택할때 아침마다 빵이랑 먹었는데 살 많이 쪘다.</li><li>오늘 글을 쓰다가 ‘Justice Der’라는 기타 아티스트를 알게 되었다. 유튜브에 또 혜자스럽게 2시간 40분짜리 플레이리스트를 만들어뒀다. 적어도 1주일은 들을 것 같다. </li></ul>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/12/27/20201227/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Airflow EC2에 구축하기</title>
      <link>http://tkdguq05.github.io/2020/12/13/airflow-on-ec2/</link>
      <guid>http://tkdguq05.github.io/2020/12/13/airflow-on-ec2/</guid>
      <pubDate>Sun, 13 Dec 2020 08:05:59 GMT</pubDate>
      <description>
      
        &lt;p&gt;Airflow를 AWS EC2에서 실행시켜 보자!&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Airflow를 AWS EC2에서 실행시켜 보자!</p><a id="more"></a><h2 id="AWS-EC2-위에-Airflow-구축하기"><a href="#AWS-EC2-위에-Airflow-구축하기" class="headerlink" title="AWS  EC2 위에 Airflow 구축하기"></a>AWS  EC2 위에 Airflow 구축하기</h2><p>Airflow를 로컬에 구축할 수도 있지만 안정성을 위해서라면 꺼지지 않는 컴퓨터에 Airflow를 구축하는 것이 좋을 것입니다. 이번 글에서는 실제 서비스를 위해서 Airflow를 EC2 위에 구축하는 내용을 담아보겠습니다.</p><p>Airflow에 대한 기본 개념이 궁금하신 분들은 <a href="https://tkdguq05.github.io/2020/03/14/airflow-start/#more">Airflow Basic</a> 을 확인하시면 좋습니다.</p><h2 id="준비물"><a href="#준비물" class="headerlink" title="준비물"></a>준비물</h2><p>Airflow를 구축하기 위해서는 준비물이 필요합니다. 첫번째로는 EC2 서버입니다. 인스턴스 사이즈가 작아도 크게 상관은 없겠지만 여유롭게 t3.large를 선택하도록 하겠습니다. 인스턴스 설정이 끝나면 인스턴스를 생성하고 바로 인스턴스 안으로 들어가 보도록 합니다.</p><p>ssh 명령어를 이용해서 인스턴스 주소를 입력해 접속합니다. 접속이 안된다면 보안그룹에서 22번 포트를 열어줍시다.</p><p>이제 본격적으로 Airflow를 구축해 볼 것입니다. 구축 시에 확인해야 할 체크리스트를 만들어 둡니다.</p><ul><li><input disabled="" type="checkbox"> Airflow 기본 세팅</li><li><input disabled="" type="checkbox"> Redis</li><li><input disabled="" type="checkbox"> MySQL</li><li><input disabled="" type="checkbox"> 기타 라이브러리 설치</li><li><input disabled="" type="checkbox"> AMI 이미지 생성하기</li></ul><p>마지막에 이미지를 생성하는 이유는 이 작업을 반복하려면 너무 귀찮고 힘들기 때문입니다. 완벽히 구축이 되고 잘 돌아가는 Airflow 이미지를 생성해 두면 나중에 활용할 일이 많습니다. Airflow를 클러스터화 한다던가 그런 곳에 이미지를 사용하면 쉽게 구축할 수 있습니다.</p><p>레크리스트에는 Redis와 MySQL이 포함되어있습니다. 기본 세팅으로 실행해도 상관없지만 기본 세팅의 Executor는 Sequential Executor로 병렬로 Task를 수행할 수밖에 없습니다. 실제 서비스에는 많은 Task가 동시에 실행해야 할 경우가 자주 발생하므로 병렬 처리가 가능한 Celery Executor를 사용할 것이고 이 Executor는 메시지 브로커를 사용합니다. 메시지 브로커에는 RabbitMQ나 Redis 등이 사용되는데 이번 글에서는 Redis를 사용해 보겠습니다. </p><hr><h2 id="기본-세팅에-대한-의문점"><a href="#기본-세팅에-대한-의문점" class="headerlink" title="기본 세팅에 대한 의문점"></a>기본 세팅에 대한 의문점</h2><h3 id="Redis-vs-RabbitMQ"><a href="#Redis-vs-RabbitMQ" class="headerlink" title="Redis vs RabbitMQ?"></a>Redis vs RabbitMQ?</h3><p>Redis는 NoSQL DB로 잘 알려져 있습니다. In Memeory 방식이며 key-value데이터 구조 스토어 이기 때문에 빠른 Read, Write 성능을 보장합니다.</p><p>RabbitMQ는 DB보다는 메세징 브로커로 잘 알려져 있습니다. 메시지의 우선순위를 지원하며 크고 복잡한 메시지를 다룰때 적합합니다.</p><p>Airflow의 브로커로 어떤걸 사용할지는 현재 서비스할 비즈니스 프로세스에 따라 판단하면 됩니다. 제가 구축할 서비스의 비즈니스 프로세스에는 복잡한 메시지를 다루지는 않습니다. 제가 판단하기에 이 서비스에는 속도가 더 중요하다고 생각했습니다. 그래서 In Memory 방식의 Redis은 성능이 보장되기 때문에 Redis로 선택을 했습니다. Airflow를 구축하시는 분들도 무작정 따라하기보다는 비즈니스 프로세스를 생각해보시고 알맞는 로직에 따라 어떤걸 사용할지 선택하시면 좋을 것 같습니다.</p><blockquote><p><strong>참고! Celery란?</strong><br>Celery 는 Python 으로 작성된 분산 메시지 전달을 기반으로 한 비동기 작업 큐로, Worker 의 한 종류입니다.<br>별도로 실행 중인 Worker Process가 Broker로부터 Message를 전달 받아 작업을 대신 수행해 주는 라이브러리입니다.<br>출처 : <a href="https://velog.io/@jisoo1170/Redis-RabbitMQ-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90">https://velog.io/@jisoo1170/Redis-RabbitMQ-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90</a></p></blockquote><h3 id="Sqlite-vs-MySQL"><a href="#Sqlite-vs-MySQL" class="headerlink" title="Sqlite vs MySQL?"></a>Sqlite vs MySQL?</h3><p>또한 Airflow의 meta store는 sqlite인데 sqlite로는 Hello World 정도만 테스트할 정도의 수준이기 때문에 MySQL을 DB로 사용해 볼 것입니다. 보통 sqlite는 로컬에서 혼자 사용하는 용도이며 많은 요청을 처리하기에는 버겁습니다. 반면 MySQL은 여러 개의 작업과 사용자의 SQL을 처리할 수 있도록 구현되어 있기 때문에 실제 서비스에 sqlite보다 적합할 것입니다.</p><p>의문점이 해결되었다면 본격적으로 Airflow를 구축해보도록 하겠습니다.</p><hr><h2 id="1-Airflow-기본-세팅"><a href="#1-Airflow-기본-세팅" class="headerlink" title="1. Airflow 기본 세팅"></a>1. Airflow 기본 세팅</h2><p>Airflow 구축 전에 반드시 해야할 것 중에 하나는 Airflow Home 경로를 설정하는 것입니다. 저의 경우에는 항상 경로 세팅을 나중에 하다가 잊어버려서 에러가 나는 경우가 많아서 꼭 먼저 설정해두곤 합니다.</p><p><img src="/images/airflow_on_ec2/airflow_quick.png" alt="Airflow Quick Start"></p><p>출처 : <a href="https://airflow.apache.org/docs/apache-airflow/stable/start.html">https://airflow.apache.org/docs/apache-airflow/stable/start.html</a></p><p>Airflow 공식 문서에 따르면 기본 경로는 위 사진에 나와있는 것과 같습니다. 그냥 놔둬도 되지만 나중에 경로를 옮길 때를 대비해서 한번 세팅해봅시다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EC2</span></span><br><span class="line"><span class="built_in">export</span> AIRFLOW_HOME=/home/ec2-user/airflow</span><br></pre></td></tr></table></figure><p>EC2 인스턴스라면 기본 경로를 다음과 같이 설정해 줍니다.</p><p>(여기서 airflow를 바로 설치해도 되긴 하지만 pip3 install apache-airflow로 설치를 하게되면 자잘한 에러들을 만날 수 있습니다. 아래 과정을 마친 뒤 명령을 실행하면 깔끔하게 설치되니 잘 따라가보도록 합니다. )<br><br></br></p><h2 id="2-Redis-세팅"><a href="#2-Redis-세팅" class="headerlink" title="2. Redis 세팅"></a>2. Redis 세팅</h2><p>이제 브로커로 사용할 Redis를 설치해 줍시다. 먼저 AWS Linux의 패키지 설치 도구인 <code>yum</code>을 업데이트하고 필요한 라이브러리를 설치합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum -y update</span><br><span class="line">$ sudo yum -y install gcc make</span><br></pre></td></tr></table></figure><p>이제 Redis를 다운 받습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /tmp</span><br><span class="line">$ wget http://download.redis.io/releases/redis-4.0.0.tar.gz</span><br><span class="line">$ tar xzf redis-4.0.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> redis-4.0.0</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><p>Redis 디렉토리를 만들고 파일을 복사합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /etc/redis </span><br><span class="line">$ sudo mkdir /var/lib/redis</span><br><span class="line">$ sudo cp src/redis-server src/redis-cli /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">$ sudo cp redis.conf /etc/redis/</span><br></pre></td></tr></table></figure><p>Redis의 configure 파일을 수정합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/etc/redis/redis.conf</span></span><br><span class="line">[..]</span><br><span class="line">daemonize yes</span><br><span class="line">[..]</span><br><span class="line">  </span><br><span class="line">[..]</span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">[..]</span><br><span class="line">  </span><br><span class="line">[..]</span><br><span class="line">dir /var/lib/redis</span><br><span class="line">[..]</span><br><span class="line">  </span><br><span class="line">logfile /var/<span class="built_in">log</span>/redis_6379.log</span><br></pre></td></tr></table></figure><p>Redis-Server initializize 스크립트를 세팅합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /tmp</span><br><span class="line">$ wget https://raw.github.com/saxenap/install-redis-amazon-linux-centos/master/redis-server</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv redis-server /etc/init.d</span><br><span class="line">$ sudo chmod 755 /etc/init.d/redis-server</span><br><span class="line">$ sudo vim /etc/init.d/redis-server</span><br><span class="line"></span><br><span class="line">-&gt;  redis=<span class="string">"/usr/local/bin/redis-server"</span> 확인</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chkconfig --add redis-server</span><br><span class="line">$ sudo chkconfig --level 345 redis-server on</span><br></pre></td></tr></table></figure><p>서버 실행!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service redis-server start</span><br><span class="line">$ redis-cli ping -&gt; PONG</span><br><span class="line"></span><br><span class="line"><span class="comment"># 강제 종료시</span></span><br><span class="line"><span class="variable">$sudo</span> service redis-server stop</span><br></pre></td></tr></table></figure><p><code>sudo service redis-server start</code>를 해도 별 반응이 없다면 ctrl+c로 종료하고 실제로 돌아가는 프로세스가 있는지 확인합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep redis</span><br></pre></td></tr></table></figure><p>제대로 세팅이 되었다면 다음과 같이 나올 것입니다.</p><p><img src="/images/airflow_on_ec2/redis_on.png" alt="Redis가 돌아가고 있다"></p><p>브로커는 구축이 되었습니다.<br><br></br></p><h2 id="3-MySQL-세팅"><a href="#3-MySQL-세팅" class="headerlink" title="3. MySQL 세팅"></a>3. MySQL 세팅</h2><p>Airflow 구축을 하면서 가장 삽질도 많이 하고 시간을 많이 낭비한 부분입니다. 익숙하지 않아서인지 이상하게 MySQL을 다룰 때마다 에러핸들링을 오래 하게 되는 것 같습니다.</p><p>MySQL 설치</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install mysql56-server</span><br></pre></td></tr></table></figure><p>웹에 검색하면 위와 같은 명령어가 많이 등장합니다. 예전 버전의 AWS CLI였으면 명령어가 적용되었을 것 같은데 mysql이 설치가 되지 않습니다.</p><p>아래의 명령어를 사용해서 설치를 해야합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line">$ sudo yum localinstall mysql57-community-release-el7-11.noarch.rpm </span><br><span class="line">$ sudo yum install mysql-community-server</span><br></pre></td></tr></table></figure><p>설치가 완료되면 mysql 데몬을 실행합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure><p><img src="/images/airflow_on_ec2/mysql_error.png" alt="왜 안되지"></p><p><img src="/images/airflow_on_ec2/heavy_ki.png" alt="답답하면 직접 하면 된다"></p><p>이렇게 실행하라는 소리가 많은데 역시나 실행이 되지 않습니다. 왜 꼭 한번에 되게 정리해 놓은 문서는 없을까요? 답답하면 제가 정리해서 글을 올리면 됩니다. 묵-직하게!</p><p>에러가 난다면 코드를 다음과 바꿔서 쳐봅니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysqld start</span><br></pre></td></tr></table></figure><p>mysqld가 실행되었고 이제 mysql 명령어를 이용하는 게 가능해졌습니다.</p><p>Airflow에서 MySQL을 DB로 사용하기 때문에 해주어야 할 작업이 남았습니다. Airflow 유저를 만들어 줘야하고 airflow database를 만들어줘야 합니다. 유저가 없다면 database에 접근이 불가능하며, airflow database가 없다면 Airflow 실행에 필요한 테이블들을 만들지 못합니다.</p><p>따라서 <code>root</code>유저로 접속해서 유저를 만들고 데이터베이스를 만들어줘야 합니다.</p><h3 id="MySQL-세부-세팅"><a href="#MySQL-세부-세팅" class="headerlink" title="MySQL 세부 세팅"></a>MySQL 세부 세팅</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line"><span class="comment"># 패스워드를 입력</span></span><br><span class="line">Enter Password :</span><br></pre></td></tr></table></figure><p>루트 유저로 접속하려면 비밀번호를 요구합니다. 하지만 방금 MySQL을 설치했기 때문에 비밀번호를 설정한 적이 없습니다. 그래서 그냥 엔터를 쳐봅니다.</p><p><img src="/images/airflow_on_ec2/mysql_error.png" alt="왜 않되2"></p><p>될리가 없습니다.</p><p>MySQL은 설치가 될때 root 유저에 대한 임시 비밀번호를 만들어 놓기 때문에 접속이 안되는 것입니다. 임시 비밀번호를 찾아 와야 합니다. 임시 비밀번호는 휴대폰 인증을 통해서 이메일로 받는게 정석이지만 MySQL은 조금 다릅니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /var/<span class="built_in">log</span>/mysqld.log</span><br></pre></td></tr></table></figure><p><code>/var/log/mysqld.log</code> 여기에 임시비밀번호가 있습니다. 비밀번호를 복사해 놓은 후 다시 입력해 봅니다.</p><p>mysql 프롬포트가 나왔다면 성공입니다.</p><p>이제 root 유저의 비밀번호를 다시 설정해주고 airflow 유저를 생성하고 database를 만들어 주면 세팅은 끝납니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE mysql.user SET Password=PASSWORD(<span class="string">'패스워드'</span>)</span><br><span class="line">           WHERE User=<span class="string">'root'</span>;</span><br></pre></td></tr></table></figure><p>검색해서 나온 위 명령어로 비밀번호를 세팅해줍니다.</p><p>여기서 에러가 발생하는데 두 가지 에러가 발생합니다.</p><ol><li>syntax 에러</li><li>Your password does not satisfy the current policy requirements</li></ol><p>1번 에러의 경우에는 <code>&#39;</code> 를 잘 살펴보고 모양이 맞는지 한번 잘 확인해 봅니다. 혹은 mysql 버전에 맞지 않는 명령어일 가능성이 있습니다. mysql 5.7이상의 명령어인지 확인을 다시 해봅니다.</p><p>2번 에러의 경우에는 비밀번호가 너무 쉽다는 것입니다. mysql에는 비밀번호 정책이 상 중 하로 나누어져 있는데 기본 설정은 MEDIUM입니다. 복잡한 비밀번호를 사용하기는 싫었기 때문에 저는 이것을 LOW로 변경할 것입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> global validate_password_policy=<span class="string">'LOW'</span>;</span><br><span class="line"><span class="comment"># 쿼리 성공!</span></span><br></pre></td></tr></table></figure><p>LOW로 설정되었다면 비밀번호는 8자 이상으로만 세팅하면 됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter user <span class="string">'root'</span>@<span class="string">'localhost'</span> identified by <span class="string">'8자 이상 패스워드'</span>;</span><br><span class="line">use mysql;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>이제 airflow 사용자를 만들어주고 database도 만들어줍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 사용자 생성</span></span><br><span class="line">create user <span class="string">'airflow'</span>@<span class="string">'localhost'</span> identified by <span class="string">'비밀번호'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># DB 권한 부여</span></span><br><span class="line">$ grant all privileges on *.* to <span class="string">'airflow'</span>@<span class="string">'localhost'</span>;</span><br><span class="line">$ grant all privileges on DB이름.* to <span class="string">'airflow'</span>@<span class="string">'localhost'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># database 생성</span></span><br><span class="line">create database airflow;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install <span class="string">'apache-airflow[mysql]'</span></span><br></pre></td></tr></table></figure><p>험난 했던 MySQL 세팅은 완료되었습니다.<br><br></br></p><h2 id="4-Airflow-설치-및-세팅"><a href="#4-Airflow-설치-및-세팅" class="headerlink" title="4. Airflow 설치 및 세팅"></a>4. Airflow 설치 및 세팅</h2><p>이제 Airflow를 설치해봅시다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum update -y</span><br><span class="line"></span><br><span class="line">$ sudo yum install group <span class="string">"Development tools"</span> -y</span><br><span class="line"></span><br><span class="line">$ sudo yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel python3-devel.x86_64 cyrus-sasl-devel.x86_64 -y</span><br><span class="line"></span><br><span class="line">$ sudo yum install libevent-devel -y</span><br><span class="line"></span><br><span class="line">$ sudo pip3 install apache-airflow</span><br></pre></td></tr></table></figure><p>설치가 완료되었다면 airflow 폴더애 있는 airflow.cfg를 수정해서 앞서 설치한 redis와 mysql을 airflow와 이어줘야 합니다.</p><p><strong>하지만 아무리 찾아봐도 airflow 폴터가 보이지 않습니다. 분명히 설치를 했는데!</strong></p><p>airflow를 입력해서 airflow 명령어가 동작하는지 먼저 확인합니다. 만약 명령어가 작동한다면 아까 설정해둔 <code>AIRFLOW_HOME</code>경로에 airflow 폴더가 생성될 것입니다. 그 안에 configuration 파일이 있습니다.</p><p>만약 <code>airflow: command not found</code>에러가 발생한다면 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:~/.<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure><p>환경변수를 조정해서 airflow가 bin에서 실행되도록 합니다.</p><h3 id="airflow-cfg-설정"><a href="#airflow-cfg-설정" class="headerlink" title="airflow.cfg 설정"></a>airflow.cfg 설정</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 사용할 dag 폴더 지정</span></span><br><span class="line"><span class="comment"># subfolder in a code repository. This path must be absolute. 꼭 절대경로!</span></span><br><span class="line">dags_folder = /home/ec2-user/airflow/dags</span><br><span class="line"></span><br><span class="line"><span class="comment"># executor = SequentialExecutor</span></span><br><span class="line">executor = CeleryExecutor</span><br><span class="line"></span><br><span class="line"><span class="comment"># sql_alchemy_conn = sqlite:////home/airflow/airflow/airflow.db</span></span><br><span class="line">sql_alchemy_conn =  mysql+pymysql://airflow:비밀번호@127.0.0.1:3306/airflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># catchup_by_default = True</span></span><br><span class="line">catchup_by_default = False</span><br><span class="line"></span><br><span class="line"><span class="comment"># broker_url = sqla+mysql://airflow:airflow@127.0.0.1:3306/airflow</span></span><br><span class="line">broker_url = redis://airflow@127.0.0.1:6379/0</span><br><span class="line"></span><br><span class="line"><span class="comment"># result_backend = db+mysql://airflow:airflow@localhost:3306/airflow</span></span><br><span class="line">result_backend = db+mysql://airflow:비밀번호@127.0.0.1:3306/airflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># load_examples = True</span></span><br><span class="line">load_examples = False</span><br></pre></td></tr></table></figure><p>이 정도만 세팅 해줍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install boto3</span><br><span class="line">sudo pip3 install celery</span><br><span class="line">sudo pip3 install redis</span><br></pre></td></tr></table></figure><p>실행에 필요한 라이브러를 설치해주고 airflow db를 초기화 해봅시다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airflow initdb</span><br></pre></td></tr></table></figure><p>Done!이 나왔다면 성공입니다.</p><hr><p><br></br></p><h2 id="Airflow-실행"><a href="#Airflow-실행" class="headerlink" title="Airflow 실행"></a>Airflow 실행</h2><p>Airflow는 스케쥴러, 웹서버, 워커로 구성되어있습니다. 하나하나 백그라운드로 실행시켜줍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nohup airflow webserver &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">nohup airflow scheduler &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># queue를 설정했다면 -q를 통해 추가한다</span></span><br><span class="line">nohup airflow worker &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p><img src="/images/airflow_on_ec2/airflow_ui.png" alt="됐다!!!!!"></p><p>웹 UI가 예쁘게 뜬다면 성공입니다!</p><p>example dag를 실행해보고 안된다면 백그라운드로 실행된 프로세스를 종료한 뒤 nohup명령어를 빼고 실행합니다. 로그가 나오므로 해당 에러를 모두 해결한 뒤에 백그라운드로 실행시켜 주면 완료가 됩니다.</p><hr><p><br></br></p><h2 id="자잘한-에러-핸들링"><a href="#자잘한-에러-핸들링" class="headerlink" title="자잘한 에러 핸들링"></a>자잘한 에러 핸들링</h2><ol><li><p><code>Exception: Global variable explicit_defaults_for_timestamp needs to be on (1) for mysql</code></p><p> 위 에러가 등장한다면 mysql에서 timestamp 설정을 변경해 주어야 한다.</p><p> root 계정으로 들어가서 아래 명령어를 실행해준다.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL explicit_defaults_for_timestamp = 1;</span><br></pre></td></tr></table></figure></li><li><p><code>ModuleNotFoundError: No module named &#39;MySQLdb&#39;</code></p><p>  또는 OSError: mysql_config not found 이런 에러 메세지로 등장할 수 있다.</p><p> 아래 명령어로 해결한다.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install mysql-devel</span><br><span class="line"></span><br><span class="line">pip3 install <span class="string">'apache-airflow[mysql]'</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://airflow.apache.org/docs/">https://airflow.apache.org/docs/</a></p><p><a href="https://boomkim.github.io/2020/01/08/airflow-install-amazon-linux-2/">https://boomkim.github.io/2020/01/08/airflow-install-amazon-linux-2/</a></p><p><a href="https://openmind8735.com/aws/redis/2017/07/21/aws-ec2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%97%90-redis-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/">https://openmind8735.com/aws/redis/2017/07/21/aws-ec2-인스턴스에-redis-설치하기/</a></p><p><a href="https://serverfault.com/questions/894457/amazon-linux-2-ami-aws-how-to-install-mysql-in-amazon-linux-2">https://serverfault.com/questions/894457/amazon-linux-2-ami-aws-how-to-install-mysql-in-amazon-linux-2</a></p><p><a href="https://lemontia.tistory.com/943">https://lemontia.tistory.com/943</a></p><p><a href="https://m.blog.naver.com/aim4u/221766568746">https://m.blog.naver.com/aim4u/221766568746</a></p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/12/13/airflow-on-ec2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>데이터 사이언스를 위한 네트워크 Part 2</title>
      <link>http://tkdguq05.github.io/2020/11/29/network-part2/</link>
      <guid>http://tkdguq05.github.io/2020/11/29/network-part2/</guid>
      <pubDate>Sun, 29 Nov 2020 09:20:50 GMT</pubDate>
      <description>
      
        &lt;p&gt;Part 1에서 다룬 이론을 바탕으로 AWS 화면과 친숙해지자&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Part 1에서 다룬 이론을 바탕으로 AWS 화면과 친숙해지자</p><a id="more"></a><h1 id="데이터-사이언스를-위한-네트워크-Part-2"><a href="#데이터-사이언스를-위한-네트워크-Part-2" class="headerlink" title="데이터 사이언스를 위한 네트워크 Part 2"></a>데이터 사이언스를 위한 네트워크 Part 2</h1><p>이번 글에서는 AWS를 다루면서 보는 익숙하지만 생소한 용어들에서 다루려고 합니다. 자주봐서 익숙하기는 하지만 어떤 역할을 하는지, 어떤 개념인지는 잘 모르고 넘어가는 경우가 많습니다. 경험 상 이러한 개념적인 부분이 제대로 다져지지 않으면 업무를 할때마다 찾아보게 되서 생산성이 낮아지곤 했습니다. 이번 글을 통해 개념을 제대로 다지는 계기가 되었으면 좋겠습니다.</p><h2 id="AWS-GCP는-뭐에요"><a href="#AWS-GCP는-뭐에요" class="headerlink" title="AWS? GCP는 뭐에요?"></a>AWS? GCP는 뭐에요?</h2><p>AWS란? 이라고 검색했을때 나오는 결과들은 대체로 ‘클라우드 컴퓨팅 플랫폼’이라고 설명하고 있습니다. 클라우드 컴퓨팅 플랫폼 서비스라고 하면 Amazon같은 거대한 회사에 있는 거대한 서버를 비용을 지불하고 내가 쓸 만큼만 사용하는 서비스라고 생각하실 겁니다. 맞습니다. 하지만 한 발자국 더 들어가서 생각해보면, ‘내가 쓸 만큼? 어떻게 내가 쓰는 부분을 따로 나눌 수 있는거지?’라는 의문이 생길 수 있습니다. 실제로 사용하면서도 어떻게 내 것만 잘 분리가 되는지 의문이 드실 수 있습니다.</p><h3 id="VPC-Virtual-Private-Cloud"><a href="#VPC-Virtual-Private-Cloud" class="headerlink" title="VPC(Virtual Private Cloud)"></a>VPC(Virtual Private Cloud)</h3><p>AWS는 VPC를 이용해서 다른 사용자와 나를 분리시킵니다. 설명에 들어가기 전에 먼저 VPN에서 다뤄보겠습니다. VPN은 Virtual Private Network으로 실제로는 같은 네트워크 망에 있지만, 논리적으로 다른 네트워크인 것처럼 동작하는 것을 말합니다. VPC역시 같은 클라우드지만, 논리적으로 구역을 나눠놓은 것입니다.</p><p><img src="/images/network_part2/vpc1.png" alt=""></p><p><img src="/images/network_part2/vpc2.png" alt=""></p><p>VPC를 사용하게 되면 위 그림에서 아래 그림으로 구조가 변경됩니다. 복잡하던 시스템이 간단하게 바뀌었고 각각의 VPC는 완전히 독립된 네트워크처럼 작동할 수 있게 됩니다.</p><p>VPC를 구축하기 위해서는 사설 아이피, Private IP 대역에 맞춰야 합니다. 일반적인 IP는 Public IP로, 외부에서 사용하는, 한 곳에서만 사용할 수 있는 아이피입니다. 어떤 사람이 IP를 점유했다면, 그 IP는 다른 사람이 사용할 수 없습니다. Private IP는 내부 사용자들끼리 사용하는 IP입니다. 따라서 192.168.0.53이라는 IP는 누군가의 집 컴퓨터에서 사용하고 있는 Private IP일 수 있습니다. 결론적으로 클라우드 서비스 시스템은 어떻게 내가 사용할 클라우드를 나누냐면, 이 Private IP 범위를 이용해서 구역을 나누어 관리하는 것입니다. </p><p>Public IP와 Private IP가 쉽게 다가오지 않을 수 있을 것 같습니다. 비유를 해보자면, 서울시 강남구 XX아파트 1302동 704호는 Public IP라고 할 수 있고 그 집 내부의 안방은 Private IP라고 할 수 있습니다. 아파트의 주소는 세상에 딱 하나이지만, 안방은 어떤 집에서도 갖고 있는 곳이기 때문입니다.</p><p>이렇게 한번 설정된 아이피 대역은 수정이 불가하며 각 VPC는 하나의 리전에 종속됩니다. 각각의 VPC는 완전히 독립적이며, 만약 VPC간 통신을 원한다면 VPC 피어링 서비스를 고려해볼 수 있습니다.</p><h3 id="서브넷"><a href="#서브넷" class="headerlink" title="서브넷"></a>서브넷</h3><p><img src="/images/network_part2/subnet.png" alt=""></p><p>이제 서브넷을 구성할 수 있습니다. 처음 AWS EC2를 만들 때 어렵고 난감했던 개념이 서브넷이였습니다. 서브넷은 그림에서 보듯이 VPC를 더 잘게 쪼갠 것입니다. 목적에 따라서 퍼블릭 또는 프라이빗으로 설정할 수 있습니다. 퍼블릭은 누구나 들어올 수 있도록 설정한 것이고, 프라이빗은 특정 대상만 들어오는 것을 허용한다는 것입니다. 누구나 들어올 수 있다는 것은 인터넷 통신이 자유롭다는 말입니다.</p><p>보통 회사에서는 보안 때문에 프라이빗 서브넷을 구성해놓고 특정 대역을 열어 서비스하는 경우가 많습니다. 그런데 만약 프라이빗 서브넷의 EC2 인스턴스에서 텐서플로를 사용할 일이 있어 <code>pip install tensorflow</code> 를 한다면 어떻게 될까요? 프라이빗 서브넷은 인터넷 통신이 자유롭지 않기 때문에 별도의 설정이 없다면 설치가 되지 않을 것입니다.</p><h3 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h3><p>그래서 NAT 게이트웨이가 필요합니다. NAT 게이트 웨이는 프라이빗 서브넷이 인터넷과 통신하기 위한 아웃바운드 인스턴스입니다. 프라이빗 네트워크가 외부에서 요청되는 인바운드는 필요 없더라도 인스턴스의 펌웨어나 혹은 주기적인 업데이트가 필요하여 아웃바운드 트래픽만 허용되야 할 경우가 있습니다. 이때 퍼블릭 서브넷 상에서 동작하는 NAT 게이트웨이는 프라이빗 서브넷에서 외부로 요청하는 아웃바운드 트래픽을 받아 인터넷 게이트웨이와 연결합니다. 이렇게 되면 프라이빗 서브넷 안에서도 자유롭게 텐서플로를 설치할 수 있습니다.</p><h3 id="보안그룹"><a href="#보안그룹" class="headerlink" title="보안그룹"></a>보안그룹</h3><p>위에 개념을 숙지하고 호기롭게 AWS 클라우드를 이용하려고 하면 두 번째로 마주치는 벽이 바로 보안그룹입니다. 일종의 방화벽으로 쉽게 말하자면, 허용할 IP대역과 Port를 지정하는 것입니다. 관리하는 부분은 인바운드 트래픽과 아웃바운드 트래픽입니다. 보통 아웃바운드 트래픽은 제한을 걸어두지 않습니다. 네트워크가 나가는 것이기 때문에 크게 신경을 쓰지 않는 경우가 대부분입니다. 중요한 것은 들어오는, 인바운드 트래픽입니다. 회사나 집에 아무나 들어올 수 없는 것처럼, 클라우드에서도 보안그룹을 이용해서 들어올 인터넷 통신을 관리합니다. 방화벽 역할을 하는 것에는 사실 네트워크 ACL도 있지만 생략하도록 하겠습니다. 만약 보안정책인 네트워크 ACL과 보안그룹이 충돌한다면 보안그룹이 더 높은 우선순위를 갖습니다.</p><h3 id="Port-amp-Protocol"><a href="#Port-amp-Protocol" class="headerlink" title="Port &amp; Protocol"></a>Port &amp; Protocol</h3><p>보안그룹 설정을 실제로 하려고 들어가면 설정할 것이 Port와 Protocol입니다. 프로토콜을 먼저 선택하게 되는데, 실제로 클릭하게 되면 각종 알수없는 영어들의 리스트가 주르륵 흘러나옵니다. 대표적인 몇 가지만 알아보도록 하겠습니다.</p><p><img src="/images/network_part2/list.png" alt="실제 AWS에서 나오는 화면"></p><p>프로토콜 유형에서 <code>모든 트래픽</code>을 기준으로 설명을 할 수 있을 것 같습니다. 모든 트래픽의 윗 부분은 TCP/UDP에 관한 내용이고 그 아랫부분은 well-known 포트로 많이 사용하는 포트에 대해서 미리 지정해 놓은 것입니다. 보통 well-known 포트는 0~1023의 범위입니다.</p><h3 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP / UDP"></a>TCP / UDP</h3><p>TCP와 UDP는 OCI 7 Layer에서 4번째 Layer인 Transport Layer에 해당됩니다. 이 레이어의 역할은 저번 글에서도 다뤘듯이, End to End 서비스 , 커넥션(연결)을 관리하고 서비스와 서비스의 연결을 관리하며 TCP UDP 소켓을 통한 프로세스 별 통신을 하게 됩니다. 이 레이어에서는 port to port로 통신, 데이터는 segment라고 불리우고 있습니다. TCP와 UDP는 성격이 조금 다릅니다. TCP는 통신에서 정확성(신뢰성 있는 전송기능)을 중시한다면 UDP는 속도를 더 중시합니다.</p><p>TCP 프로토콜은 언제 사용할까요? 은행 서비스를 생각해 봅시다. 빠른 속도를 위해 신뢰성은 신경쓰지않고 은행 서비스를 구축했고 가족에게 1억원을 송금했습니다. 그런데 처리되는 도중에 에러가 발생해 1만원을 보낸 것이라고 처리가 되었습니다. 재앙이 발생했습니다.</p><p>TCP는 이렇듯 신뢰성있는 데이터 전송(RDT, Reliable Data Transfer)이 필요할 때 사용하게 됩니다. 그 외에 연결 제어, 흐름 제어, 혼잡 제어 기능을 수행할 수 있습니다.</p><p>UDP는 TCP에 비해 간단합니다. TCP에서 제공하는 기능을 제공하지 않으면 UDP기 때문입니다. 기능이 적어졌으므로 굉장히 가벼워 Overhead가 매우 적습니다. 따라서 많은 요청에 대해서 처리해야 하고, 신뢰성이 필요하지 않은 서비스에서 유용하게 사용됩니다. 혹시 UDP가 익숙하지 않으신가요? </p><p><img src="/images/network_part2/starcraft.png" alt="야 UDP하라고"></p><p><strong>학교 컴퓨터실에서 스타크래프트</strong>를 할 때 방을 만들때면 꼭, UDP를 사용했었던 것이 어렴풋이 기억이 나실 수도 있겠습니다. 이렇듯, 온라인 게임이나 DNS, 음성 인터넷 프로토콜, 동영상 서비스 등에서 UDP 프로토콜을 사용하고 있습니다.</p><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://medium.com/harrythegreat/aws-%EA%B0%80%EC%9E%A5%EC%89%BD%EA%B2%8C-vpc-%EA%B0%9C%EB%85%90%EC%9E%A1%EA%B8%B0-71eef95a7098">https://medium.com/harrythegreat/aws-가장쉽게-vpc-개념잡기-71eef95a7098</a></p><p><a href="https://brunch.co.kr/@toughrogrammer/15">https://brunch.co.kr/@toughrogrammer/15</a></p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/11/29/network-part2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>데이터 사이언스를 위한 네트워크 Part 1</title>
      <link>http://tkdguq05.github.io/2020/11/29/network-part1/</link>
      <guid>http://tkdguq05.github.io/2020/11/29/network-part1/</guid>
      <pubDate>Sun, 29 Nov 2020 08:58:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;막상 공부하기는 귀찮은 네트워크에 대해 공부해보자&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>막상 공부하기는 귀찮은 네트워크에 대해 공부해보자</p><a id="more"></a><h1 id="데이터-사이언스를-위한-네트워크-Part-1"><a href="#데이터-사이언스를-위한-네트워크-Part-1" class="headerlink" title="데이터 사이언스를 위한 네트워크 Part 1"></a>데이터 사이언스를 위한 네트워크 Part 1</h1><h2 id="왜-네트워크를-공부하게-되었나"><a href="#왜-네트워크를-공부하게-되었나" class="headerlink" title="왜 네트워크를 공부하게 되었나?"></a>왜 네트워크를 공부하게 되었나?</h2><p>데이터 분야의 많은 분들이 자주 접하시지만 잘 느끼지 못하는 부분 중에 하나가 네트워크라고 생각합니다. 저만 하더라도 데이터 엔지니어링 업무를 맡기 전까지는 데이터가 어떻게 전달되고 받는 것인지 몰랐고, 알 필요도 없다고 생각했습니다. 하지만 업무를 진행하면 할 수록, 특히 AWS를 자주 접하게 될 수록 벽에 부딪히는 느낌이 들었습니다. 두 가지 벽이었는데 하나는 컴퓨터가 어떻게 작동하는지 모른다는 점이었고(CS, OS영역) 다른 하나는 네트워크에 대한 것이었습니다. 이 한계를 극복하고자 공부를 시작했고 이를 통해 조금이나마 넓어진 시야를 얻게되어 제가 갖게된 지식의 일부분을 잘 정리해보려고 합니다. </p><p>Part 1에서는 전반적인 개요와 이론적인 설명 -OSI 7 Layer에 대해서 설명할 예정이며, Part2에서는 AWS를 사용할 때 자주 등장하는 용어들에 대한 정리와 설명을 할 예정입니다.</p><h2 id="네트워크"><a href="#네트워크" class="headerlink" title="네트워크"></a>네트워크</h2><p>네트워크는 <code>소셜</code>이라는 말과 같이 있을 때 훨씬 더 친숙하게 느껴지는 것 같습니다. ‘소셜 네트워크 서비스’란 사용자 간의 자유로운 의사소통과 정보 공유, 그리고 인맥 확대 등을 통해 사회적 관계를 생성하고 강화해주는 온라인 플랫폼을 의미합니다. 이 SNS에서 가장 중요한 부분은 이 서비스를 통해 사회적 관계망을 형성하는 것입니다.(출처: 위키백과)</p><p>결국 네트워크는 어떤 망이라는 것을 뜻합니다. 소셜 네트워크는 사람 간의 사회적인 관계망을 의미하고, 우리가 파고들 네트워크는 인터넷 망, 그리고 컴퓨터 연결 망을 뜻하는 것입니다.</p><p>위키백과에서는 네트워크를 다음과 같이 설명합니다. “컴퓨터 네트워크 또는 컴퓨터망은 노드들이 자원을 공유할 수 있게 하는 디지털 전기통신망의 하나. 즉, 분산되어 있는 컴퓨터를 통신망으로 연결한 것을 말한다. 컴퓨터 네트워크에서 컴퓨팅 장치들은 노드 간 연결을 사용하여 서로에게 데이터를 교환한다.”</p><p>네트워크의 구조는 집단 크기와 사용자의 대역폭에 따라 달라집니다. 사람이 얼마나 많이 쓰느냐에 따라 구조를 바꿔야 되는 것입니다.  업종에 따라서도 달라질 수 있습니다. 서비스의 중요도에 따라서 달라지는 것인데, 예를 들어 공공기관과 게임 업종의 네트워크의 구조는 그 서비스의 중요도에 따라서 차이가 나게 됩니다.</p><p>네트워크의 통신은 서버-클라이언트 방식, 그리고 익숙한 P2P(Peer to Peer)가 있습니다. 네트워크를 구성하는 형태는 다양하며 대표적으로 star, ring, mesh, bus, tree, redundancy가 있습니다. 소개만 하고 넘어가겠습니다.</p><p>네트워크는 집단의 크기나 서비스의 중요도나 대역폭에 따라 달라진다고 앞서 말씀 드렸습니다. 이에 따라 크게 세 종류로 나눠볼 수 있습니다. 홈 네트워크, 기업용 네트워크, 그리고 클라우드 네트워크 입니다.</p><p>네트워크의 종류에 따라 인터넷이 거치게 되는 경로가 달라지게 되는데 간단하게 요약하자면 다음과 같습니다.</p><ol><li>홈 네트워크<ul><li>인터넷→ISP(회선 업체)→모뎀(모뎀에는 한 대의 컴퓨터만 연결)→공유기(여러대 사용가능)→컴퓨터</li></ul></li><li>기업용 네트워크<ul><li>ISP → 전용선 → 라우터 → 방화벽 → L3 백본 → L2 스위치 → 서버,컴퓨터 → L4 로드밸런서 → DMZ(외부 공개)</li></ul></li><li>클라우드 네트워크(AWS)<ul><li>인터넷 → Route53(DNS 서비스) → IGW → VPC → ELB → Auto Scaling → Security Group → EC2</li></ul></li></ol><p>홈 네트워크의 경로만 눈에 익숙하고 다른 경로들에서는 낯선 용어들이 많이 보일 것으로 생각됩니다. 그나마 클라우드 네트워크에서 조금 다뤄본 용어들이 등장하는 것 같습니다. 이제 본격적으로 네트워크를 다뤄보면서 용어들에 익숙해져 보도록 하겠습니다.</p><hr><h2 id="OSI-7-Layer-Open-Systems-Interconnection"><a href="#OSI-7-Layer-Open-Systems-Interconnection" class="headerlink" title="OSI 7 Layer(Open Systems Interconnection)"></a>OSI 7 Layer(Open Systems Interconnection)</h2><p>네트워크에 대해서 조금 맛 만이라도 본 분들은 OSI 7 Layer를 들어보셨을 것입니다. 네트워크 하면 바로 나오는 게 사실 OSI 7 Layer입니다. 하지만 누군가가 갑자기 와서 Layer 4가 뭐지 라고 물어보거나 OSI 7 Layer 자체가 무엇이냐고 물어보면 당황하는 표정을 숨기며 애써 뭐였지 뭐였지 배웠는데, 기억하는 척을 하는 자신을 만나게 될 것입니다. </p><p>이제 OSI 7 Layer에 대해 알아보면서 데이터의 흐름이 어떻게 되는 건지 파악하면서 자연스럽게 머리에 남겨 보도록 합시다.</p><p>OSI 7 Layer는 개방형 시스템으로, 네트워크 프로토콜과 통신을 7계층으로 표현한 것입니다. 프로토콜을 기능 별로 나누고 계층 별로 구분을 하기 위해서 만들어 졌습니다. 이렇게 나눈 이유는 벤더 간에 호환성을 위한 <strong><code>표준</code></strong>이 필요했기 때문입니다. 이런 체계가 잡힌 이후에 표준에 의한 용이성과 쉬운 접근성, 그리고 유지관리의 수월성을 통해 기술의 발전이 일어나게 되었고 지금처럼 네트워크의 트래픽 흐름을 살펴볼 수 있게 되었습니다. 자잘한 역사는 넘어가도록 하겠습니다.</p><h3 id="OSI-7-Layers의-구조"><a href="#OSI-7-Layers의-구조" class="headerlink" title="OSI 7 Layers의 구조"></a>OSI 7 Layers의 구조</h3><p><img src="/images/network_part1/layers.png" alt="OSI 7 Layers"></p><p>아래로 갈수록 기계가 받아들이기 쉬운 언어이며 위로 갈수록 사람이 보기 편한 언어입니다. 즉, 전기적 신호가 인간이 이해하는 언어로 바뀌어 가는 과정이라고 보면 이해가 되실 겁니다. 이 레이어를 거치면서 어떻게 전기 신호가 인간에게 도달하는 지 살펴 보겠습니다. </p><p>간단하게 살펴보고 깊게 들어가보겠습니다. 가장 밑단의 Layer는 1단계부터 시작합니다. 1단계에서부터 시작하고 7단계로 올라가서 우리가 볼수있는, 인간에게 친숙한 변환된 정보를 마주하게 됩니다. </p><p>이제, 인터넷 선을 컴퓨터에 꽂겠습니다.</p><h3 id="Layer-1"><a href="#Layer-1" class="headerlink" title="Layer 1"></a>Layer 1</h3><p>Physical. <strong>물리 계층으로서 네트워크 하드웨어 전송 기술들로 구성되어 있습니다</strong>. </p><p>장치(컴퓨터)와 통신 매체 사이의 비정형 데이터의 전송을 담당하며 하드웨어 부분에 해당됩니다. 디지털 bit인 0,1을 전기 무선 또는 광 신호로 변환하고, 전송되는 방법과 제어 신호, 기계적 속성 등을 정의합니다. 데이터 전달의 역할만을 합니다. 대표적인 장비로는 케이블, 인터페이스(110V 220V), 허브, 리피터 등이 있습니다.</p><h3 id="Layer-2"><a href="#Layer-2" class="headerlink" title="Layer 2"></a>Layer 2</h3><p>Data Link. <strong>이더넷, 랜카드, MAC 통신을 담당하며 에러를 검출하고 재전송하는 역할을 합니다</strong>. </p><p>동일 네트워크 내에서 데이터를 전송하고 링크를 통해서 연결을 설정하고 관리하고 물리계층에서 발생할 수 있는 오류를 감지하고 수정합니다. 두 장치 간의 신뢰성 있는 정보 전송을 담당합니다. 전송 단위는 Frame이며 데이터 링크 계층은 MAC과 LLC로 이루어져 있습니다. 캡슐화하는 프레이밍과 흐름제어, 에러제어를 담당합니다. </p><ul><li>MAC(Media Access Control) 장비들이 통신하기 위한 각각의 일련번호</li><li>LLC(Logical Link Control)</li></ul><p>모뎀, 스위치, 브릿지가 대표적인 장비입니다.</p><hr><h3 id="Layer-3"><a href="#Layer-3" class="headerlink" title="Layer 3"></a>Layer 3</h3><p><strong>Network. IP통신과 라우팅을 담당합니다.</strong></p><p>다른 네트워크로 데이터를 전송하고 IP 주소로 통신 출발지 IP에서 목적지 IP로 데이터 통신 시 중간에서 어떻게 중계할 것 인가를 정합니다. 전송단위는 패킷이고 목적지까지 경로 설정을 합니다. 처리 데이터가 큰 경우에는 분할(패킷화)하고 전송 후에 목적지에서 재 조립하여 붙여진 sequence 넘버대로 메시지를 구현합니다. 대표적인 장비로는 L3 스위치, 라우터가 있습니다.</p><h3 id="Layer-4"><a href="#Layer-4" class="headerlink" title="Layer 4"></a>Layer 4</h3><p><strong>Transport. TCP / UDP 통신 후 어떤 서비스를 할지 결정합니다.</strong></p><p>호스트 간의 데이터(서비스) 전송을 포트로 정의해주는 레이어로 오류 복구 및 흐름 제어, 완벽한 데이터 전송을 보장합니다. TCP/UDP 방식이 존재하고 전송단위는 세그먼트이며 이 레이어 부터 소프트웨어 레벨에 해당합니다<strong>.</strong> 포트를 제어한다는 의미로 L4 로드밸런서가 있습니다. L4스위치는 3계층에서 온 트래픽을 분석하여 서비스 종류를 구분해 줍니다.</p><h4 id="로드밸런서의-역할"><a href="#로드밸런서의-역할" class="headerlink" title="로드밸런서의 역할?"></a>로드밸런서의 역할?</h4><p>EC2에서 로드 밸런서를 보셨을 겁니다. L4장비인 로드밸런서의 역할을 거의 그대로 하고 있다고 생각하면 됩니다. 로드밸런서는 날라오는 요청들을 받아서 잘 나누어 주는 역할을 합니다. 로드밸런서가 없다면, 요청이 한 곳으로 몰려서 비효율적으로 작업을 처리하게 되거나 심할 경우, 서버에 장애가 생겨 안정적인 서비스를 하기 힘들어집니다. </p><h3 id="Layer-5"><a href="#Layer-5" class="headerlink" title="Layer 5"></a>Layer 5</h3><p>Session. TCP/IP 통신 연결을 수립 유지 중단하는 역할을 합니다.</p><p>로컬 및 원격 애플리케이션 간의 IP/ Port 연결을 관리합니다.</p><p>Session Table에 구성되어 있으며 데이터는 테이블에 적혀있는 IP/Port로 연결됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -an <span class="comment">#명령어로 Session Table 확인가능</span></span><br></pre></td></tr></table></figure><h3 id="Layer-6"><a href="#Layer-6" class="headerlink" title="Layer 6"></a>Layer 6</h3><p>Presentation. 인코딩, 암호화 압축을 담당하고 데이터를 사람이 이해하도록 인코딩합니다.</p><p>사용자 프로그램과 네트워크 형식간에 데이터를 변환해 표현과 독립성을 제공합니다. 인코딩, 디코딩, 암호화, 압축이 이 레이어에 속하게 됩니다. ASCII, JPG, MPEG 등의 번역을 합니다.</p><h3 id="Layer-7"><a href="#Layer-7" class="headerlink" title="Layer 7"></a>Layer 7</h3><p>Application. 다양한 응용 서비스 계층입니다. HTTP, SMTP, 모바일 서비스 등이 여기에 해당됩니다. </p><p>응용 프로세스 간의 정보 교환을 담당하며, 사용자와 가장 밀접한 소프트웨어 단입니다. 이메일 서비스(SMTP), 파일전송(FTP)</p><h2 id="근데-데이터를-어떻게-전송하고-받는거지…"><a href="#근데-데이터를-어떻게-전송하고-받는거지…" class="headerlink" title="근데 데이터를 어떻게 전송하고 받는거지…"></a>근데 데이터를 어떻게 전송하고 받는거지…</h2><p>OSI 7 Layer를 공부해도 데이터가 어떻게 왔다갔다 하는지 잘 모르겠습니다. 이제 이론을 배웠으니 흐름이 어떻게 되는 건지 알아보도록 합시다. </p><p>데이터는 인캡슐레이션과 디캡슐레이션을 통해서 Layer 위로 올라가기도 하고 내려가기도 합니다. 인캡슐레이션은 쉽게 말해서 헤더를 붙이는 것을 말하고, 디캡슐레이션이란 헤더를 떼는 것을 말합니다. </p><p><strong>인캡슐레이션과 디캡슐레이션이 왜 필요한데요?</strong> 라고 물어보실 수 있습니다. 왜냐면 데이터 자체로는 상대방에게 전달이 되지 않기 때문입니다. 우리가 어떤 물건을 상대방에게 보내려고 할때 택배회사를 이용하는 것과 비슷하다고 보면 이해가 되실 겁니다. 물론 상대방에게 물건을 갖다가 주거나 앞에서 매몰차게 던지는 경우도 있긴 하지만, 품격있는 사회인인 우리는 택배회사를 이용한다고 가정해보겠습니다.</p><p>우리가 물건을 받으면 물건은 포장에 아름답게 쌓여져 있습니다. 우리는 소중한 존재이기에 예쁜 포장지로 쌓여져 있다고 생각해보겠습니다. 겉 리본을 풀고 예쁜 포장지를 풀고, 뾱뾱이를 제거하고 종이포장을 제거하고 … 해서 우리가 원하는 물건을 받게 됩니다. </p><p><img src="/images/network_part1/present.png" alt="데이터 받아라!"></p><p>데이터 역시 이와 같습니다. 데이터 또한 헤더로 쌓여져 있는 포장지를 디캡슐레이션 해나가서 최종단계인 Application 레이어에 도달해 우리가 이해할 수 있게 되어 있는 데이터를 마주하게 되는 것입니다.</p><p>다른 상대방에게 보낼 때는? 똑같이 역으로 예쁘게 포장을 해서 상대방에게 보내면 됩니다. </p><p>우리가 상대방에게 데이터를 전송한다고 해봅시다. 흐름은 다음 같습니다.</p><p>데이터(인코딩) → 세그먼트(Layer4) → 패킷(Layer3) → 프레임(Layer2) → 비트(Layer1)</p><p>인간이 이해하기 쉬운 형태로 되어있는 데이터가 기계가 이해할 수 있게 인코딩되고 헤더를 붙여나가면서, 최종적으로는 비트로 표현되어 다른 곳으로 보내어질 준비를 마치게 됩니다. </p><h4 id="OSI-7-Layer-요약"><a href="#OSI-7-Layer-요약" class="headerlink" title="OSI 7 Layer 요약"></a>OSI 7 Layer 요약</h4><table><thead><tr><th>Layer</th><th>PUD</th><th>Protocol</th><th>Device</th><th>Function</th></tr></thead><tbody><tr><td>7 (Application)</td><td>Data</td><td>HTTP, FTP, DNS, DHCP, SMTP, NFS, RTSP</td><td></td><td>사용자가 네트워크에 접근할 수 있도록 해주는 계층이다.사용자 인터페이스, 전자우편, 데이터베이스 관리 등 서비스를 제공한다.</td></tr><tr><td>6 (Presentation)</td><td>Data</td><td>JPEG, MPEG, SMB, AFP</td><td></td><td>데이터를 하나의 표현 형태로 변환한다.필요한 번역을 수행하여 두 장치가 일과되게 전송 데이터를 이해할 수 있도록 한다.</td></tr><tr><td>5 (Session)</td><td>Data(Payload)</td><td>SSH, TLS, ISO8327, Apple talk, NetBIOS</td><td></td><td>통신 세션을 구성하는 계층으로 포트(port) 연결이라고도 할 수 있다. 통신 장치 간의 상호 작용을 설정하고 유지하며 동기화한다. 사용자 간의 포트 연결(세션) 이 유효한지 확인하고 설정한다.</td></tr><tr><td>4 (Transport)</td><td>Segments</td><td>TCP, UDP, RTP, SCTP, SPX</td><td>Gateway</td><td>End to End Commnication전체메시지를 발신지 대 목적지 간 제어와 에러를 관리한다. 패킷들의 전송이 유효한지 확인하고 실패한 패킷은 다시 보내는 등 신뢰성 있는 통신을 보장하며 머리 말에는 Segment 가 포함된다.</td></tr><tr><td>3 (Network)</td><td>Packets</td><td>IP, ARP, ICMP, IGMP, RIP, IPX, DDP,OSPF, IS-IS, BGP</td><td>Router</td><td>다중 네트워크 링크에서 패킷을 발신지로부터 목적지로 최단 거리로 전달할 책임을 갖는다. 각 패킷이 시작지점에서 최종목적지까지 성공적으로 전달 되도록 한다.</td></tr><tr><td>2 (Data Link)</td><td>Frames</td><td>Ethernet, PPP, Wireless Len</td><td>Bridge, Switch</td><td>오류없이 한 장치에서 다른 장치로 프레임(비트의 모음)을 전달하는 역할로 스위치 같은 장비의 경우 MAC 주소를 이용하여 정확한 장치로 정보를 전달한다.</td></tr><tr><td>1 (Physical)</td><td>Bits</td><td>Ethernet, RS-232C,Modem</td><td>Hub, Reafiter</td><td>물리적 매체를 통해 비트 흐름을 전송하기 위해 요구되는 기능들을 조정한다.케이블, 연결 장치 등과 같은 기본적인 물리적 연결기의 전기적 명세를 정하고네트워크의 두 노드를 물리적으로 연결시켜준다.</td></tr></tbody></table><p>출처 : <a href="https://kin3303.tistory.com/247">https://kin3303.tistory.com/247</a></p><hr><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://ko.wikipedia.org/wiki/OSI_%EB%AA%A8%ED%98%95">https://ko.wikipedia.org/wiki/OSI_모형</a></p><p><a href="http://blog.naver.com/PostView.nhn?blogId=pst8627&logNo=221670903384">http://blog.naver.com/PostView.nhn?blogId=pst8627&amp;logNo=221670903384</a></p><p><a href="https://jhnyang.tistory.com/194">https://jhnyang.tistory.com/194</a></p><p><a href="https://kin3303.tistory.com/247">https://kin3303.tistory.com/247</a></p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/11/29/network-part1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>글또  5기 다짐하기</title>
      <link>http://tkdguq05.github.io/2020/11/15/geultto5/</link>
      <guid>http://tkdguq05.github.io/2020/11/15/geultto5/</guid>
      <pubDate>Sun, 15 Nov 2020 08:41:03 GMT</pubDate>
      <description>
      
        &lt;p&gt;글또 5기를 시작하며, 다짐하기.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>글또 5기를 시작하며, 다짐하기.</p><a id="more"></a><h1 id="글또-5기를-시작하며"><a href="#글또-5기를-시작하며" class="headerlink" title="글또 5기를 시작하며"></a>글또 5기를 시작하며</h1><p>막상 이 글을 적으려니 어떻게 시작해야 감이 잡히지 않았다. 그래서 지난 기수에 썼던 내 다짐글을 확인했다. <a href="https://tkdguq05.github.io/2020/02/24/geultto4/">글또 4기 다짐글</a><br>지난 번 글을 보니 꽤 들뜬 마음에 글을 작성한 느낌이 든다. 생각해보니, 9개월 전에 비해 요즘은 들뜰 일이 많이 없는 것 같다. 시간이 지나면서 무뎌지고 회사생활에 견디는 것으로 세월을 보내는 느낌이다. 글또 4기가 끝난 후에 한동안 글도 쓰지 않고 뒹굴 뒹굴 거리며 열심히 쳇바퀴 도는 삶을 지속했었다. 최근들어 이렇게 의미없이 살고 싶지 않다고 다짐했는데, 마침 글또 5기가 시작됐고 이전에 비해 좀 더 나은 글을 쓰면서 하루 하루를 다시 기록해봐야겠다고 마음먹었다.</p><p>지나고보니, 그렇게 지나간 시간이 너무나 아까웠기 때문이다.</p><h2 id="어떤-글을-쓸까-혹은-어떻게-성장할까"><a href="#어떤-글을-쓸까-혹은-어떻게-성장할까" class="headerlink" title="어떤 글을 쓸까, 혹은 어떻게 성장할까"></a>어떤 글을 쓸까, 혹은 어떻게 성장할까</h2><p>개발 관련 글은 다른 글과는 다르게 내가 경험하거나 공부한 내용들이 주이기 때문에, 글또 활동을 하며 어떤 글을 쓸지 결정하는 것은 어떻게 성장할지, 방향을 결정하는 것과 같다고 생각한다. 4기에서 썼었던 글을 쭉 보면, 논문 리뷰, pyspark, airflow 등 데이터 사이언스와 엔지니어링 그 사이인 것 같다. 사실 업무적으로는 추천시스템이나 모델링 관련 일을 더 많이 했는데, 새로 배운 개념들이 주로 엔지니어링 파트라 새로 얻은 내용을 주로 글로 작성했던 것 같다. (근데 지나고 보니 생각보다 글을 안쓴 것 같아서 민망하다.) 이번 5기에서도 엔지니어링 글들과 인프라 관련 글들을 작성해 나갈 것 같다. 회사에서의 담당 업무가 데이터 엔지니어링 쪽으로 옮겨졌기 때문이다. 옮겨졌다고 하니 강제적으로 배치된 느낌이긴 하지만, 사실 그렇지는 않고 엔지니어링 업무에 흥미가 생겼다. 그래서 거의 자원하다시피 된 것이고 관련 업무를 맡게 되었다. 엔지니어링 업무를 통해 실제로 서비스가 어떻게 돌아가고 데이터를 어떻게 흘려보내고 관리해야 하는 지에 알게 되어 재미를 느끼고 있다. 목표하는 바는 데이터 엔지니어링에 더 나아가 머신러닝 엔지니어링이지만, 일단 바닥을 잘 닦아볼 생각이다.</p><h2 id="글쓰기-외에-내년에는"><a href="#글쓰기-외에-내년에는" class="headerlink" title="글쓰기 외에, 내년에는"></a>글쓰기 외에, 내년에는</h2><p>글또 5기는 약 6개월 정도 진행될 예정이다. 그러니까 내년 5월까지인데, 연말도 되었고 앞으로 어떤 걸 해볼까에 대해서 처음으로 생각을 해보게 되었다. </p><p>사실 하고 싶은 건 많다. 예전부터 피아노를 배워보고 싶었고, 영상을 직접 찍고 편집해보고 싶기도 했다. 하지만 공부하고 운동하고 나면, 쉬느라 정신이 없었던 것 같다. 실제로 정신을 쓸 여유가 없었기도 했고, 연말 쯤 되니 아홉수 기운이 몰려와 안좋은 변화들을 마주하게 됐다. </p><p>많이 괴롭고 힘든 시기였지만, 어떻게 하겠는가? 이미 맞닥뜨린 상황에 좌절만 하고 있을 수는 없다. 최근에 MMA에 조금 빠지게 되면서 알게된 말이 있는데, 맥스 할러웨이의 <strong>“It is what it is”</strong>란 말이다. 맥스는 챔피언전에서 아주 훌륭하게 싸우고 판정에서 패배한 일이 있다. SNS에서도 많은 팬들과 선수들이 말도 안되는 일이라는 게시물을 남겼다. 하지만 맥스는  “It is what it was” 라며 패배를 받아들였고 파이터로서 바뀐 것은 없다고 말했다.<br><img src="/images/max.png" alt="it is what it is"></p><p>그래서 나도 좌절하지 않고 나아가기로 했다. 앞서 말한 것처럼 좌절하면서 보내버린 시간이 너무나 아깝기 때문이었다. 패배감에 빠져 내가 할 일을 못하게 되는 게 더 비참해 보였다. 그래서 올해의 마지막과 내년은 더 튼튼하게 살 예정이고 주변 사람들과 직장 동료들을 잘 챙기면서 앞으로 쭉 가볼 생각이다. 혼자만 잘 살기 보다는 동료들과 같이 성장하는 것을 더 선호하기 때문에, 같이 도와주고 끌어주면서 발전해 나가고 싶다.  </p><p>글이 조금 다른 쪽으로 많이 갔는데, 다시 돌아와서 내년에 내가 하고 싶은 것은 다음과 같다.  </p><h3 id="운동"><a href="#운동" class="headerlink" title="운동"></a>운동</h3><ul><li>꾸준히 하기, 주 3회 이상</li><li>쇠질 목표는 3대 350</li><li>달리기 목표는 5km 25분 안에 들어오기</li></ul><h3 id="학습"><a href="#학습" class="headerlink" title="학습"></a>학습</h3><ul><li>데이터 파이프라인 흐름 완벽하게 파악하기</li><li>사용하고 있는 스택의 기능 제대로 파악하기</li><li>Kubernetes kubeflow나 airflow에 적용하기</li><li>실시간 처리 모델 서비스 하기</li><li>데이터 엔지니어링 흐름이 다 보인다면 논문 보기</li><li>수학 공부 다시하기</li></ul><h3 id="삶"><a href="#삶" class="headerlink" title="삶"></a>삶</h3><ul><li>기술 분야 외에 다른 책, 두 달에 한 권은 읽기</li><li>핸드폰 사용시간 줄이기</li><li>자투리 시간이나 이동시간 활용하기</li><li>소중한 사람들을 잘 살피기</li></ul><p>대략적인, 글로 공개할 수 있는 목표는 이 정도인 것 같다. 언제 다 이룰 수 있을까 했지만, 꾸준히 하다보면 이루어지겠지. 이번 6개월도 열심히 살아보자!</p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/11/15/geultto5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SISG를 활용한 Fasttext에 대해서 알아보자</title>
      <link>http://tkdguq05.github.io/2020/08/14/Fasttext/</link>
      <guid>http://tkdguq05.github.io/2020/08/14/Fasttext/</guid>
      <pubDate>Fri, 14 Aug 2020 13:09:06 GMT</pubDate>
      <description>
      
        &lt;p&gt;자연어 처리 모델에 자주 사용되는 FastText를 뽀개보고 skipgram 모델과의 차이를 알아보자.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>자연어 처리 모델에 자주 사용되는 FastText를 뽀개보고 skipgram 모델과의 차이를 알아보자.</p><a id="more"></a><h1 id="Fasttext"><a href="#Fasttext" class="headerlink" title="Fasttext"></a>Fasttext</h1><p>출처 : <a href="https://en.wikipedia.org/wiki/FastText">Wikipedia</a><br>fastText는 Facebook의 AI Research lab에서 만든 단어 임베딩 및 텍스트 분류 학습을 위한 라이브러리입니다. 이 모델을 사용하면 단어에 대한 벡터 표현을 얻기 위해 비지도 학습 또는 지도 학습 알고리즘을 만들 수 있습니다.   </p><p>Fasttext는 위키피디아 설명에서 보듯이 Facebook에서 만들었고 그에 걸맞게 임베딩도 잘되고 성능도 우수한 편인 모델입니다. 실제로 지금 있는 회사에서도 자연어 처리를 할 때 Word2Vec이나 Fasttext의 도움을 받고 있습니다.  </p><p>오늘 살펴볼 내용은 Fasttext가 어떻게 학습을 하는지, 그리고 Skip gram 모델과 어떤 차이점이 있는지 입니다.<br>자연어 모델이나 Sequential 딥러닝 모델을 한번 쭉 살펴보신 분들은 이해가 빠를 수 있습니다. 하지만 글은 어렵지 않으니 천천히 따라오면 잘 이해할 수 있을 것입니다. 있을 것이라고 믿습니다.    </p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>기존의 embedding model은 unique word를 하나의 vector에 할당할 수 있었습니다. 그러나 이와 같은 방식은 vocabulary의 크기가 커지거나 rare word(못 봤었던 단어)가 많을수록 한계점을 내포하게 됩니다. 한계점이란 이러한 word들은 good word representation을 얻기 힘들다는 점입니다. 특히 현재까지의 word representation 기법들은 문자의 internal structure를 고려하지 않고 있기 때문에 학습이 더욱 힘들었습니다. 더 나아가 스페인어나 프랑스어의 경우 대부분의 동사가 40개 이상의 변형된 형태를 지니고 있는 복잡한 언어이기 때문에, 이러한 언어에서는 rare word 문제가 더욱 부각 됩니다. 이런 이유로 이처럼 형태학적인 특징이 풍부한 언어의 경우에는 subword 정보를 활용하여 rare word에 대한 한계점을 극복하고자 합니다. subword를 이용해서 vector representation을 개선시키고자 하는 것입니다. </p><h2 id="General-Model-Skip-gram"><a href="#General-Model-Skip-gram" class="headerlink" title="General Model, Skip-gram"></a>General Model, Skip-gram</h2><p>먼저 일반적인 모델인 skip-gram의 프로세스를 알아야 fasttext에 대해 잘 알 수 있습니다.<br><img src="/images/fasttext/model_explain.png" alt="skip-gram"><br>스킵 그램은 그림에서처럼 window size의 단어들을 슬라이딩 해 가면서 타겟 단어에 대해서 주변 단어들이 올 확률을 구해 나갑니다. 파란색으로 표시된 것이 타겟 단어이며 주위 단어들이 context word, 즉 주변 단어입니다. $w_t$와 $w_c$로 표현됩니다. 여기에 가정이 하나 추가되는데, context word는 조건부 독립(conditionally independent)이라는 가정입니다. </p><p><img src="/images/fasttext/skip-gram1.png" alt="skip-gram 모델"><br>위의 그림은 아까 살펴봤었던 과정을 모델의 관점에서 자세히 살펴보겠습니다. 레이어의 구성은 인풋 레이어, 히든 레이어, 아웃풋 레이어로 되어있습니다. 인풋 레이어에는 단어들이 들어가고 히든 레이어에는 타겟 단어에 대한 벡터값이 남습니다. 아웃풋 레이어 까지 거치게 되면 가중치 벡터들과 예측한 값이 나오게 되고 가중치 벡터에는 타겟단어와 주변단어들에 대한 가중치들이 저장되어 있습니다. 예측된 결과를 실제 값과 비교해서 각 단어들에 대한 loss값을 뽑아내게 되고 이것을 더하면 전체 loss값이 됩니다. </p><p>숫자를 통해서 이를 더 구체화 해보면 다음과 같습니다.<br><img src="/images/fasttext/skip-gram2.png" alt="skip-gram 계산 과정"></p><p>이렇게 계산되는 과정을 살펴보다 보면, 비효율적인 부분들이 발견됩니다. 어디일까요? 문제점을 발견하고 개선시켜나가 보겠습니다.</p><h2 id="Improvement"><a href="#Improvement" class="headerlink" title="Improvement"></a>Improvement</h2><h3 id="1-Row-Indexing"><a href="#1-Row-Indexing" class="headerlink" title="1. Row Indexing"></a>1. Row Indexing</h3><p><img src="/images/fasttext/row_indexing.png" alt="Row Indexing"><br>맨 처음 인풋이 들어간 부분과 $W_{input}$을 통해서 타겟에 대한 벡터값을 얻게 됩니다. 만약 들어가는 인풋 단어가 엄청나게 많다면 어떻게 될까요? 수 많은 계산을 일일이 해주어야 합니다. 하지만, 생각을 한번 바꿔보면 어떨까요? 인풋 단어들은 one-hot index로 되어 있습니다. 따라서 $W_{inpit}$의 row index를 그냥 가져오기만 하면 되지 않을까요? </p><p>이렇게 row index를 가져오면 계산을 효과적으로 줄일 수 있습니다. 결과적으로는 같지만 처리해야할 연산이 획기적으로 줄게 되는 것입니다.</p><h3 id="2-Negative-Sampling"><a href="#2-Negative-Sampling" class="headerlink" title="2. Negative Sampling"></a>2. Negative Sampling</h3><p><img src="/images/fasttext/negative_sampling.png" alt="Negative Sampling"><br>이번엔 다음부분으로 넘어가 봅시다. 어떤 부분이 비효율적일까요?<br>히든 레이어인 $h$와 $W_{output}$의 곱하는 부분과 softmax 계층의 병목이 보입니다. 생각해봅시다. latent vector $h$와 $W_{output}$도 역시 단어들이 많아지면 연산을 많이 처리해야 합니다. softmax 계층도 마찬가지입니다. 그러나 하나의 target word와 관련된 context word들은 window size내의 작은 word 정도밖에 안됩니다. 전체 단어를 굳이 다 처리해야 할 필요가 없는 것입니다. 즉, $h$와 $W_{output}$의 행렬 곱 연산은 인풋과 관련되어 있기 때문에 업데이트 되어야 할 단어는 몇 개 안되는데도 불구하고, vocabulary에 있는 모든 단어들과의 관계를 비교해야합니다. 여기서 비효율성이 발생하게 됩니다. </p><p>이를 해결하기 위해 <strong>Negative Sampling</strong>이 제안됩니다. Negative Sampling의 핵심은 지금의 multi-clas classification 문제를 간단한 binary classification 문제로 바꾸는 것입니다. 어떻게 바꿀까요?  </p><h4 id="How-to-Negative-Sampling"><a href="#How-to-Negative-Sampling" class="headerlink" title="How to Negative Sampling"></a>How to Negative Sampling</h4><p>먼저 알아야할 개념이 있습니다.   </p><ul><li>positive example: target word의 context word</li><li>negative example: target word의 context word가 아닌 word<br>우리는 context word를 1로 처리할 것이고, 아닌 단어들은 0으로 처리할 것입니다. 연산을 줄이기 위함입니다.  </li></ul><p><img src="/images/fasttext/negative_sampling_ex.png" alt="negative sampling example"><br>예를 들어보겠습니다. 위의 그림에서 dot product된 결과가 나오고 있습니다. (숫자는 임의로 입력한 값입니다) positive example들은 초록색으로 표시되어 label을 1로 처리하고, negative example들은 주황색으로 표시되어 label을 0으로 처리합니다. 이렇게 연산을 줄여서 처리한 뒤에 로스를 계산합니다. 단어가 많으면 많아질수록 줄어드는 연산의 양이 커질 것입니다. 그렇다면 의문점이 또 생깁니다. negative sampling을 하는 단어를 어떻게 정할까요?  </p><p>Negative Sampling은 Corpus 내에서 자주 등장하는 단어를 더 많이 추출하고 드물게 등장하는 단어는 적게 추출하고자 합니다. 이 목적을 달성하기 위해서 Probability distribution을 이용하는데 수식은 다음과 같습니다. </p><p><img src="/images/fasttext/ns_formula.png" alt="formula"><br>$f(w_i)$는 모든 corpus의 단어 중에서 특정 단어 $w_i$가 얼마나 들어있는지를 의미합니다. 따라서 위의 식에서 $P(w_i$은 전체 코퍼스에서 특정단어 $w_i$가 얼마나 있는지를 나타내는 식입니다. 빈도 수와 관계가 있다고 할 수 있겠습니다. 그러면 왜 $3\over4$ 라는 숫자를 사용할까요? 증명된 것은 없습니다. 논문에서 이 숫자를 사용했을 때 잘 되었던 것입니다. 이 파라미터는 수정이 가능하니 데이터에 맞게 조정하면 됩니다. </p><hr><p><img src="/images/fasttext/notation.png" alt="notation">  </p><p>우리가 지금까지 했었던 것을 간단하게 정리해 보겠습니다.<br><img src="/images/fasttext/skip_formula1.png" alt="skip gram formula1"><br>우리는 이 가정에서 출발했습니다. 가정을 이용해서 skip-gram 모델을 만들었습니다. 효율적으로 처리하기 위해 skip그램에 Row indexing을 사용했고 Negative sampling을 사용했습니다. 이를 통해서 우리가 얻고자 한 것은 다음의 수식입니다.</p><p><img src="/images/fasttext/skip_formula2.png" alt="skip gram formula2"><br>원래는 왼쪽의 수식의 값을 최대화 하는 것이었지만, 단어의 수가 많아지면 오른쪽의 수식으로 변경해 log-likielihood를 최대화 합니다. </p><p>context word가 올 확률에 대해서는 다양한 선택이 있겠지만  연산 후의 softmax 결과 값을 사용합니다.<br><img src="/images/fasttext/softmax.png" alt="softmax"></p><p>하지만 우리는 negative sampling을 통해 Multiclass Classification 문제를 Binary Classification로 변경했습니다. 결국 위의 softmax는 context 단어들의 존재 여부를 독립적으로 얘측에 대한 확률이 됩니다. </p><p>negative sampling에 의해서 골라진 contex word에 대한 포지션은 $c$로 표현됩니다. Binary Logistic loss에 의해서, 우리는 다음과 같은 negative log likelihood 값을 얻을 수 있습니다.<br><img src="/images/fasttext/skip_formula3.png" alt="negative log likelihood">  </p><p>밑 부분의 score값인 $s(w_t,w_c)$를 주의해서 봐주시기 바랍니다.   </p><p>이제 모든 타겟 단어에 대해서 다음과 같은 수식으로 정리가 되면, skip gram model에 대한 설명은 끝납니다.<br><img src="/images/fasttext/skip_objective.png" alt="skip gram objective"></p><hr><h2 id="Fasttext-SISG"><a href="#Fasttext-SISG" class="headerlink" title="Fasttext, SISG"></a>Fasttext, SISG</h2><p>Fasttext는 skip gram모델을 개선한 모델입니다. SISG(Subword Information Skip Gram)를 이용해 Skip gram모델의 성능을 개선합니다. SISG란 무엇일까요?</p><h3 id="SISG-Subword-Information-Skip-Gram"><a href="#SISG-Subword-Information-Skip-Gram" class="headerlink" title="SISG(Subword Information Skip Gram)"></a>SISG(Subword Information Skip Gram)</h3><p>SISG는 간단한 개념입니다. 각 단어 $w$는 n-gram의 bag을 담고 있다고 해봅시다. 이제 여기에 <code>&lt;</code>와 <code>&gt;</code>를 이용해서 단어의 시작과 끝을 알려줄 것입니다. 한 가지 더 <strong>단어 그 자체를 넣어 줄 것입니다.</strong> 각 단어 자체의 표현을 학습시키기 위함입니다. <code>where</code>이라는 단어의 처리에 관한 예를 들어봅시다.</p><p><img src="/images/fasttext/where.png" alt="how to process where"><br>n=3일 때의 예시입니다. 위의 예시처럼 <code>&lt;</code>,<code>&gt;</code>를 한 글자씩 처리해서 나누면 <code>re&gt;</code>로 끝나게 됩니다. 그런데 여기에 <code>&lt;where&gt;</code>도 같이 넣어주는 것이 핵심입니다. 이유를 생각해봅시다. 중간에 <code>her</code>이란 단어가 눈에 띄었을 겁니다. her는 단어로 처리되어야 할까요? 아닙니다. her은 그냥 단어의 조각일 뿐이며 subword에 해당됩니다. 진짜 단어였다면 <code>&lt;her&gt;</code>로 표현이 되어야 할 것입니다. </p><p>이렇게 만든 후에 n-gram의 벡터표현을 모두 더한 score 값을 구하면, 그것이 바로 SISG의 목적 함수가 됩니다. 아까 봤던 score함수가 바뀌었습니다. score함수만 바꿔주면 fasttext의 목적합수 입니다.<br><img src="/images/fasttext/sisg.png" alt="SISG Score">  </p><p>이를  pseudo code로 나타내면.<br><img src="/images/fasttext/pseudo_code.png" alt="pseudo code for computing loss"><br>(뒷부분에 neg가 아니라 neg_sample인데 오타가 있습니다.) 참고바랍니다.</p><p>마지막으로 평가에 대해서 입니다. 임베딩의 각 버전에 대해, 임베딩만을 기반으로 주어진 account 셋의 topic을 예측하도록 분류기를 훈련합니다. hold out set의 account에 대해 예측 된 주제를 사람이 라벨링 한 topic과 비교하여 임베딩이 topic의 유사성을 얼마나 잘 파악하는지 평가할 수 있습니다.  </p><hr><p>Fasttext는 Skip Gram 모델을 subword를 활용하자는 간단한 아이디어로 만들어진 모델입니다. 모델에서 활용되는 이런 센스들을 잘 익혀두면 다른 모델에 적용하거나, 다른 논문들을 읽을 때 큰 도움이 될 것 같습니다. </p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/08/14/Fasttext/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Kubernetes Beginning</title>
      <link>http://tkdguq05.github.io/2020/07/30/k8s-genesis/</link>
      <guid>http://tkdguq05.github.io/2020/07/30/k8s-genesis/</guid>
      <pubDate>Thu, 30 Jul 2020 00:35:47 GMT</pubDate>
      <description>
      
        &lt;p&gt;자 이제 쿠버네티스에 대해 공부해보자. Docker in kubernetes, k8s architecture, cluster, and pods.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>자 이제 쿠버네티스에 대해 공부해보자. Docker in kubernetes, k8s architecture, cluster, and pods.</p><a id="more"></a><p>지난 글들로부터 가상화에 대해서 공부했고, 도커에 대해서 살펴봤습니다. 쿠버네티스는 가상화와 도커가 기본이 되는 시스템입니다. 가상화와 도커에 대해서 기억이 잘 나지 않는다면 잠시 보고 와도 좋습니다.   </p><p><a href="https://tkdguq05.github.io/2020/07/03/docker/#more">인프라의 기초, Docker에 대해서 알아보자</a>.<br><a href="https://tkdguq05.github.io/2020/06/07/virtualization/#more">클라우드 서비스의 기초. Virtualization, 가상화에 대해서</a>  </p><hr><h1 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes?"></a>Kubernetes?</h1><p>쿠버네티스를 최초로 만들고 사용한 곳은 구글입니다. 시스템에 배포 가능한 어플리케이션 구성 요소의 수가 많아지면서 모든 구성 요소의 관리가 어려워질 수 밖에 없기 때문입니다. 구글은 전 세계에서 소프트웨어 구성 요소와 인프라를 잘 배치하고 관리하는 방법이 필요하다는 것을 최초로 깨달은 회사일 것입니다. 수십만 대의 서버를 운영하고 엄청난 규모의 배포관리를 처리하는 기업입니다. 이로 인해 구글은 수천 개의 소프트웨어 구성 요소를 관리하고 비용 효율적으로 개발, 배포할 수 있는 솔루션을 개발해야만 했습니다. 그래서 등장한 것이 쿠버네티스의 전신인 보그-오메가 이며, 2014년에 구글은 쿠버네티스를 출시하게 됩니다. 구글이 만든 시스템답게 정말 잘 됩니다!</p><p>만약 구글이 모놀리스 어플리케이션으로 개발을 했다면 어땠을까요? 아마 이 정도의 확장은 불가능 했을 것 입니다. 모놀리스 어플리케이션이란 한 덩어리처럼 개발을 하는 것입니다. 큰 돌로 이루어진 건축물에 비유를 할 수 있습니다. 이와 반대되는 개념은 마이크로스서비스 기반 어플리케이션입니다. 이는 단일 역할을 책임지는 여러 조각으로 구성된 소프웨어로 구성되어 있습니다. 구글은 각 부분이 알아서 잘 돌아가는 MSA구조로 이루어져 있기 때문에 이렇게 확장할 수 있었습니다. 그리고 그것을 가능하게 해준 것이 바로 쿠버네티스입니다.   </p><p>쿠버네티스는 컨테이너화된 어플리케이션을 쉽게 배포하고 관리할 수 있게 해주는 소프트웨어 시스템입니다. 어플리케이션은 컨테이너에서 실행되어 동일한 서버에서 실행되는 다른 어플리케이션에 영향을 주지 않아 동일한 하드웨어의 다른 조직의 어플리케이션이 실행될 때 영향을 주지 않습니다.  이를 통해 쿠버네티스를 사용하게 되면, 제공된 하드웨어를 최대한으로 사용할 수 있게 됩니다. 쿠버네티스를 활용하면 모든 노드가 하나의 거대한 컴퓨터 처럼 수천대의 노드에서 어플리케이션을 실행할 수 있습니다. </p><h2 id="Kubernetes을-사용하면-좋은-점"><a href="#Kubernetes을-사용하면-좋은-점" class="headerlink" title="Kubernetes을 사용하면 좋은 점"></a>Kubernetes을 사용하면 좋은 점</h2><h4 id="먼저-개발자가-어플리케이션-핵심-기능에-집중할-수-있게-됩니다"><a href="#먼저-개발자가-어플리케이션-핵심-기능에-집중할-수-있게-됩니다" class="headerlink" title="먼저 개발자가 어플리케이션 핵심 기능에 집중할 수 있게 됩니다."></a>먼저 개발자가 어플리케이션 핵심 기능에 집중할 수 있게 됩니다.</h4><p>쿠버네티스를 클러스터의 운영체제로도 생각할 수 있습니다. 이렇게 되면 어플리케이션 개발자가 특정 인프라 관련 서비스를 어플리케이션에 구현하지 않아도 됩니다. 쿠버네티스를 활용하면 되니까요. 쿠버네티스에는 서비스 디스커버리, 스케일링, 로드밸런싱, 자가치유, 리더선출 같은 것들이 들어갑니다. 따라서 어플리케이션 개발자는 기능을 구현하는 데 집중을 하면 되고, 인프라에 관련된 고민을 하지 않아도 됩니다.</p><h4 id="운영-팀이-효과적으로-리소스를-활용할-수-있습니다"><a href="#운영-팀이-효과적으로-리소스를-활용할-수-있습니다" class="headerlink" title="운영 팀이 효과적으로 리소스를 활용할 수 있습니다."></a>운영 팀이 효과적으로 리소스를 활용할 수 있습니다.</h4><p>쿠버네티스는 클러스터에 컨테이너화된 어플리케이션을 실행하고 구성 요소들 간에 연결되는 방법에 대한 정보를 제공하며, 이를 이용해 모든 어플리케이션이 계속 실행되도록 합니다. 어플리케이션은 어떤 노드에서 실행되든 상관이 없기 때문에 쿠버네티스는 언제든지 어플리케이션을 재배치하고 조합함으로써 주어진 리소스를 잘 활용할 수 있게 됩니다.</p><h2 id="Kubernetes-Architecture"><a href="#Kubernetes-Architecture" class="headerlink" title="Kubernetes Architecture"></a>Kubernetes Architecture</h2><p>쿠버네티스 클러스터가 어떻게 구성되어 있는지 알아봅시다. 쿠버네티스는 두 가지 유형으로 나눌 수 있습니다. 마스터 노드와 워커 노드입니다.  </p><ul><li>마스터 노드는 쿠버네티스 컨트롤 플레인을 실행합니다. 컨트롤 플레인은 전체 쿠버네티스 시스템을 제어하고 관리합니다.</li><li>워커 노드는 실제 배포되는 컨테이너 어플리케이션을 실행합니다.<br><img src="/images/kube_arc.png" alt="Kubernetes Cluster Architecture"></li></ul><h3 id="Control-Plain"><a href="#Control-Plain" class="headerlink" title="Control Plain"></a>Control Plain</h3><p>컨트롤 플레인은 클러스터를 제어하고 작동시키는 역할입니다. 하나의 마스터 노드에서 실행하거나 여러 노드로 분할되고 복제되어 고가용성을 보장할 수 있는 여러 구성 요소로 구성 되어 있습니다. 그 구성요소는 다음과 같습니다.</p><ul><li><p>Kubernetes API 서버 : 사용자 , 컨트롤 플레인 구성 요소와 통신한다.</p></li><li><p>Scheduler : 어플리케이션의 배포를 담당한다.(스케쥴링이라는 용어는 파드가 특정 노드에 할당됨을 의미합니다.) </p><ul><li><p>노드가 배정되지 않은, 새로 생성된 파드를 감지하고 실행할 노드를 선택하는 컨트롤 플레인 컴포넌트입니다. 스케쥴링 결정을 위해서 고려되는 요소들은 다음과 같습니다.  </p><ul><li>리소스에 대한 개별 및 총체적 요구 사항</li><li>하드웨어/소프트웨어/정책적 제약</li><li>어피니티(affinity) 및 안티-어피니티(anti-affinity) 명세</li><li>데이터 지역성</li><li>워크로드-간 간섭</li><li>데드라인</li></ul></li></ul></li><li><p>Controller Manager : 컨트롤러 매니저는 구성요소 복제본, 워커 노드 추적, 노드 장애 처리 등과 같은 클러스터 단의 기능을 수행한다.  </p></li><li><p><a href="https://github.com/etcd-io/etcd">etcd</a> : 클러스터 구성을 지속적으로 저장하는 신뢰할 수 있는 분산 데이터 저장소이다. </p></li></ul><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>워커 노드는 컨테이너화된 어플리케이션을 실행하는 시스템입니다. 어플리케이션을 실행하고 관리하며 서비스를 제공하는 작업은 다음 구성 요소에 의해 수행됩니다.</p><ul><li>Contianer Runtime : 컨테이너를 실행하는 도커나 rkt 등등</li><li>kubelet : API 서버와 통신하고 노드의 컨테이너를 관리한다.<ul><li>kubelet은 파드를 관리한다고 생각하면 됩니다. 클러스터의 각 노드에서 실행되는 에이전트로 kubelet은 파드에서 컨테이너가 확실하게 동작하도록 관리합니다. kubelet은 다양한 메커니즘을 통해 제공된 파드 스펙의 집합을 받아서 컨테이너가 해당 파드 스펙에 따라 원할하게(Health) 동작하게 합니다. kubelet은 쿠버네티스를 통해 생성되지 않은 컨테이너는 관리하지 않습니다. </li></ul></li><li>kube-proxy : 어플리케이션 구성 요소 간에 네트워크 트래픽을 로드밸런싱한다.<ul><li>kube-proxy는 클러스터의 통신을 담당합니다. 클러스터의 각 노드에서 실행되는 네트워크 프록시로, 쿠버네티스의 서비스 개념의 구현부입니다. kube-proxy는 노드의 네트워크 규칙을 유지 관리합니다. 이 네트워크 규칙이 내부 네트워크 세션이나 클러스터 밖에서 파드로 네트워크 통신을 할 수 있도록 해줍니다.<br>kube-proxy는 운영 체제에 가용한 패킷 필터링 계층이 있는 경우, 이를 사용합니다. 그렇지 않으면 kube-proxy는 트래픽 자체를 forward합니다.</li></ul></li></ul><h3 id="Kubernetes-cluster가-상호작용하는-방법"><a href="#Kubernetes-cluster가-상호작용하는-방법" class="headerlink" title="Kubernetes cluster가 상호작용하는 방법"></a>Kubernetes cluster가 상호작용하는 방법</h3><p>클러스터는 마스터와 노드들로 구성이 되어있고 각 노드들은 도커, kubelet, kube-proxy 데몬을 실행합니다. 우리가 설치한 kubectl 명령어를 실행하면 마스터 노드에 쿠버네티스 API 서버로 REST요청을 보내서 클러스터와 상호작용하게 됩니다.<br><img src="/images/kube_cluster.png" alt="노드 세 개인 쿠버네티스 클러스터와 상호작용하는 모습"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes</span><br></pre></td></tr></table></figure><p>이제 명령어로 node들을 확인할 수 있습니다.   </p><p>이렇게 간단하게 쿠버네티스 클러스터 구조에 대해 살펴봤습니다. </p><hr><h1 id="Docker-in-Kubernetes"><a href="#Docker-in-Kubernetes" class="headerlink" title="Docker in Kubernetes"></a>Docker in Kubernetes</h1><p>지난 번 도커 글을 연장해서 쿠버네티스로 이어지는 흐름을 만들어보겠습니다. 지난 도커 글에서는 간략한 소개만 했기 때문에 이미지와 이미지 레이어에 대한 이야기를 깊게 못해서 조금 더 설명을 해보겠습니다. </p><h2 id="Docker-Image"><a href="#Docker-Image" class="headerlink" title="Docker Image"></a>Docker Image</h2><p>우리가 어떤 어플리케이션을 만들었다고 가정합시다. 이 어플리케이션을 이미지로 구성해서 내 환경과 같이 만들어, 어떤 환경에서 누구나 작업하게 만들고 싶습니다. 이렇게 이미지로 패키징하기 위해서는 Dockerfile을 만들어야 합니다. 이 파일에는 도커가 이미지를 생성하기 위해 수행해야 할 지시 사항들이 담겨져 있습니다. 이 Dockerfile은 .py와 같은 파일과 같은 위치에 있어야 합니다. Dockerfile을 살펴보겠습니다.  </p><p>책 Kubernetes in Action의 예제를 사용하겠습니다.  </p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">7</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> app.js /app.js</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"node"</span>, <span class="string">"app.js"</span>]</span></span><br></pre></td></tr></table></figure><p>FROM은 기본 이미지로 사용할 컨테이너 이미지를 정의합니다. ADD는 로컬 디렉토리의 app.js 파일을 이미지의 루트 디렉토리에 동일한 이름으로 추가한다는 뜻입니다.  ENTRYPOINT는 이미지를 실행했을 때 수행돼야 할 명령어를 나타냅니다.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t &lt;name&gt; .</span><br><span class="line"></span><br><span class="line"><span class="comment">#실제 사용</span></span><br><span class="line">$ docker build -t kubia .</span><br></pre></td></tr></table></figure><p>이 명령어를 이용하면 이름대로 이미지가 빌드됩니다. 도커에게 현재 디렉토리의 컨텐츠를 기반으로 이름으로 적힌 이미지를 빌드하라고 요청합니다. 도커는 Dockerfile을 보고 명령에 기반해 이미지를 빌드합니다. 이미지가 컴퓨터에 저장돼 있지 않으면, 도커는 Docker Hub에서 이미지를 다운 받습니다. 도커의 이미지는 하나의 큰 덩어리 파일이 아니라 여러개의 레이어로 구성됩니다. 그래서 빌드를 할 때 필요한 이미지가 있다면 필요한 이미지 레이어만 다운로드 하는 것 입니다. </p><p>도커 이미지를 배포하는 것은 저번 글에서 설명을 했습니다. 이제 컨테이너 이미지에 어플리케이션을 패키징하고 도커 허브를 통해 사용할 수 있게 됐습니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker tag kubia luksa/kubia</span><br><span class="line"></span><br><span class="line">$ docker push luksa/kubia <span class="comment"># 버전 명을 적지 않으면 최신 버전으로 알아서 작성해 주지만 시간이 더 걸립니다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 다른 머신에서 이미지 실행하기</span></span><br><span class="line">$ docker run -p 8080:8080 -d luksa/kubia</span><br></pre></td></tr></table></figure><p>이제 쿠버네티스 클러스터에 어플리케이션을 배포할 수 있게 됐습니다. 배포를 위해서는 쿠버네티스 클러스터가 필요합니다.  </p><p>쿠버네티스 클러스터를 구성하는 법은 다양합니다. mini kube를 설치하는 방법도 있고, AWS에 EKS나 GCP를 이용해서 node를 만들고 쿠버네티스 환경을 만들 수 있습니다. 각자의 환경이 구성되었다고 가정하고 진행하겠습니다.  </p><h2 id="Kubernetes-client-설치"><a href="#Kubernetes-client-설치" class="headerlink" title="Kubernetes client 설치"></a>Kubernetes client 설치</h2><p>kubectl CLI 클라이언트가 있어야 쿠버네티스를 다룰 수 있습니다.   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* 리눅스 기준</span><br><span class="line"><span class="comment">#파일 다운로드</span></span><br><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s \</span><br><span class="line">   https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl</span><br><span class="line"><span class="comment">#파일 권한 변경</span></span><br><span class="line">chmod +x ./kubectl</span><br><span class="line"><span class="comment">#파일을 PATH가 설정된 폴더로 옮긴다(alias 명령어로 실행하기 위해)</span></span><br><span class="line">sudo mv ./kubectl /usr/<span class="built_in">local</span>/bin/kubectl</span><br><span class="line"><span class="comment">#설치 확인</span></span><br><span class="line">kubectl version --client</span><br></pre></td></tr></table></figure><p>kubectl 정보가 나오면 성공입니다.<br>이제 아까 전에 만든 node.js 어플리케이션을 구동해 보겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl run kubia --image=luksa/kubia --port=8080 --generator=run/v1</span><br><span class="line">&gt; replicationcontroller <span class="string">'"kubia" created</span></span><br></pre></td></tr></table></figure><p>–image=luksa/kubia 부분은 실행하는 컨테이너 이미지를 명시하는 것이며, -port=8080은 쿠버네티스에 어플리케이션이 8080포트를 수신 대기해야 한다는 것을 알려줍니다.  –generator부분은 디플로이먼트 대신 레플리케이션컨트롤러를 생성하기 때문에 사용했습니다. 레플리케이션 컨트롤러는 조금 이따 설명하겠습니다.  </p><h3 id="백그라운드에서-무슨-일이-일어나고-있는-것일까"><a href="#백그라운드에서-무슨-일이-일어나고-있는-것일까" class="headerlink" title="백그라운드에서 무슨 일이 일어나고 있는 것일까?"></a>백그라운드에서 무슨 일이 일어나고 있는 것일까?</h3><p>일단 지금 무슨 일이 일어난 것인지 설명해보겠습니다. 현재 도커 이미지를 푸시해서 도커 허브에 공유해놓았고 공유된 이미지를 가져와서 kubectl을 이용해 구동했습니다. kubectl 명령은 쿠버네티스의 API서버로 REST http요청을 전달하고 클러스터에 새 레플리케이션 컨트롤러 오브젝트를 생성합니다. 레플리케이션 컨트롤러는 새 파드를 만들고 스케쥴러에 의해 워커 노드 중 하나에 스케줄링을 완료합니다. kubelet은 파드가 할당된 것을 보고 이미지가 로컬에 없는 것을 확인합니다. 이미지를 받기 위해 도커에게 특정 이미지를 풀하도록 지시하고 luksa/kubia 이미지를 받은 후 도커는 컨테이너를 이미지를 이용해 생성하고 실행합니다.  </p><p>과정을 살펴봤듯이, 우리가 직접 컨테이너를 직접 생성하거나 동작하지 않습니다. 파드만을 이용했습니다. 하지만 파드도 직접 만들지 않았고 쿠버네티스에서 알아서 잘 만들었습니다. kubectl run을 하면 레플리케이션 컨트롤러를 생성하고 이것이 실제 파드를 만들어 냅니다. 클러스터 외부에서 파드에 접근하기 위해 쿠버네티스에게 레플리케이션 컨트롤러에 의해 관리되는 모든 파드를 단일 서비스로 노출하도록 명령합니다. 결국 쿠버네티스의 시스템은 레플리케이션 컨트롤러, 파드, 서비스로 구성됩니다. </p><h4 id="가장-중요한-구성요소는-파드입니다"><a href="#가장-중요한-구성요소는-파드입니다" class="headerlink" title="가장 중요한 구성요소는 파드입니다."></a>가장 중요한 구성요소는 파드입니다.</h4><p>여기서 파드는 하나의 컨테이너를 갖고 있지만, 보통 파드는 원하는 갯수의 컨테이너를 가질 수 있습니다. 컨테이너 내부에는 현재 Node.js 프로세스가 있고 포트 8080에 바인딩 되어 http요청을 기다리고 있습니다. 파드는 자체의 고유한 private ip와 host name을 갖습니다.</p><h4 id="레플리케이션-컨트롤러를-살펴보겠습니다"><a href="#레플리케이션-컨트롤러를-살펴보겠습니다" class="headerlink" title="레플리케이션 컨트롤러를 살펴보겠습니다."></a>레플리케이션 컨트롤러를 살펴보겠습니다.</h4><p>레플리케이션 컨트롤러는 항상 정확히 하나의 파드 인스턴스를 실행하도록 지정합니다. 보통 파드를 복제하고 항상 실행 상태로 만듭니다. 여기서는 파드의 replicas를 지정하지 않았습니다. 따라서 파드를 하나만 생성했습니다. 어떤 장애 등의 이유로 파드가 죽어버리면 레플리케이션 컨트롤러는 지정된 파드 수를 채우기 위해 새로운 파드를 생성할 것입니다. </p><h4 id="이제-서비스를-살펴보겠습니다"><a href="#이제-서비스를-살펴보겠습니다" class="headerlink" title="이제 서비스를 살펴보겠습니다."></a>이제 서비스를 살펴보겠습니다.</h4><p>kubia-http 서비스가 필요한 이유를 알기위해 파드의 주요 특성을 더 이해해 볼 필요가 있습니다. 파드는 영원하지 않습니다. ephemeral하기 때문에 사라질 수 있습니다. 파드가 죽어버릴 수 있고 누군가 파드를 kill할 수도 있으며, 비정상 노드에서 파드가 제거될 수 있습니다. 물론 사라지면 레플리케이션 컨트롤러에 의해서 다시 새 파드로 대체됩니다. 중요한 것은 새 파드는 다른 IP주소를 할당받는 다는 것입니다. 그렇기 때문에 서비스가 필요합니다. 서비스를 이용하면, 파드의 IP주소가 바뀌는 문제와 여러 개의 단일 파드를 단일 IP와 포트의 쌍으로 노출하는 문제를 해결할 수 있습니다. </p><p>서비스가 생성되면 정적 IP를 할당받습니다. 그리고 서비스가 있는동안 변경되지 않습니다. 파드에 직접 연결해야 하지만 클라이언트는 서비스의 IP 주소를 통해 연결해야 합니다. 서비스는 어떤 파드가 어떤 IP를 받는지 상관없이 파드 중 하나로 연결해 요청을 처리합니다.<br>서비스는 동일한 서비스를 제공하는 하나 이상의 파드 그룹의 정적인 위치를 나타냅니다. 서비스의 IP와 포트로 요청이 들어오면 그 순간 서비스에 속해 있는 파드 중 하나로 요청을 전달하게 됩니다.</p><h2 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h2><p>쿠버네티스에 대해서 조금이라도 본 사람은 파드에 대해서도 들어본 적이 있을 것입니다. 파드는 노드 안에 구성된 여러개의 컨테이너를 가질 수 있는 컨테이너의 그룹입니다. 쿠버네티스는 개별 컨테이너를 직접 다루지 않고 파드를 다룹니다. 이 파드들은 kubectl로 조회할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods</span><br></pre></td></tr></table></figure><p>혹시 파드의 상태가 Pending상태라면 파드의 단일 컨테이너가 준비가 되지 않은 것이다. 할당된 워커 노드가 컨테이너를 실행하기 전에 컨테이너 이미지를 다운로드하는 중이기 때문일 수도 있고, 리소스 부족일 수도 있다. 조금 기다려본 후 계속 pending으로 나온다면 리소스를 늘려주면 된다. 다운로드가 완료되고 파드의 컨테이너가 생성되면 Running으로 나온다.  파드에 대해서는 간단히 설명하고 나중에 따로 깊게 다뤄 보도록 하겠습니다.<br><img src="/images/pods.png" alt="pods"> </p><hr><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary."></a>Summary.</h1><p>쿠버네티스에 대해서 공부한 내용을 간단하게 요약해 보겠습니다.</p><ul><li>모놀리스 어플리케이션은 처음에 구축하기 쉽지만 가면 갈수록 유지 관리하기가 힘들고 확장이 불가능해 집니다.</li><li>마이크로서비스 기반 어플리케이션 아키텍쳐는 각 구성 요소의 개발을 요이하게 하지만 하나의 시스템으로 작동하도록 배포하고 구성하기 어렵습니다.</li><li>쿠버네티스는 전체 데이터 센터를 어플리케이션 실행을 위한 컴퓨팅 리소스로 제공하게 합니다.</li><li>쿠버네티스를 통해서 개발자는 시스템 관리자의 도움 없이도 어플리케이션을 배포할 수 있게 됩니다.</li><li>쿠버네티스를 통해서 시스템 관리자는 쿠버네티스가 고장 난 노드가 자동으로 처리되게 함으로써 더 편하게 잠을 잘 수 있게 됩니다. </li><li>쿠버네티스는 마스터 노드와 워커 노드로 이루어져있습니다.</li><li>어플리케이션을 컨테이너 이미지로 패키징하고 원격에 푸시해 누구나 사용하게 할 수 있습니다.</li><li>쿠버네티스는 파드를 이용해 어플리케이션을 배포합니다.</li></ul><p>여러 내용을 전달하려고 하다보니 글이 장황해진 것 같습니다. 다음 글에서는 파드에 대해서 더 깊게 알아보고 네임스페이스로 파드를 겹치지 않는 그룹으로 나누는 방법을 살펴보겠습니다.</p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/07/30/k8s-genesis/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2020년 상반기를 보내면서, 회고하기</title>
      <link>http://tkdguq05.github.io/2020/07/18/retrospect2020/</link>
      <guid>http://tkdguq05.github.io/2020/07/18/retrospect2020/</guid>
      <pubDate>Sat, 18 Jul 2020 01:28:40 GMT</pubDate>
      <description>
      
        &lt;p&gt;2020년 상반기 회고.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>2020년 상반기 회고.</p><a id="more"></a><p>(썸네일 사진은 대구의 앞산. 불꽃놀이도 운 좋게 구경하고 좋은 기억이었다.)</p><p>2020년 새해가 밝은 이후로 벌써 7월이 다 지나가고 있다. 아차 싶을 사이에 시간은 쏜살 같이 흘렀고 동시에 회사에 들어온지도 1년이 되었다. 작년의 나는 많은 것들을 다짐했다. 특히 글또를 하면서, 글에 대해서 고민을 많이 했고 완성도 있는 글을 쓰고자 노력했다. 2주에 한 번 글을 쓰는게 글또의 룰이지만, 스스로의 의지로 더 많은 글을 쓰고 싶었고 공부를 꾸준히 하면서 정리하고 성장하고 싶었다. 나는 많이 성장했을까? 내가 지키고자 한 약속들을 지키고 있는걸까?</p><p>글또를 시작하면서의 다짐 <a href="https://tkdguq05.github.io/2020/02/24/geultto4/#more">https://tkdguq05.github.io/2020/02/24/geultto4/#more</a><br>2019년도 회고, 2020년을 맞이하며 <a href="https://tkdguq05.github.io/2019/12/22/adios-2019/#more">https://tkdguq05.github.io/2019/12/22/adios-2019/#more</a></p><hr><h2 id="“2020을-시작하며”를-다시-보면서"><a href="#“2020을-시작하며”를-다시-보면서" class="headerlink" title="“2020을 시작하며”를 다시 보면서"></a>“2020을 시작하며”를 다시 보면서</h2><h4 id="2020년에-나는"><a href="#2020년에-나는" class="headerlink" title="2020년에 나는"></a>2020년에 나는</h4><ul><li>추천 시스템이나 다른 서비스를 위한 데이터 파이프라인 구성을 성공적으로 한다.</li><li>퇴근 후 개인 공부시간을 매일 30분 이상 갖는다.</li><li>캐글 대회에 도전한다.</li><li>캐글 대회에서 동메달 이상의 성과를 낸다.</li><li>일주일에 3일 이상 운동한다.</li><li>3대 운동 300에 도전한다.</li><li>돈을 모아서 피렌체에 간다.</li><li>꾸준히 글을 쓴다.</li><li>책을 꾸준히 읽자.</li><li>일을 즐겁게 한다.</li><li>소중한 사람들을 잘 챙기자.</li></ul><p>나는 2020년을 시작하면서 위와 같은 목표를 세웠었다. 보자마자 헛웃음이 나왔다. 11개의 목표 들을 하나하나 훑어보자.   </p><h4 id="먼저-파이프라인에-대해서는-잘-구성한-것-같다"><a href="#먼저-파이프라인에-대해서는-잘-구성한-것-같다" class="headerlink" title="먼저 파이프라인에 대해서는 잘 구성한 것 같다."></a>먼저 파이프라인에 대해서는 잘 구성한 것 같다.</h4><p>오픈소스와 나름 최신 스택의 기술을 사용해서(Airflow, Kubeflow, Spark …) 파이프라인을 운영하고 있고 아직까지는 잘 돌아가고 있다. 파이프라인 구성을 잘 한 것도 기분이 좋았는데 새로운 영역을 공부하는 재미를 알게 된 것 같다. 아마 데이터 엔지니어링이라고 불리우는 이 영역에 대해서 항상 마음만 갖고 제대로 공부해 본 적이 없었고, 어떤 걸 먼저 공부해야 하는지 몰랐었다. 특히 기본 지식이 부족한 게 큰 것 같았다. 가상화와 리눅스에 대해서 알아야 이해가 빨랐었을 것 같은데 예전에는 전혀 몰랐다. 다행히 같이 일하시는 매니져님이 오픈소스도 많이 다뤄보시고 가상화와 리눅스에 대해서 잘 알려주셔서 다른 개념들을 이해하는데 큰 도움이 되었다. 공부한 내용을, 특히, 가상화와 도커에 대해서 최근에 정리를 했다. 사실 마음에 들지는 않는다. 더 필요한 내용들이 많다고 생각되었는데, Kubernetes나 Kubeflow를 빠르게 다뤄보고 싶은 사람들이 타겟이었기 때문에 가볍게 작성했다. 추후에 시간이 되면 스핀오프 글로 도커에 대한 내용을 더 자세하게 다루고 해당 개념이 Kubernetes나 Kubeflow에서 어떻게 적용되는지 자세하게 다뤄보고 싶다. 이미 스포가 된 것 같은데 앞으로의 글은 Kubeflow와 Kubernetes에 대한 글이 될 것이다. 처음 다뤄 보는 내용이지만 기존 시스템을 혁신적으로 바꿀 수 있을 만하기 때문에 흥미롭게 보고 있다.   </p><h4 id="퇴근-후에-공부시간을-갖고-있지-못하고-있다"><a href="#퇴근-후에-공부시간을-갖고-있지-못하고-있다" class="headerlink" title="퇴근 후에 공부시간을 갖고 있지 못하고 있다."></a>퇴근 후에 공부시간을 갖고 있지 못하고 있다.</h4><p>공부도 공부인데 목하고 어깨가 너무 안좋아졌다. 조금만 무리하면 목디스크처럼 통증이 있어서 왠만하면 퇴근하고는 운동을 하거나 스트레칭을 하고 있다. 이렇게라도 하지 않으면 회사 업무에 신경쓰기 힘들어져서 일단 몸을 먼저 챙겨야 겠다는 생각이다. 주말에는 가끔 도수치료나 물리치료를 받고 있고 여유롭게 지내고 있다. 하지만 최근 들어서 공부하고싶은 내용도 생겼고, 좀 더 달려봐야겠다는 마음이라 앞으로는 공부시간을 갖게 되지 않을까 한다.  </p><h4 id="캐글-대회에는-도전하지-못했다"><a href="#캐글-대회에는-도전하지-못했다" class="headerlink" title="캐글 대회에는 도전하지 못했다."></a>캐글 대회에는 도전하지 못했다.</h4><p>물론 동메달 이상의 성과도 내지 못했다. 하지만 회사 동료들과 챌린지에 나가서 나름 대회에 참가해보기는 했다. 회사에 들어오면서 내가 세운 다른 목표중에 하나였는데, 결과는 좋지 않았지만 훌륭한 출발이었던 것 같다. 추후에 캐글에 도메인 성격과 맞는 대회가 나오면 같이 참가해보기로 했다. 챌린지 결과 때문인지 다들 눈에 독기가 생긴 것 같다. </p><h4 id="일주일에-3일-이상-운동을-하고-있다"><a href="#일주일에-3일-이상-운동을-하고-있다" class="headerlink" title="일주일에 3일 이상 운동을 하고 있다."></a>일주일에 3일 이상 운동을 하고 있다.</h4><p>3대 운동 300이라는 목표를 달성하려고 했는데 무리하게 하다보니까 몸이 너무 피곤해서 업무에 지장이 가는 것 같았다. 단백질을 많이 챙겨먹어야 하는데 그렇지도 못하고 있고… 일단 운동을 통해서 기본 체력을 올리고 스트렝스 훈련을 강화해야겠다. 무게가 잘 늘지 않는데 일단 유지하고 심페 능력부터 길러야겠다. 나이를 먹으면서 느끼는 것 중 하나는 내 상태를 유지하는 것도 힘든 일이라는 점이다.   </p><h4 id="피렌체에-가려고-했다"><a href="#피렌체에-가려고-했다" class="headerlink" title="피렌체에 가려고 했다."></a>피렌체에 가려고 했다.</h4><p>4월에 가는 티켓을 구매했고 모든 걸 준비해 놨었다. 하지만 코로나19로 인해……<br>나이 서른이 되기 전에 유럽을 다시한번 가고 싶었는데 이건 뭐 어쩔 수 없으니깐^^ 하…<br>결국 누나도 이탈리아에서 돌아왔고 앞으로 피렌체에 가려면 돈이 더 들거 같다. 언젠가 한번쯤은 꼭 가고 싶기 때문에 돈을 모아서 피렌체와 로마 밀란을 가봐야겠다.  </p><h4 id="글은-글또를-하면서-꾸준히-쓰고-있다"><a href="#글은-글또를-하면서-꾸준히-쓰고-있다" class="headerlink" title="글은 글또를 하면서 꾸준히 쓰고 있다."></a>글은 글또를 하면서 꾸준히 쓰고 있다.</h4><p>돈의 강제성이란 정말 무서운 것이다. 아 정말 쓰기 싫다라는 생각이 들어도 보증금을 생각하면 맘이 바뀐다. 애초에 목표를 ‘10만원 보증금 유지하기’로 잡고 있어서 더 그런 것도 있지만, 직접 돈을 벌다 보니 푼돈 몇 푼 나가는 게 모여서 10만원이 되고 카드값이 되었다. 티끌모아 태산이란 말은 내 통장의 잔고에는 해당이 되는 말이 아니었고 카드 값에 대한 말인 것 같았다.<br>2주에 글 하나 쓰는 건 글또를 하면서 조금 아깝다는 생각이 들었다. 공부할 시간이 더 많아지면 정리할 내용도 많아지고 글 쓸 거리도 많아지겠지! 시리즈 물도 다시 한번 써보고 싶다. 확실히 시리즈를 써야 내 관련 글도 많이 보고 글을 쓰는 내 태도도 좋아 지는 것 같다.  </p><h4 id="책은-기술관련-서적-말고는-거의-못-보고-있다"><a href="#책은-기술관련-서적-말고는-거의-못-보고-있다" class="headerlink" title="책은 기술관련 서적 말고는 거의 못 보고 있다."></a>책은 기술관련 서적 말고는 거의 못 보고 있다.</h4><p>‘인간의 무늬’나 ‘정확한 사랑의 실험’을 꼭 마저 보고 싶은데, 아… 책 읽는 거 힘들다. 아이패드를 항상 갖고 다니면서 버스나 지하철에서 봐야겠다. 유튜브 프리미엄을 끊었더니 유튜브가 너무 너무 좋아졌는데, 책 몇 페이지라도 보고 유튜브 보고 이래야겠다. 하루에 몇 페이지 꾸준하게 정해놓고 읽으면 모여서 책 한 권이되고 다섯 권이 되지 않을까? 책 많이 보고 싶어서 yes24 많이 들어가긴 하는데, 기술 서적이 더 눈에 띄고 그러면서 다른 책은 언제 보나 또 고민하고 있고… 꾸준히… 꾸준하게…!</p><h4 id="일에-대해서-고민이-커지고-있다"><a href="#일에-대해서-고민이-커지고-있다" class="headerlink" title="일에 대해서 고민이 커지고 있다."></a>일에 대해서 고민이 커지고 있다.</h4><p>사실 데이터 팀에서의 일을 너무 즐겁고, 이 일에 대해서 고민하는 것도 행복하다. 하지만 어떤 프로젝트가 늦어지고 그것 때문에 우리가 만들어 놓은 모델을 붙이지 못해서 하염없이 기다리고 있을 때 좀 힘들었다. 큰 불만이 없었는데 조금씩 불만이 쌓여가고 있는 것 같다. 아예 신경을 쓰지 말고 내 일만 해야할까? 고민한다고 상황이 나아지기는 하는 걸까? 잘 모르겠다. 일단 내 생각은 우리 일에 집중하자는 것이다. 고민해봤자 나아지는 건 없는 것 같았다.<br>이런 고민 말고 다른 고민은 데이터 엔지니어와 모델러에서 어떤 커리어 패스를 잡아야 할까 하는 고민이다. 엔지니어 쪽 공부가 재밌긴 하지만, ‘내가 다른 사람보다 잘 할 수 있을까?’, ‘경력이 너무 모자른건 아닐까?’라는 생각이 많다. 물론 그렇다고 모델러의 역할을 잘 하는 것 같지도 않다ㅎㅎ. 팀원들이랑 얘기도 많이 해보고, 추후에 글또 모임을 또 갖게 된다면, 다양한 분들과 얘기를 하고 싶다. 글을 쓰다보니 마음이 정리되는 것 같은데, 이야기를 나누다 보면 고민도 어느정도 풀리겠지.</p><h4 id="소중한-사람들을-잘-챙기려고-노력하고-있다"><a href="#소중한-사람들을-잘-챙기려고-노력하고-있다" class="headerlink" title="소중한 사람들을 잘 챙기려고 노력하고 있다."></a>소중한 사람들을 잘 챙기려고 노력하고 있다.</h4><p>소중한 사람들을 챙길 때 마음이 좋아지고 행복해질 때가 있는 반면에, 썩 기분 좋지 않은 일도 있었다. 보통 어떤 사람을 챙겨줄 때 내가 기대한 만큼 고마워 한다거나 그 마음이 느껴지면 행복하고 기분이 좋아졌는데, 그냥 항상 있는 일인듯 양, 반응을 보이면 기분이 좋지 않았다. 실망했다고 해야하나? 난 소중하게 생각했는데, 상대방은 그렇지 않은 것 같다고 느낄 때 마음이 좋지 않았다. <del>INFJ형 인간은 이렇때 과감하게 싹을 잘라내 버리는 편</del> 이긴 하지만, 왠만하면 내가 더 잘해야지 라는 마음가짐으로, 차카게 살려고 노력하고 있다.<br><img src="/images/jja.png" alt="짜증 내면 타령아저씨가 잡아간다!">  </p><hr><h3 id="회고를-하면서"><a href="#회고를-하면서" class="headerlink" title="회고를 하면서."></a>회고를 하면서.</h3><p> 내가 어떻게 살아왔는지에 대해서 고민하면서 생각을 많이 정리할 수 있어서 좋았다. 한 동안 이런 시간이 없었는데, 강제로라도 회고글을 쓰게 해주는 글또에 큰 감사함을 느낀다. 오랜 고민을 하고 생각을 정리한 끝에 내가 뭘 해야 하고 어떤 행동을 할때 행복한지 기분이 좋은 지에 대해서 덤으로 알게 되는 것 같다. 한 번쯤 뒤돌아 보는 삶은 괜찮은 것 같다. 더 바쁘게 살아야지 하면서 앞만 보고 달리다보면 지치게 된다고 생각한다. 가끔은 뒤돌아보고 내가 걸어온 길이 크게 돌아온 것은 아닌지, 오면서 놓친 것이나 잃어버린 건 없는지, 확인해보고 다음 걸음을 준비하는 게 어떨까 하고 글을 마무리해본다. </p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/07/18/retrospect2020/#disqus_thread</comments>
    </item>
    
    <item>
      <title>인프라의 기초, Docker에 대해서 알아보자</title>
      <link>http://tkdguq05.github.io/2020/07/03/docker/</link>
      <guid>http://tkdguq05.github.io/2020/07/03/docker/</guid>
      <pubDate>Fri, 03 Jul 2020 00:18:28 GMT</pubDate>
      <description>
      
        &lt;p&gt;여러 서비스에서 다양하게 사용되고 있는 Docker에 대해서 알아보자.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>여러 서비스에서 다양하게 사용되고 있는 Docker에 대해서 알아보자.</p><a id="more"></a><p>main 출처 : 완벽한 it 인프라 구축을 위한 docker.<br>완벽한 it 인프라 구축을 위한 docker을 읽고 정리한글임을 밝힙니다.  </p><p>sub 출처 : <a href="https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html">https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html</a></p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker?"></a>Docker?</h1><p><img src="https://i.pinimg.com/originals/4e/73/01/4e7301538895cdc19b0eb5f2a3b60730.png" alt="귀여운 도커"><br>도커는 애플리케이션의 실행에 필요한 환경을 하나의 이미지로 모아두고, 이미지를 사용해 다양한 환경에서 앱 실행 환경을 구축하고 운영하기 위한 오픈소스 플랫폼입니다. 도커는 내부에서 컨테이너를 사용하는데, 일반적으로 생각하는 물류시스템에서의 컨테이너를 생각해도 좋습니다. 컨테이너로 실어서 다른 곳에 나르는 것처럼, 다양한 개발환경을 컨테이너로 추상화하기 때문에 동일한 환경을 누구에게나 제공할 수 있습니다. 이렇게 동일한 개발환경을 제공하게 되기 때문에 프로그램의 배포 및 관리를 쉽게 할 수 있게 됩니다. 하루종일 환경세팅만 하다가 하루를 날린 경험이 있다면 도커로 환경세팅하는 것이 얼마나 감사한 일인지를 잘 느낄 수 있을 것 입니다. 도커를 이용해서 개발을 하게 되면 폭포형 개발에서 벗어나서 지속적 딜리버리가 가능한 구조의 개발 스타일이 가능해집니다. 도커를 이용한 블루 그린 디플로이먼트 방법이 그 예시 중 하나인데. 블루 그린 디플로이 먼트는 글 하단에서 자세하게 다뤄보도록 하겠습니다.</p><p>*참고로 도커 컨테이너를 가장 잘 사용하고 있는 회사는 구글이고, 모든 서비스들이 컨테이너로 동작하며 매주 20억 개의 컨테이너를 구동 한다고 합니다.</p><h1 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h1><p>도커는 컨테이너 기술을 활용합니다. 컨테이너 기술은 도커가 시작되면서 만들어진 기술은 아니고, 기존에 존재하던 기술이었습니다. 컨테이너란 호스트 OS상에 논리적인 구획, 즉, 컨테이너를 만들고, 어플리케이션을 작동하기 위해 필요한 라이브러리나 애플리케이션 등을 하나로 모아 마치 별도의 서버인 것처럼 사용할 수 있게 만든 것입니다. 호스트 OS의 리소스를 논리적으로 분리시키고 여러개의 컨테이너가 이것을 공유해 사용합니다. 컨테이너는 가볍고 속으로 작동합니다. 컨테이너는 가상화 기술을 사용해서 다양한 기능을 제공하게 되는데, 가상화에 대해서는 이 글을 참고하시면 좋습니다. <a href="https://tkdguq05.github.io/2020/06/07/virtualization/">가상화</a>. </p><p>컨테이너 기술의 장점을 잠깐 소개하자면, 기존의 컨테이너를 이용하지 않는 시스템에서는 하나의 OS 상에서 움직이는 여러 애플리케이션들에 대한 관리를 해주어야 합니다. 다양한 디렉토리와 IP주소를 공유하게 됩니다. 이런 개발 환경에서는 각 어플리케이션이 서로 영향을 받을 가능성이 높습니다. 반면에 컨테이너를 활용하면 OS나 디렉토리, IP 주소 등을 각 어플리케이션이 독립적으로 갖고 있는 것처럼 보이게 할 수 있습니다. 이런 개발환경에서는 마이크로 서비스가 구현될 가능성이 높습니다.</p><h1 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h1><p>개발자는 도커를 이용해서 자신이 개발한 프로그램에 필요한 모든 것이 포함되어 있는 도커 이미지를 작성합니다. 이 이미지는 도커의 가장 큰 특징 중 하나입니다. 개발자가 개발한 환경을 도커 이미지로 만들면 이 이미지를 기반으로 해서 컨테이너가 동작하게 됩니다. 이렇게 만들어진 이미지는 기본적으로 어디서든 동작합니다. ‘테스트 환경에서는 됐는데, 제품 환경에서는 안돈다’라는 리스크를 줄일 수 있게 됩니다. 이를 통해 지속적 딜리버리가 가능하게 되고 변화에 강한 시스템을 구축할 수 있습니다.  </p><p>데이터 사이언스 분야에서는 대량의 컴퓨터 리소스를 사용하게 되고 다양한 라이브러리들을 사용하게 되는데, 환경 세팅에 너무 힘을 쓰다보면 모델 개발에 집중할 수 없게 됩니다.(공감하시는 분들 많으실 겁니다( xgboost설치 할 때를 생각해보십시오). 이런 경우 환경을 도커 이미지로 모아두면 어디에서나 다른 환경에서도 작동하는 실행환경을 만들 수 있게 됩니다. </p><h1 id="Docker의-기능"><a href="#Docker의-기능" class="headerlink" title="Docker의 기능"></a>Docker의 기능</h1><p>도커에는 크게 세 가지 기능이 있습니다.</p><ul><li>Docker Build, 이미지 만들기</li><li>Docker Ship, 이미지 공유</li><li>Docker Run, 컨테이너 실행</li></ul><h2 id="Docker-Build"><a href="#Docker-Build" class="headerlink" title="Docker Build"></a>Docker Build</h2><p>도커는 앞서 소개했듯이, 프로그램 실행에 필요한 프로그램 본체, 라이브러리, 미들웨어, OS, 네트워크 등을 하나로 모아서 Image로 만듭니다. 그리고 이 이미지는 컨테이너의 바탕이 됩니다. 보통 Docker에서 빌드시에 권장하는 내용은 하나의 이미지에 하나의 어플리케이션만 넣어 두고, 여러개의 컨테이너를 조합해 서비스를 구축하는 것입니다.</p><p>도커 이미지를 만드는 방법은 Docker 명령어를 사용해 수동으로 만들 수도 있고, Dockerfile이라는 설정 파일을 만들어서 작성한 내용을 바탕으로 자동으로 이미지를 만들 수 있습니다. Dockefile을 사용하여 관리하는 것이 지속적 integration과 지속적 딜리버리 관점에서 바람직해 보입니다.</p><p>또한 도커 이미지는 겹쳐서 사용할 수 있다는 것이 중요한 특징입니다. 도커에서는 변경이 있었던 부분을 이미지 레이어로 관리합니다.<br><img src="https://adeeshfulay.files.wordpress.com/2017/09/docker-layers1.png?w=529" alt=""></p><h2 id="Docker-Ship"><a href="#Docker-Ship" class="headerlink" title="Docker Ship"></a>Docker Ship</h2><p>만들어진 이미지는 공유가 가능합니다. Docker Hub에 자유롭게 공개를 할 수 있습니다. 많은 이미지가 있으므로 원하는 내용이 있다면 받아서 사용이 가능합니다. 물론 가입은 해야합니다. 또한 도커는 github이나 bitbucket과 연계가 가능하기 때문에 github같은 곳에서 Dockerfile을 관리하고 거기에서 이미지를 자동으로 생성해서 Docker Hub에 공개 할 수도 있습니다. </p><h2 id="Docker-Run"><a href="#Docker-Run" class="headerlink" title="Docker Run"></a>Docker Run</h2><p>Docker는 리눅스 상에서 컨테이너 단위로 서버 기능을 작동시킵니다.  이 때 사용되는 것이 도커 이미지입니다. 이미지만 있다면 여러대의 컨테이너를 기동시키는 것도 가능합니다. 도커는 다른 가상화 기술과는 다르게 떠 있는 OS 상에서 프로세스를 실행시키는 것과 같은 속도로 빠르게 실행을 할 수 있습니다.<br><img src="https://subicura.com/assets/article_images/2017-01-19-docker-guide-for-beginners-1/vm-vs-docker.png" alt=""></p><p>도커는 하나의 리눅스 커널을 여러 개의 컨테이너가 공유하는 구조입니다. 각 그룹별로 프로세스나 파일에 대한 엑세스는 독립적으로 가져가게 됩니다. 이렇게 독립적으로 사용하게 위해 리눅스의 namespace나 cgroup등의 개념이 사용됩니다. </p><p>한 대의 호스트 머신에서 모든 도커 컨테이너를 작동시키고 운용하는 것은 힘들기 때문에 분산환경을 구축하고, 컨테이너 관리를 위해서 오케스트레이션 툴을 사용합니다. 컨테이너 오케스트레이션 툴 중 가장 핫하고 유명한 것은 Kubernetes입니다.</p><h2 id="Docker-Image-사용해보기"><a href="#Docker-Image-사용해보기" class="headerlink" title="Docker Image 사용해보기"></a>Docker Image 사용해보기</h2><h3 id="Docker-Install"><a href="#Docker-Install" class="headerlink" title="Docker Install"></a>Docker Install</h3><p>먼저 Docker를 사용하기 위해서는, 도커를 먼저 설치해야 합니다. Mac이나 Windows를 사용하시는 분들은 <a href="https://docs.docker.com/get-docker/">https://docs.docker.com/get-docker/</a> 에서 다운받아 간단하게 설치하실 수 있습니다. 설치 후에</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>명령어를 쳤을 때, 이상 없이 나오면 성공입니다. </p><h3 id="Docker-Image"><a href="#Docker-Image" class="headerlink" title="Docker Image"></a>Docker Image</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image pull [이미지명]</span><br></pre></td></tr></table></figure><p>이미지를 받는 방법은 간단합니다. <code>pull</code> 명령어를 통해서 원하는 이미지를 받으면 됩니다.<br>받고 싶은 이미지를 search를 통해서 검색하고 Pull해서 받아봅니다. 받은 이미지들의 목록은 <code>ls</code>를 이용해면 됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure><p><img src="/images/image_ls.png" alt="이미지 목록"></p><p>생각보다 이미지가 너무 많습니다. 원하지 않는 이미지를 지우고 싶을 때는 <code>rm</code>을 사용하면 됩니다. 리눅스 명령어와 비슷합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image rm [이미지id]</span><br></pre></td></tr></table></figure><p>이미지 id를 적어주고 명령어를 실행시키면, 해당 이미지가 없어진 것을 볼 수 있습니다. 사용하지 않는 이미지를 제거하고 싶다면 <code>prune</code>을 사용하면 됩니다.</p><p>이번에는 컨테이너로부터 이미지를 직접 작성해 봅시다. 작성자에 ‘hyub’이라는 정보를 설정하고 webserver라는 컨테이너를 hyuby/webfront라는 이름으로 태그명을 지정해서 새 이미지를 작성해 보겠습니다. 명령어는 다음과 같습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container commit -a <span class="string">'hyub'</span> webserver tkdguq05/webfront:1.0</span><br></pre></td></tr></table></figure><p>이렇게 만들어진 이미지의 작성자 정보는 docker image inspect로 확인할 수 있습니다.</p><p>만든 hyuby/webfront 이미지를 그러면 업로드 해보겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image push [이미지명:태그명]</span><br></pre></td></tr></table></figure><p>위와 같은 명령어가 기본값입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image push tkdguq05/webserver:1.0</span><br></pre></td></tr></table></figure><p>혹시 <code>denied: requested access to the resource is denied</code>이런 에러가 나온다면, Docke Hub에 로그인이 되어있지 않았기 때문일 가능성이 높습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure><p>이 명령어를 통해 로그인 하도록 합시다. 그래도 에러가 난다면, Docker Hub와 이미지에 있는 작성자 정보가 다르기 때문입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image tag tkdguq05/webserver:1.0 [change user]/webserver:1.0</span><br></pre></td></tr></table></figure><p>이런 식으로 작성자명을 변경한 후에 업로드 해보도록 합니다. 업로드가 완료되면! Docker Hub에 올린 이미지가 공개됩니다.</p><p><img src="/images/docker_hub.png" alt="업로드된 이미지"></p><h3 id="Docker-export"><a href="#Docker-export" class="headerlink" title="Docker export"></a>Docker export</h3><p>컨테이너나 이미지나 모두 export하고 다시 import 할 수 있습니다. export를 하게되면 tar파일로 떨어지게 됩니다. 이 파일을 import하면 이미지나 컨테이너를 그대로 사용할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#docker image save [옵션] &lt;파일명&gt; [이미지명]</span></span><br><span class="line">docker image save -o export.tar tensorflow</span><br></pre></td></tr></table></figure><p>읽는 것도 간단합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image load -i export.tar</span><br></pre></td></tr></table></figure><p>다만 컨테이너는 명령이 조금 다릅니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#docker container export &lt;컨테이너 시별자&gt; &gt; 저장 파일명</span></span><br><span class="line">docker container <span class="built_in">export</span> webserver &gt; latest.tar</span><br></pre></td></tr></table></figure><p>이렇게 만들어 놓은 tar파일을 이용해서 이미지를 작성할 수 있습니다. 위에 있는 import 명령어를 활용하면 됩니다. </p><p>여기서 한 가지 이상한 점이 있습니다. export/import, save/load가 왜 따로 구분되어 있을까? 하는 점입니다. 둘의 차이는 무엇일까요?</p><h3 id="export-import-save-load의-차이"><a href="#export-import-save-load의-차이" class="headerlink" title="export/import, save/load의 차이"></a>export/import, save/load의 차이</h3><p>컨테이너를 export하면 컨테이너를 실행하는데 필요한 파일을 모두 압축된 아카이브로 모을 수 있습니다. 이 tar파일을 풀면 컨테이너의 root파일 시스템을 그대로 추출할 수 있습니다. 반면 save는 이미지의 레이어 구조도 포함된 형태로 tar로 모을 수 있습니다.</p><p>바탕이 되는 이미지는 같아도 export를 사용할 때와 save 명령을 사용할 때는 내부적인 디렉토리와 파일 구조가 다릅니다.<br>따라서 docker container export 명령에는 docker image import 명령을, docker image save명령에는 docker image load를 사용하는 게 좋습니다.</p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/07/03/docker/#disqus_thread</comments>
    </item>
    
    <item>
      <title>클라우드 서비스의 기초. Virtualization, 가상화에 대해서</title>
      <link>http://tkdguq05.github.io/2020/06/07/virtualization/</link>
      <guid>http://tkdguq05.github.io/2020/06/07/virtualization/</guid>
      <pubDate>Sun, 07 Jun 2020 08:18:14 GMT</pubDate>
      <description>
      
        &lt;p&gt;IT infrastructure, 클라우드 서비스의 기초인 가상화에 대해서 알아보자!&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>IT infrastructure, 클라우드 서비스의 기초인 가상화에 대해서 알아보자!</p><a id="more"></a><h1 id="1-가상화에-대해-알기-전에-IT-Infrastructure"><a href="#1-가상화에-대해-알기-전에-IT-Infrastructure" class="headerlink" title="1.가상화에 대해 알기 전에 IT Infrastructure."></a>1.가상화에 대해 알기 전에 IT Infrastructure.</h1><p>가상화에 대해서 알기전에 IT infra는 어떤 종류가 있는지 알아볼 필요가 흔히 세미나를 돌다보면 흔하게 들리는 ‘온프레미스’라던가 ‘클라우드 서비스’라는 개념이 도대체 정확히 뭘 말하는 건지 알아야 실제로 사용하는 AWS가 어떻게 돌아가는지 이해해볼 수 있을 것이다.</p><h2 id="1-1-IT-Infrastructure"><a href="#1-1-IT-Infrastructure" class="headerlink" title="1.1. IT Infrastructure"></a>1.1. IT Infrastructure</h2><p>IT 인프라는 크게 4가지로 나눠볼 수 있을 것이다. 온프레미스, 퍼블릭 클라우드, 프라이빗 클라우드, 하이브리드 클라우드 가 그 종류이다.</p><ol><li>온프레미스(On-premise) : 쉽게 말해서 물리서버를 구축한다는 이야기이다. 회사에서 서버실을 따로 두고 있다면, 온프레미스 방식의 구조를 사용하고 있다는 걸 말한다. 온프레미스 방식은 직접 서버를 놓고 사용하기 때문에 관리가 용이하고 기밀성이 굉장히 높다는 장점을 갖고 있지만 고가의 장비를 사용해야 하고 사용량 예측이 불가하며, 재해 등에 취약하다는 단점이 있다.</li><li>퍼블릭 클라우드(Public Cloud) : 클라우드 제공자가 물리서버(데이터 센터, 인프라 등)를 구축하고 가상화 기술을 이용해 불특정 다수에게 제공하는 시스템을 말한다. AWS, GCP, Azure등이 퍼블릭 클라우드 프로바이더이며, 서비스 이용자들이 퍼블릭 클라우드를 이용하는 것이라고 볼 수 있다. </li><li>프라이빗 클라우드(Private Cloud) : 회사에서 자체적으로 물리서버를 구축하고 가상화하여 클라우드 기술을 사용하는 것을 말한다. 높은 기밀성이 필요한 회사에서 주로 사용한다. 고객 정보에 대한 데이터 등의 기밀성이 높은 데이터를 AWS나 기타 퍼블릭 클라우드에 올릴 수 없을 때 자체적으로 프라이빗 클라우드를 구축하곤 한다.(금융회사 또는 삼성)</li><li>하이브리드 클라우드(Hybrid Cloud) : 온프레미스와 클라우드를 동시에 사용하는 방식이다.</li></ol><p>위에서 소개한 것처럼 클라우드에 대해서 다룰 때 가상화란 개념이 등장한다. 클라우드 서비스 유형에 따라 Iaas, Paas, Saas 등이 나뉘지만 이 글에서는 설명을 생략한다.</p><h1 id="2-가상화"><a href="#2-가상화" class="headerlink" title="2. 가상화"></a>2. 가상화</h1><p>가상화는 간단하게 설명하자면 하나의 물리적인 하드웨어 위에 여러 대의 OS를 올려 운영하는 것이다. 물리적인 CPU/서버를 이용할 때 하나의 운영체제를 이용하여 구동하는 경우에는 CPU 자원을 최대한으로 활용하기가 어려울 것이다. 하지만 하나의 물리적 CPU에서 여러 대의 가상 OS를 운영한다면 CPU 자원을 최대한 활용하는 효과를 가져올 수 있다. 그리고 자원이 많이 남는다면 AWS나 GCP처럼 퍼블릭 클라우드 서비스를 제공하는 것도 가능할 것이다. </p><h2 id="2-1-가상화의-구조-Hypervisor"><a href="#2-1-가상화의-구조-Hypervisor" class="headerlink" title="2.1 가상화의 구조 - Hypervisor"></a>2.1 가상화의 구조 - Hypervisor</h2><p>한 컴퓨터를 가상화해서 여러 개의 가상 머신을 만들었다고 가정해보자.<br><img src="/images/hypervisor.png" alt="세대의 가상머신을 만들어보자"><br>그림에서 보면 가상 머신은 Hypervisor위에서 돌아가고 Hypervisor는 OS 위에 위치하고 있는 것을 알 수 있다. 각 가상 머신은 각각의 OS(Linux, MacOS, WindowsOS…)를 갖고 돌아갈 것이며 Hypervisor 밑에 있는 OS는 물리서버의 OS이다. 이런 구조라면 Hypervisor의 기능은 여러 OS를 관리하는 것이 아닐까? 라고 눈치 빠르게 유추해 볼 수 있을 텐데, 정답이다. OS는 Kernel을 통해서 자원관리나 명령을 해석하고 컨트롤하는데 문제는 OS마다 Kernel의 규칙이 다르다는 점에 있다. 그러니까 가상머신에는 다양한 OS가 돌아가게 되고 이것들을 중재해 주는 것이 Hypervisor이다. Hypervisor 자체도 가상화 커널이기 때문에 Hypervisor는 운영체제를 스케줄 하는 가상화 커널이라고 볼 수 있겠다.</p><h2 id="2-2-가상화-유형"><a href="#2-2-가상화-유형" class="headerlink" title="2.2 가상화 유형"></a>2.2 가상화 유형</h2><p>가상화 유형은 크게 두 가지로 볼 수 있다. Type-1과 Type-2형이다. OS를 사용하는가 안하는가에 따라 나뉜다.<br>출처: <a href="https://en.wikipedia.org/wiki/Hypervisor">Wikipedia - Virtualization</a> </p><p><img src="https://upload.wikimedia.org/wikipedia/commons/e/e1/Hyperviseur.png" alt="Virtualization"></p><ol><li>Type-1(Bare-Metal) : 호스트 OS가 존재 하지 않는다. 베어메탈은 “운영체제가 없는 컴퓨터 하드웨어”를 의미한다. “깡통 컴퓨터”라고 표현하면 적당할 것 같다. 하이퍼바이저가 하드웨어를  제어하고 그 위에 게스트 운영체제(Guest OS)를 올리는 방식이다. 완전히 제어하는 방식을 베어 메탈 하이퍼바이저라고 부른다. </li><li>Type-2 :호스트 OS가 존재한다. 전통적인 OS에 하이퍼바이저를 실행하고, 이 하이퍼바이저 위에서 게스트 운영체제를 실행하는 방식이다. 하이퍼바이저를 실행하는 운영체제를 HOST 운영체제라고 부른다. 기존에 사용하던 운영체제 위에, 애플리케이션을 실행 하듯이 새로운 운영체제를 올릴 수 있다. 기존 운영체제에 익숙한 일반 사용자들이 주로 접하는 하이퍼바이저다. </li></ol><p>가상화는 다시 전가상화 반가상화로 나누어 볼 수 있다. 하드웨어를 완전히 가상화 하고 DOM0를 통해 모든 접근을 처리하는 것이 전가상화이고 완전 가상화 하지 않고 HyperCall이라는 Interface를 통해 접근을 처리하는 것이 반 가상화이다. 전가상화는 DOM0를 통해 모든 처리를 하므로 GuestOS를 수정할 필요가 없지만 Hypervisor가 모든 명령을 중재하므로 성능이 느린 편이다. 반면에 반가상화는 OS커널을 수정해 다른 OS에서 내리는 명령을 Hypercall에서 번역해서 처리하기 때문에 성능이 빠른 편이다. OS커널을 수정해야 하기 때문에 오픈소스 OS만 사용가능하다.</p><h2 id="2-3-Hypervisor-기능"><a href="#2-3-Hypervisor-기능" class="headerlink" title="2,3 Hypervisor 기능"></a>2,3 Hypervisor 기능</h2><p>본격적으로 Hypervisor에서 사용가능한 기능들에 대해서 알아보자. AWS콘솔을 다루다 보면 자주나오는 용어들이 보일 것이다. 대표적으로 Migration, Snapshot, Templet이다.</p><h3 id="그-전에-용어-정리"><a href="#그-전에-용어-정리" class="headerlink" title="그 전에 용어 정리"></a>그 전에 용어 정리</h3><p>기능을 다루기 전에 용어 정리를 하고 넘어가야 이해가 쉬울 것 같다. 가상화의 구조에는 Host, Cluster, Datacenter가 있다. </p><h4 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h4><p>Host는 Storage 에 붙어있는 한 물리서버를 말한다. Host의 기준이 헷갈릴 수 있는데, Storage 기준이 아니라 물리서버라는 점을 명심하자.<br><img src="/images/host.png" alt="Host 머신"> </p><h4 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h4><p>Cluster는 여러대의 Host머신을 한 Storage로 묶어 놓은 것을 말한다. 클러스터는 한 Storage로 묶일 수 있다.<br><img src="/images/cluster.png" alt="Cluster"></p><h4 id="Datacenter"><a href="#Datacenter" class="headerlink" title="Datacenter"></a>Datacenter</h4><p>Datacenter는 여러대의 Cluster를 하나로 묶어 놓은 것을 말한다.<br><img src="/images/datacenter.png" alt="Datacenter"><br>정리하자면 데이터 센터 아래에 여러대의 클러스터가 있고 각 클러스터에는 여러대의 호스트 머신이 띄워져 있으며, 호스트 머신에는 가상머신들이 떠 있다. </p><h4 id="Provisioning"><a href="#Provisioning" class="headerlink" title="Provisioning"></a>Provisioning</h4><p>쉽게 말해서 제공하는 것. 클라우드 서비스 업체에서 어떤 걸 제공받느냐에 따라서 Server Resource Provisioning : CPU, Memory, IO 등과 같은 실제 서버의 자원을 할당해주고 운영할 수 있게 제공해주는 것을 말한다.</p><p>출처 : <a href="https://jins-dev.tistory.com/entry/%ED%94%84%EB%A1%9C%EB%B9%84%EC%A0%80%EB%8B%9DProvisioning-%EC%9D%B4%EB%9E%80">프로비저닝이란</a></p><ul><li>OS Provisioning : OS를 서버에 설치하고 구성작업을 해서 사용할 수 있도록 제공하는 것을 말한다.</li><li>Software Provisioning : WAS, DBMS 등의 소프트웨어를 설치하고 세팅하여 실행할 수 있도록 제공하는 것을 말한다.</li><li>Account Provisioning : 접근 권한을 가진 계정을 제공해주는 것을 말한다. 클라우드 인프라 쪽에서는 해당 업무를 담당하던 관리자가 변경된 경우 권한의 인계를 Account Provisioning 을 통해 하는 경우가 많다.</li><li>Storage Provisioning : 데이터를 저장하고 관리할 수 있는 Storage 를 제공할 수 있다. 특히 클라우드에서는 제공하는 Storage 의 종류와 용도에 따라 다양한 방식의 제공이 이루어진다.</li></ul><h3 id="2-3-1-Migration"><a href="#2-3-1-Migration" class="headerlink" title="2.3.1 Migration"></a>2.3.1 Migration</h3><p>Migration은 한 클러스터 내에서 어떤 호스트에 붙어있는 가상머신을 다른 호스트로 옮기는 것을 말한다. Storage가 같기 때문에 가상머신을 다른 호스트로 옮기는 것이 가능하고 데이터도 그대로 사용가능하다.<br><img src="/images/migration1.png" alt="migration"></p><h3 id="2-3-2-Storage-Migration"><a href="#2-3-2-Storage-Migration" class="headerlink" title="2.3.2 Storage Migration"></a>2.3.2 Storage Migration</h3><p>Storage Migration이란 Storage를 갈아타는 Migration이라고 생각하면 된다. 한 클러스터에 있는 가상머신을 다른 클러스터로 옮기는 것이다.<br><img src="/images/migration2.png" alt="Storage migration"></p><blockquote><p><code>중요한 점</code>: 구조를 살펴보면 Storage가 가장 핵심인 것을 알 수 있다. Storage위의 가상머신 등은 얼마든지 죽어도 다시 살릴 수도 있고 다른 호스트로 옮길 수도 있지만 Storage는 죽으면 참…답이 없다. 이에 대해서 여러가지 처리를 해놓았지만 이 글에서는 다루지 않겠다.</p></blockquote><h3 id="2-3-2-Snapshot"><a href="#2-3-2-Snapshot" class="headerlink" title="2.3.2 Snapshot"></a>2.3.2 Snapshot</h3><p>스냅샷은 특정 시간대의 가상머신 데이터와 설정 정보를 백업하는 기술이다. Snapshot으로 저장된 백업 데이터를 이용하면 VM에 장애가 발생하더라도 빠르게 복구 가능하다.</p><h3 id="2-3-3-Templet"><a href="#2-3-3-Templet" class="headerlink" title="2.3.3 Templet"></a>2.3.3 Templet</h3><p>서버 템플릿이란 서버 다수를 사용하는데 사용할 수 있도록 공통 요소들을 프로비저닝해 둔 서버 이미지를 말한다.</p><hr><p>기능들에서 살펴보니 AWS에서 사용되는 여러가지 용어들이 익숙하게 보이는 것을 확인할 수 있다. 이런 지식들을 가지고 AWS나 기타 클라우드에서 활용할 수 있고 후에 Docker나 Kubernetes 등에도 활용할 수 있을 것이다.  </p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/06/07/virtualization/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Google Cloud Platform - Task</title>
      <link>http://tkdguq05.github.io/2020/05/19/google-task/</link>
      <guid>http://tkdguq05.github.io/2020/05/19/google-task/</guid>
      <pubDate>Tue, 19 May 2020 00:13:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;Google Task를 통해 비동기처리에 대한 Toy Project를 진행해보자.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Google Task를 통해 비동기처리에 대한 Toy Project를 진행해보자.</p><a id="more"></a><h1 id="1-Google-Cloud-Task"><a href="#1-Google-Cloud-Task" class="headerlink" title="1. Google Cloud Task"></a>1. Google Cloud Task</h1><p>먼저 Google Cloud Task가 무엇인지 살펴보자. Google Cloud Tasks는 대규모 분산형 태스크의 실행, 디스패치, 전송을 관리할 수 있는 완전 관리형 서비스이다. Cloud Tasks를 사용하게 되면 사용자 또는 서비스 간 요청 이외의 작업을 <strong>비동기적으로</strong> 수행할 수 있게 된다. 여기서 비동기적으로 작업을 수행한다는 말이 있다. 비동기적으로 작업을 수행한다는 것은 어떤 의미이고 어떤 상황에서 사용해야 할까?</p><h1 id="2-비동기-처리"><a href="#2-비동기-처리" class="headerlink" title="2. 비동기 처리"></a>2. 비동기 처리</h1><p>먼저 동기식 처리가 뭔지 알아보자. 동기식 처리 모델(Synchronous processing model)은 직렬적으로 태스크(task)를 수행한다는 의미이다. 즉, 태스크는 순차적으로 실행되며 어떤 작업이 수행 중이면 다음 작업은 대기하게 된다. 반면, 비동기식 처리는 (Asynchronous processing model 또는 Non-Blocking processing model)은 병렬적으로 태스크를 수행한다. 즉, 태스크가 종료되지 않은 상태라 하더라도 대기하지 않고 다음 태스크를 실행한다. 예를 들어 서버에서 데이터를 가져와서 화면에 표시하는 태스크를 수행할 때, 서버에 데이터를 요청한 이후 서버로부터 데이터가 응답될 때까지 대기하지 않고(Non-Blocking) 즉시 다음 태스크를 수행한다. 이후 서버로부터 데이터가 응답되면 이벤트가 발생하고 이벤트 핸들러가 데이터를 가지고 수행할 태스크를 계속해 수행한다. (출처 : <a href="https://poiemaweb.com/js-async">https://poiemaweb.com/js-async</a>)  </p><p>다른 상황을 가정해보자. 어떤 API가 두 개 있다. 여기서 정보를 가져올 건데, get_user_list라는 API에서는 이름만을 가져올 수 있는 API이고, get_user_record에는 특정 유저의 구체적인 정보가 담겨 있다. get_user_record는 제한 조건이 있어 한번에 많은 데이터를 가져올 수 없다. 예를 들어 get_user_list에서 모든 user list를 받는다고 하더라도 bulk로 get_user_record에 쿼리를 보내 데이터를 갖고 오는 것은 불가능하다는 것이다. 이런 조건에서 빠르게 데이터를 확보하려면 어떻게 해야할까? for loop을 돌려 user name 하나씩 정보를 얻어 온다면 많은 시간이 걸릴 것이다. </p><p>비동기 처리를 활용해 보자. 워커를 여러 대 만들고 워커에 수행할 작업(get_user_record에서 name별 정보를 갖고 오는 일)을 넣어주면 훨씬 빠르게 데이터를 모을 수 있을 것이다. 그렇다면 파이프 라인은 다음과 같다.</p><ol><li>get_user_record에 쿼리를 날리고 실시간성 DB에 데이터를 담아두기</li><li>실시간성 DB에 있는 데이터를 배치성 DB에 넣기<br>여기서 1번 작업은 Google Cloud Function에 작업 내용을 넣어주고 Google Cloud Task를 이용해서 비동기 작업을 통해 빠르게 수행하도록 할 것이다. </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https://us-central1-contxtsio<span class="number">-267105.</span>cloudfunctions.net/get_user_list</span><br><span class="line">param: &#123;&#125;</span><br><span class="line"></span><br><span class="line">https://us-central1-contxtsio<span class="number">-267105.</span>cloudfunctions.net/get_user_by_name</span><br><span class="line">param: &#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"Braund, Mr. Owen Harris"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음과 같이 API가 있다. 첫 번째 API는 user의 list를 받아올 수 있는 API이고, 두 번째는 user의 name별로 정보를 가져올 수 있는 API이다. 먼저 Local에서 정보를 제대로 받아오는지 테스트를 해보자.</p><h1 id="Toy-Project"><a href="#Toy-Project" class="headerlink" title="Toy Project"></a>Toy Project</h1><h2 id="Toy1-get-user-list-get-user-by-name-확인"><a href="#Toy1-get-user-list-get-user-by-name-확인" class="headerlink" title="Toy1. get_user_list, get_user_by_name 확인"></a>Toy1. get_user_list, get_user_by_name 확인</h2><p>API에서 정보를 받기 위해서 자주 사용하는 라이브러리인 requests를 이용한다. <a href="https://www.geeksforgeeks.org/get-post-requests-using-python/">requests 쉽게 사용하기</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://us-central1-contxtsio-267105.cloudfunctions.net/get_user_list'</span></span><br><span class="line">response = requests.post(url)</span><br><span class="line">user_list = response.json()</span><br><span class="line">user_list = user_list[<span class="string">'data'</span>]</span><br></pre></td></tr></table></figure><p>user_list는 아주 잘 나온다. 이제 get_user_by_name을 확인해보자</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url2 = <span class="string">'https://us-central1-contxtsio-267105.cloudfunctions.net/get_user_by_name'</span></span><br><span class="line">params = &#123;<span class="string">'name'</span> : user_list[<span class="number">0</span>]&#125;</span><br><span class="line">response = requests.post(url2, json=params)</span><br><span class="line">response.json()</span><br></pre></td></tr></table></figure><p>post로 parameter를 보내면 역시 값이 잘 나온다. </p><h2 id="Toy2-mongoDB-설정"><a href="#Toy2-mongoDB-설정" class="headerlink" title="Toy2. mongoDB 설정"></a>Toy2. mongoDB 설정</h2><p>작업을 수행하고 나온 데이터를 임시로 넣을 DB는 mongoDB로 해볼 것이다. 무료로 사용할 수 있는 mongoDB가 있는데 <a href="https://mlab.com/">https://mlab.com/</a> 여기를 이용하면 된다. 아니면 mongoDB Atlas를 사용해도 된다. mongoDB 구축하는 건 간단하니 Pass한다.</p><h2 id="Toy3-gcloud-설정"><a href="#Toy3-gcloud-설정" class="headerlink" title="Toy3. gcloud 설정"></a>Toy3. gcloud 설정</h2><p>google cloud의 다양한 서비스를 이용하려면 gcloud를 설정해야 한다. google cloud Task를 사용하기 위한 퀵 가이드 문서는 잘 되어 있는 편이다. <a href="https://cloud.google.com/tasks/docs/quickstart-appengine">Cloud Task Quick Guide</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gcloud</span><br></pre></td></tr></table></figure><p>gcloud를 먼저 설치하고 따라하면 된다. SDK를 만들고 난 후에 Cloud Tasks API, API 라이브러리 페이지에 갔을 때 사용가능 하다는 초록 표시가 나오면 퀵 가이드 문서의 샘플 설정 및 하단의 내용을 수행하면 된다.<br><img src="/images/available.png" alt="사용 가능!"></p><p>퀵 가이드 문서 내용을 다 따라하고 task페이지로 오게 되면 my-queue가 생성된 것을 확인할 수 있다. 이렇게 되면 성공이다.<br><img src="/images/my_queue.png" alt="task 작업 준비 완료"></p><h2 id="Toy4-Functions-설정"><a href="#Toy4-Functions-설정" class="headerlink" title="Toy4. Functions 설정"></a>Toy4. Functions 설정</h2><p>Cloud Functions로 이동해보자. Cloud Functions는 AWS Lambda와 비슷하다(서버리스 아키텍쳐) .<br>Functions를 세팅할 때 주의할 점이 있다. 위치나 메모리는 아무렇게나 설정해도 되지만 인증 부분을 꼭 체크하고 코드를 작성할 런타임을 python 3.7로 바꿔주도록 한다.<br><img src="/images/unauth.png" alt="인증되지 않은 호출 허용 체크"></p><p>조금 기다리면 funtion이 만들어진다. funtion에 들어가서 수정 버튼을 누르면 작업을 수행할 소스코드가 등장한다. main.py에 작업할 코드를 넣어주고 requirements.txt에 필요한 라이브러리들을 작성해 import할 수 있도록 한다.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#requirements.txt</span></span><br><span class="line">pymongo</span><br><span class="line">requests</span><br><span class="line">dnspython</span><br></pre></td></tr></table></figure><p>requirements에는 mongoDB 연결과 저장을 위한 pymongo, API를 위한 requests 그리고 기타 dnspython을 넣어준다. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#MAIN.py</span></span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">mongo_uri = <span class="string">"mongodb://****:****@ds263018.mlab.com:63018/****?retryWrites=false"</span></span><br><span class="line">client = pymongo.MongoClient(mongo_uri)</span><br><span class="line"></span><br><span class="line">db = client.****</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""Responds to any HTTP request.</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        request (flask.Request): HTTP request object.</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        The response text or any set of values that can be turned into a</span></span><br><span class="line"><span class="string">        Response object using</span></span><br><span class="line"><span class="string">        `make_response &lt;http://flask.pocoo.org/docs/1.0/api/#flask.Flask.make_response&gt;`.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    payload = request.get_data(as_text=<span class="keyword">True</span>)</span><br><span class="line">    request_json = ast.literal_eval(payload)</span><br><span class="line"></span><br><span class="line">    r = requests.post(url = <span class="string">"https://us-central1-contxtsio-267105.cloudfunctions.net/get_user_by_name"</span>, json=request_json) </span><br><span class="line"></span><br><span class="line">    db.temp.insert_one(r.json())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Success"</span></span><br></pre></td></tr></table></figure><p>main 소스에는 local에서 테스트한 내용을 넣어준다. mongo_url에서 retryWrite=false는 mongoDB에서 <code>MongoError: This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.</code>이런 에러가 나온다면 사용해보자. </p><p>소스를 넣은 후에 잘 세팅 되었는지를 확인해보기 위해 테스트를 이용해 볼 수 있다. 테스트를 누르면 트리거 이벤트라고 나오고 <code>{}</code>이렇게 나와 있다. 여기에 테스트 할 파라미터 값을 넣어보면 된다. 우리의 파라미터는 name이므로 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"name"</span>: <span class="string">"Braund, Mr. Owen Harris"</span>&#125;</span><br></pre></td></tr></table></figure><p>이렇게 파라미터를 적어주고 테스트한다. success가 나오면 성공이다. </p><h2 id="Toy5-Task"><a href="#Toy5-Task" class="headerlink" title="Toy5. Task"></a>Toy5. Task</h2><p>이제 로컬로 돌아와서 task와 function을 붙여볼 차례다. 먼저 코드부터 소개한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> storage</span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> tasks_v2</span><br><span class="line">task_client = tasks_v2.CloudTasksClient() <span class="comment"># Credential</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch_task</span><span class="params">(name)</span>:</span></span><br><span class="line"> <span class="comment">#json 같은 string</span></span><br><span class="line">    payload = str(&#123;</span><br><span class="line">        <span class="string">"name"</span>: name,</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    resp = create_task(project=<span class="string">'affable-**********'</span>, queue=<span class="string">'my-queue'</span>, location=<span class="string">'asia-northeast3'</span>, payload=payload)</span><br></pre></td></tr></table></figure><p>dispatch_task를 통해서 수행할 작업을 어떤 프로젝트에 연결하고 어떤 큐에 보낼 것인지 선택할 수 있다. 이렇게 프로젝트와 Task에 연결하고 난 뒤에 create_task를 수행하게 된다. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_task</span><span class="params">(project, queue, location, payload=None, in_seconds=None)</span>:</span></span><br><span class="line">    parent = task_client.queue_path(project, location, queue)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Construct the request body.</span></span><br><span class="line">    task = &#123;</span><br><span class="line">            <span class="string">'http_request'</span>: &#123;  <span class="comment"># Specify the type of request.</span></span><br><span class="line">                <span class="string">'http_method'</span>: <span class="string">'POST'</span>,</span><br><span class="line">                <span class="string">'url'</span>: <span class="string">'https://us-central1-affable-audio-277311.cloudfunctions.net/function-2'</span> <span class="comment">#function url</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> payload <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="comment"># The API expects a payload of type bytes.</span></span><br><span class="line">        converted_payload = payload.encode() <span class="comment">#여기서 인코딩</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add the payload to the request.</span></span><br><span class="line">        task[<span class="string">'http_request'</span>][<span class="string">'body'</span>] = converted_payload</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> in_seconds <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="comment"># Convert "seconds from now" into an rfc3339 datetime string.</span></span><br><span class="line">        d = datetime.datetime.utcnow() + datetime.timedelta(seconds=in_seconds)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Create Timestamp protobuf.</span></span><br><span class="line">        timestamp = timestamp_pb2.Timestamp()</span><br><span class="line">        timestamp.FromDatetime(d)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add the timestamp to the tasks.</span></span><br><span class="line">        task[<span class="string">'schedule_time'</span>] = timestamp</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use the client to build and send the task.</span></span><br><span class="line">    response = task_client.create_task(parent, task)</span><br><span class="line">    print(response)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>create_task에서 본격적으로 funtions와 연결이 되어 작업들이 돌아가게 된다. task에 보면 url 파라미터가 보인다. 이 url이 작업을 수행할 funtions의 위치를 나타내는 것으로, functions의 트리거 부분에 있는 url을 넣어주면 된다.   </p><p>이렇게 넣어주고 나면 payload를 받아서 인코딩을 해주고 task에서 request를 날려주게 된다. </p><p>함수를 다 지정하고 나서 user_list있는 name들을  dispatch_task에 넣어주게 되면 task가 돌아간다!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dispatch_task('Braund, Mr. Owen Harris') #하나짜리로 먼저 테스트</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> user_list:</span><br><span class="line">    dispatch_task(user)</span><br></pre></td></tr></table></figure><hr><h1 id="Trouble-Shooting"><a href="#Trouble-Shooting" class="headerlink" title="Trouble Shooting"></a>Trouble Shooting</h1><h2 id="Trouble-Credential"><a href="#Trouble-Credential" class="headerlink" title="Trouble, Credential"></a>Trouble, Credential</h2><p>바로 성공이 되는 경우가 있는 반면, 에러가 터져나와 제대로 돌아가지 않는 경우가 발생하곤 한다. 보통은 credential 문제가 대부분이다. dispatch_task의 윗부분에 #credential이라고 작성한 부분에서 보통 에러가 나는데</p><blockquote><p>DefaultCredentialsError: Could not automatically determine credentials. Please set GOOGLE_APPLICATION_CREDENTIALS or explicitly create credentials and re-run the application. For more information, please see <a href="https://cloud.google.com/docs/authentication/getting-started">https://cloud.google.com/docs/authentication/getting-started</a></p></blockquote><p>이러한 에러가 발생한다면 Credential관련한 에러이며, 이런 에러가 나오지 않고 아래 for loop을 돌 때,</p><blockquote><p>AttributeError: ‘str’ object has no attribute ‘create_task’</p></blockquote><p>이런 에러가 나와도 task_client에서 credential이 제대로 되지 않았다는 뜻이다. </p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution.1"></a>Solution.1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">task_client = tasks_v2.CloudTasksClient(&lt;json&gt;)</span><br></pre></td></tr></table></figure><p>다음과 같이 task_client에 cloud 프로젝트에 있는 json key를 받아서 절대경로를 <json>에 넣어준다.<br>json key는 다음과 같이 얻을 수 있다. 내 프로젝트로 들어가서 작업을 누르고 키를 받는다.<br><img src="/images/cloud_json_key.png" alt="json 키"></p><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution.2"></a>Solution.2</h2><p>이렇게 해결이 되는 경우도 있지만 사용하는 컴퓨터의 종류나 gcloud설정에 따라 제대로 되지 않을 수 있다. 두 번째 방법은 구글 문서에 있는 방법이다. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">explicit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Explicitly use service account credentials by specifying the private key</span></span><br><span class="line">    <span class="comment"># file.</span></span><br><span class="line">    storage_client = storage.Client.from_service_account_json(</span><br><span class="line">    &lt;json&gt;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Make an authenticated API request</span></span><br><span class="line">    buckets = list(storage_client.list_buckets())</span><br><span class="line">    print(buckets)</span><br></pre></td></tr></table></figure><p>이 역시 아까 받은 json 키를 사용하는 방법이다. 이렇게 함수를 만든 뒤 explicit함수를 실행시키다.  그리고 다시 for loop을 돌려보자.</p><h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution.3"></a>Solution.3</h2><p>마지막 방법이다. os 라이브러리를 이용해 google credential에 사용하는 json 키 값을 직접 지정해 주는 방식이다. 본인 생각으로는 가장 확실한 방법이라고 생각한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">'GOOGLE_APPLICATION_CREDENTIALS'</span>] = <span class="string">'&lt;json&gt;'</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/05/19/google-task/#disqus_thread</comments>
    </item>
    
    <item>
      <title>pyspark trouble shooting, schema</title>
      <link>http://tkdguq05.github.io/2020/05/10/trouble-shooting_pyspark/</link>
      <guid>http://tkdguq05.github.io/2020/05/10/trouble-shooting_pyspark/</guid>
      <pubDate>Sun, 10 May 2020 08:32:26 GMT</pubDate>
      <description>
      
        &lt;p&gt;pyspark로 작업 하던 중 파일이 읽히지 않는다면?????&lt;br&gt;cannot cast DOCUMENT into a ArrayType&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>pyspark로 작업 하던 중 파일이 읽히지 않는다면?????<br>cannot cast DOCUMENT into a ArrayType</p><a id="more"></a><h1 id="Pyspark-Trouble-Shooting"><a href="#Pyspark-Trouble-Shooting" class="headerlink" title="Pyspark Trouble Shooting"></a>Pyspark Trouble Shooting</h1><p>간만에 pyspark로 작업할 일이 생겼다. 거의 한 달 만에 쓰는 거라 조금 어색했다. purchase관련 데이터와 view데이터를 갖고 작업을 해야 했었다. Purchase 데이터로 분석을 끝내고, view 데이터를 열어봤다. 파일이 커서 돌려놓고 dataframe을 만든 후 show()를 통해서 잘 불러왔는지 확인하려고 했었다. </p><p><img src="/images/pyspark/pyspark_error.png" alt="에러..."></p><blockquote><p>cannot cast DOCUMENT into a ArrayType</p></blockquote><p>자주 보지만 정이 안드는 친구가 등장했다. 도대체 이해가 되지 않았다. purchase데이터를 읽어올 때와 똑같은 방식으로 schema를 지정해줬고 변수명도 다 바꿔서 문제가 없을 줄 알았는데 에러가 발생한 것이다. DOCUMENT를 ArrayType으로 바꿀 수 없다는 내용인데… 왜 아까는 됐고 지금은 안되는지 참… 답답했다.</p><p>에러메세지를 복붙해서 구글을 뒤져봤지만, 문제를 해결할 만한 소스는 없었다. 결국 혼자 답을 찾아보기로 했다. </p><h2 id="데이터의-구조"><a href="#데이터의-구조" class="headerlink" title="데이터의 구조"></a>데이터의 구조</h2><p>그 전에 사전지식으로 알아야 할 점은, 데이터가 어떻게 구성되어 있느냐이다. 글을 읽는 사람들의 이해를 돕기위해 간단하게 설명을 해보자면, purchase데이터에는 사용자의 구매내역이 들어있고 이는 purchase라는 칼럼에 잘 담겨있다. 구매내역이란 구매한 상품 내용, 상품의 갯수, 상품의 가격, 상품의 이미지 등등이 들어있다. 이 데이터는 한 칼럼에 담겨있으므로 묶어줄 수 있는 자료구조가 필요하다. 여기서 사용되는 자료구조는 list이며, 리스트 안에는 dictionary형태로 담겨 있다.  </p><blockquote><p> [{‘purchaseGoods’ : ‘값싸고질좋은 상품’}, …]<br>예를 들면 이런식으로 담겨 있는 것이다. pyspark로 데이터를 불러올 때는 schema를 지정해서 가져온다. list로 묶여있는 경우에는 ArrayType(list가 pyspark에서는 ArrayType으로 나타난다)으로 지정하고 이걸 purchase 데이터에 적용했을 때에는 너무나 잘 불러와졌었다. printSchema를 쳐봐도 잘 나왔다.  </p></blockquote><h2 id="데이터의-차이점"><a href="#데이터의-차이점" class="headerlink" title="데이터의 차이점"></a>데이터의 차이점</h2><p>view데이터를 불러오는 코드를 다시 들여보고 printSchema를 하니 역시 잘나왔다. spark의 신기한 점 중에 하나인데, spark는 직접 작업을 수행하는, collect나 show 등을 수행하기 전까지는 작업 스케쥴링만 해놓고 실제로는 돌지 않는다. 그렇게 지나가려는 순간 이상한 점을 발견했다.</p><p><img src="/images/pyspark/goods_dict.png" alt="purchase의 schema"></p><p><img src="/images/pyspark/purchase_list.png" alt="view의 schema"></p><p>둘의 구조를 비교해보자. 뭔가 다른 점이 보인다. 위의 goods에서는 그냥 dictionary로 묶여있고, 밑에 있는 purchase에는 list로 묶여있다. 이 차이점 때문에 동일한 schema를 사용하게 되면 에러가 발생하게 되는 것이다. </p><p>list는 ArrayType으로 지정하면 된다면, dictionary는 무엇일까?<br>dictionary는 StructType으로 지정하면 된다. 스키마를 제대로 지정하고 나면 제대로 데이터가 나오게 된다.</p><h4 id="purchase-Schema"><a href="#purchase-Schema" class="headerlink" title="purchase Schema"></a>purchase Schema</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">purchaseSchema =  StructType([</span><br><span class="line">    StructField(<span class="string">"purchaseGoodsName"</span>, StringType(),<span class="keyword">True</span>),</span><br><span class="line">    StructField(<span class="string">"purchaseGoodsCode"</span>, StringType(),<span class="keyword">True</span>),</span><br><span class="line">    StructField(<span class="string">"purchaseGoodsAmount"</span>, IntegerType(),<span class="keyword">True</span>),</span><br><span class="line">    StructField(<span class="string">"purchaseGoodsCount"</span>, IntegerType(),<span class="keyword">True</span>)</span><br><span class="line">  ])</span><br><span class="line"></span><br><span class="line">userschema = StructType([</span><br><span class="line">    StructField(<span class="string">"cookieId"</span>, StringType(),<span class="keyword">True</span>),</span><br><span class="line">    StructField(<span class="string">"currentTime"</span>, StringType(),<span class="keyword">True</span>),</span><br><span class="line">    StructField(<span class="string">"sessionSeq"</span>, StringType(),<span class="keyword">True</span>),</span><br><span class="line">    StructField(<span class="string">"userSeq"</span>, StringType(),<span class="keyword">True</span>),</span><br><span class="line">    StructField(<span class="string">"purchase"</span>, ArrayType(purchaseSchema),<span class="keyword">True</span>),</span><br><span class="line">    StructField(<span class="string">"actionType"</span>, StringType(),<span class="keyword">True</span>)</span><br><span class="line">  ])</span><br></pre></td></tr></table></figure><h4 id="view-Schema"><a href="#view-Schema" class="headerlink" title="view Schema"></a>view Schema</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">viewSchema =  StructType([</span><br><span class="line">    StructField(<span class="string">"goodsName"</span>, StringType(),<span class="keyword">True</span>),</span><br><span class="line">    StructField(<span class="string">"goodsCode"</span>, StringType(),<span class="keyword">True</span>),</span><br><span class="line">    StructField(<span class="string">"goodsAmount"</span>, IntegerType(),<span class="keyword">True</span>),</span><br><span class="line">    StructField(<span class="string">"goodsCount"</span>, IntegerType(),<span class="keyword">True</span>)</span><br><span class="line">  ])</span><br><span class="line"></span><br><span class="line">userschema = StructType([</span><br><span class="line">    StructField(<span class="string">"cookieId"</span>, StringType(),<span class="keyword">True</span>),</span><br><span class="line">    StructField(<span class="string">"currentTime"</span>, StringType(),<span class="keyword">True</span>),</span><br><span class="line">    StructField(<span class="string">"sessionSeq"</span>, StringType(),<span class="keyword">True</span>),</span><br><span class="line">    StructField(<span class="string">"userSeq"</span>, StringType(),<span class="keyword">True</span>),</span><br><span class="line">    StructField(<span class="string">"view"</span>, StructType(viewSchema),<span class="keyword">True</span>),</span><br><span class="line">    StructField(<span class="string">"actionType"</span>, StringType(),<span class="keyword">True</span>)</span><br><span class="line">  ])</span><br></pre></td></tr></table></figure><p>추가로 이런 타입들을 지정할 때는 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> StructType, ArrayType</span><br></pre></td></tr></table></figure><p>이런식으로 불러와야 한다. import가 되지 않았다면, 에러가 발생한다.</p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/05/10/trouble-shooting_pyspark/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Studio3T trouble shooting</title>
      <link>http://tkdguq05.github.io/2020/05/10/trouble-shooting_studio3t/</link>
      <guid>http://tkdguq05.github.io/2020/05/10/trouble-shooting_studio3t/</guid>
      <pubDate>Sun, 10 May 2020 08:05:18 GMT</pubDate>
      <description>
      
        &lt;p&gt;Studio3T에서 bson file을 import하려고 했다. 근데 왜 안될까??&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Studio3T에서 bson file을 import하려고 했다. 근데 왜 안될까??</p><a id="more"></a><h1 id="Studio3T에-bson-파일-import하기"><a href="#Studio3T에-bson-파일-import하기" class="headerlink" title="Studio3T에 bson 파일 import하기"></a>Studio3T에 bson 파일 import하기</h1><p>Pyspark를 쓰던 중, MongoDB에서 데이터를 끌어다 써야 하는 일이 있어서 bson 파일을 Studio3T에 import 하기로 했다.<br>그냥 끌어다가 놓으면 될 줄 알았는데, 그런 건 되지 않았다. </p><p>먼저 콜렉션을 선택하고 import 버튼이 보여서 눌러봤다.<br><img src="/images/studio3t/studio3t_import.png" alt="import누르면 나오는 화면"></p><p>내가 import 하려는 파일은 bson이고 파일 하나만 있으니까 mongodump archive를 눌렀다.<br>그럼 여러 옵션들이 나오는데 무시하고 경로만 설정해서 Execute시켜줬다.</p><p>하지만 진행이 되지 않았고</p><blockquote><p>Import mongodump folder groobee_<strong><strong><em>for_feature_engineering: error creating collection<br>groobee</em></strong></strong><em>for_feature_engineering: error running create command: The field ‘background’ is not valid for an _id<br>index specification. Specification: { v: 2, name: “_id</em>“, ns: “groobee_****_for_feature_engineering”, background: true,<br>key: { _id: 1 } }</p></blockquote><p>위와 같은 에러가 등장하게 되었다. 대충 내용을 보아하니 ‘background’라는 필드가 유효하지 않다는 내용이었고 json형식처럼 보이는 게 확인 되었다. 열심히 구글링을 해보았지만, 관련된 내용은 거의 없었고 좌절하고 있던 찰나에 bson파일을 받을 때 같이 등장하는 metadata.json 파일이 생각났다.</p><h2 id="metadata-json"><a href="#metadata-json" class="headerlink" title="metadata.json"></a>metadata.json</h2><p>바로 확인해 보니</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"options"</span>:&#123;&#125;,<span class="attr">"indexes"</span>:[&#123;<span class="attr">"v"</span>:<span class="number">1</span>,<span class="attr">"key"</span>:&#123;<span class="attr">"_id"</span>:<span class="number">1</span>&#125;,</span><br><span class="line"><span class="attr">"name"</span>:<span class="string">"_id_"</span>,<span class="attr">"ns"</span>:<span class="string">"groobee_****.userDataInfo.****"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">"v"</span>:<span class="number">1</span>,<span class="attr">"key"</span>:&#123;<span class="attr">"cookieId"</span>:<span class="number">1</span>,<span class="attr">"sessionSeq"</span>:<span class="number">1</span>&#125;,</span><br><span class="line"><span class="attr">"name"</span>:<span class="string">"cookieId_1_sessionSeq_1"</span>,<span class="attr">"ns"</span>:<span class="string">"groobee_****.userDataInfo.****"</span>,</span><br><span class="line"><span class="attr">"background"</span>:<span class="literal">true</span>&#125;,&#123;<span class="attr">"v"</span>:<span class="number">1</span>,<span class="attr">"key"</span>: .....</span><br></pre></td></tr></table></figure><p>아까 에러에서 본 내용들이 여기에 있었다. 에러가 왜 났는지 보아하니, DB안에 중복된 파일명이 있을까봐 bson파일명을 바꿨는데, metadata 안에는 이전의 파일명과 DB, collection명이 적혀있어서 Studio3T가 제대로 인식을 못한 것이었다.</p><p>metadata에서 DB와 Collection을 일일이 수정해준 후, 다시 한번 시도 해봤다.</p><h2 id="mongodump-folder"><a href="#mongodump-folder" class="headerlink" title="mongodump folder"></a>mongodump folder</h2><p><img src="/images/studio3t/mongodump_folder.png" alt="mongodump folder로 시도"><br>이번에는 아까와는 다르게 mongodump folder로 해봤다. 왜냐면 옆에 계시는 매니져님이 folder로 할때 더 잘되더라는 얘기를 들었기 때문이다. </p><p>이 방식은 아까와는 조금 다른데, 아무이름의 폴더를 하나 만들어 주고, 그 안에 DB에 있는, 내가 import하려는 대상collection명으로 폴더를 만들어야 한다. 폴더를 만들고 경로를 지정해 주자.</p><p><img src="/images/studio3t/dump_location.png" alt="경로 지정하고 옵션은 건들지 않았다"></p><h3 id="Execute"><a href="#Execute" class="headerlink" title="Execute"></a>Execute</h3><p>지정을 해주고 Execute를 시켜주면! 진행이 되기 시작한다.<br>그렇게 시간이 지나서 100%가 될 때까지 기다리다 보면, Restoring은 100%로 끝났는데 완료가 되지 않는 걸 볼 수 있다.<br>‘아 뭐야 다시해야 되나’ 하고 중지를 누른다면 소중한 시간을 날리게 된다. 이 bson데이터의 경우 780만 row로 꽤 큰 데이터였는데, 30분 정도 넣고 이상해서 중지하고 다시 시작하고… 이런 작업을 3번정도 반복했다.  </p><p>소중한 시간을 낭비하지 말고 기다리자. Restoring이 끝났다면, Restoring index작업이 남아있다. index를 restore하는 작업은 생각보다 오래걸린다. 인내심을 갖고 화장실을 다녀오든, 커피를 한잔하든 여유롭게 기다리다 보면.</p><p>초록색 동그라미와 함께 <code>done</code>이라는 메세지를 볼 수 있을 것이다.</p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/05/10/trouble-shooting_studio3t/#disqus_thread</comments>
    </item>
    
    <item>
      <title>What is Transformer?</title>
      <link>http://tkdguq05.github.io/2020/04/12/transformer/</link>
      <guid>http://tkdguq05.github.io/2020/04/12/transformer/</guid>
      <pubDate>Sun, 12 Apr 2020 07:16:01 GMT</pubDate>
      <description>
      
        &lt;p&gt;보는 논문 마다 Transformer와 Attention가 빠지지 않고 등장하곤 합니다.&lt;br&gt;이에 대해서 공부하고 정리해 봤습니다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>보는 논문 마다 Transformer와 Attention가 빠지지 않고 등장하곤 합니다.<br>이에 대해서 공부하고 정리해 봤습니다.</p><a id="more"></a><h1 id="Transfomer"><a href="#Transfomer" class="headerlink" title="Transfomer"></a>Transfomer</h1><p>글 미리보기 : </p><ul><li>Transformer는 번역에서 RNN 셀을 이용하지 않고 순차적 계산도 하지 않는다.</li><li>이를 통해 속도를 크게 향상 시켰다</li><li>성능도 크게 오르게 되었다. </li><li>RNN을 사용 안하는데 단어의 위치와 순서 정보도 활용할 수 있다.</li><li>인코더 디코더 방식을 활용한다</li></ul><h2 id="Attention은-뭐지"><a href="#Attention은-뭐지" class="headerlink" title="Attention은 뭐지?"></a>Attention은 뭐지?</h2><h3 id="번역을-하는-상황을-가정해보자"><a href="#번역을-하는-상황을-가정해보자" class="headerlink" title="번역을 하는 상황을 가정해보자"></a>번역을 하는 상황을 가정해보자</h3><p><a href="https://arxiv.org/abs/1706.03762">논문참고* Attention is All you Need</a>   </p><p>RNN을 통해 번역을 하는 상황을 가정해 보자. 한 단어를 다른 언어로 번역하는 일을 하기 위해서는 word embedding작업이 필요하다. 일단 임베딩에 관한 설명은 간단하게만 하고 넘어가자면, 텍스트를 수치화 하는 개념이다. 워드 임베딩이 끝난 후에 단어는 정해놓은 차원의 공간으로 임베딩 된다.</p><p>RNN은 인풋 벡터와 히든 state의 벡터를 받아 아웃풋 벡터를 뱉어 낸다. 신경망 번역기의 구성은(Seq 2 Seq) Encoder와 Deoder로 이루어져 있다. 인풋이 인코더로 들어오면 이를 기반으로 hidden state를 만들어내고 업데이트를 하게 된다. 업데이트 된 hidden state는 차례로 인코더에 input값과 들어가 최종 hidden state를 만들어내고, 이것이 디코더로 들어가서 인풋에 대한 번역된 아웃풋을 출력하게 된다.  이 과정에서 업데이트 된 마지막 hidden state는 디코더에게 전달되는 context라고 할 수 있다. decoder 역시  hidden state를 갖고 있고 time step이 지나가면서 하나씩 이 hidden state를 다음으로 넘기는 과정이다.<br><img src="https://jalammar.github.io/images/context.png" alt="hidden state"></p><h3 id="Attention"><a href="#Attention" class="headerlink" title="Attention!"></a>Attention!</h3><p>je suis etudiant라는 문장을 i am a student로 바꿀 때, je와 i라는 단어를 연결시켜 해석 하는게 더 정확한 결과를 가져오는 게 당연할 것이다. 여기서 특정 문맥을 더욱 상세히 보게 해주는 것이 바로 Attention이다. 즉, 순차적으로 계산되는 각각의 RNN cell에서 나오는 state를 모두 활용해보자는 것이다.(보통 RNN번역에서는 최종 hidden state만을 context로 이용해서 번역한다.)<br>이 Attention은 보통의 Seq2Seq모델과는 두 가지 점에서 차이를 보인다. </p><h4 id="Seq2Seq-model-with-Attention"><a href="#Seq2Seq-model-with-Attention" class="headerlink" title="Seq2Seq model with Attention"></a>Seq2Seq model with Attention</h4><ol><li>인코더는 디코더에 더 많은 데이터를 보낸다. 마지막 hidden state를 디코더에 보내는 대신, 모든 hidden state를 디코더에 보낸다.</li><li>Attention 디코더는 아웃풋을 내기 전에 추가적인 작업을 거친다. 각 타임스텝에 있는 디코더에 해당하는 인풋의 부분들에 집중을 하기 위해서, 디코더는 다음과 같은 작업을 한다.<ol><li>각 인코더의 hidden state는 인풋 문장의 특정 단어와 관련된 부분을 가지고 있다.  (먼저 step 4에 해당한다고 하자, step 3까지 만들어진 h1,h2,h3 인코더 hidden state가 존재)</li><li>각 hidden state에 대해서 점수를 매긴다.(점수를 매기는 법에 대해서는 일단 무시하고 넘어감)</li><li>점수를 softmax화 해서 이 점수로 각 hidden state를 곱한다. 이를 통해서, 높은 점수를 가진 hidden state를 더 상세히 보고, 점수가 낮은 hidden state는 빼낸다</li><li>가중치가 적용된 hidden state 벡터들을 합한다. </li></ol></li></ol><p><img src="/images/seq2seq.gif" alt="Seq2Seq with Attention"></p><p>여기서 만들어진 context vector는 step4에 있는 디코더를 위한 것이다. 점수를 매기는 작업은 각 time step의 디코더에서 진행된다.<br>이제 정리를 하자면,  </p><ol><li>Attention 디코더 RNN은 임베딩된 <END>토큰을 받고 디코더의 시작 hidden state를 받는다.</li><li>RNN은 인풋을 처리하고 아웃풋과 새로운 hidden state 벡터(h4)를 만든다. output은 버려진다.</li><li>Attention 단계에서, 우리는 인코더의 hidden state와 h4 vector를 이용해 context vector(C4)를 만들어내고 이것은 다음 time step에 사용된다.</li><li>h4와 C4를 하나의 벡터로 합친다. (concatenate, 갖다 붙인다)</li><li>이 벡터를 Feed forward neural network에 넘긴다.</li><li>feed forward neural network의 아웃풋은 이 time step에 대한 결과물을 가리킨다.</li><li>다음 time step까지 반복한다.</li></ol><p><img src="/images/process.gif" alt="Process"><br><img src="/images/wholeprocess.gif" alt="Whole Process"></p><h2 id="Illustrated-Transformer"><a href="#Illustrated-Transformer" class="headerlink" title="Illustrated Transformer"></a>Illustrated Transformer</h2><p>transformer는 Attention is All You Need의 논문에서 제안 되었다. 먼저 high level에서 살펴보자.</p><h3 id="A-High-level-look"><a href="#A-High-level-look" class="headerlink" title="A High level look"></a>A High level look</h3><p>번역기 모델을 가정하고, transfomer을 사용한다고 하면, 인풋은 transformer를 통해 처리되고 output 이 나오게 된다. transformer의 구성을 보면, 인코딩과 디코딩 파트, 그리고 이를 연결해주는 부분으로 이루어져 있다. 인코딩 파트는 encoder를 stack시켜놓은 구성이다. 인풋 벡터와 아웃풋 벡터가 같기 때문에 쌓는 것이 가능한 게 transformer의 특징이다. 디코딩 부분 역시 decoder가 stack되어 있는 모습이다. 인코더들은 모두 같은 구조를 갖지만 weight를 공유하지는 않는다. 각각은 self-attention과 Feed Forword Neural Network의 sub layer로 구성되어 있다.<br><img src="https://jalammar.github.io/images/t/The_transformer_encoders_decoders.png" alt="Transformer"><br><img src="https://jalammar.github.io/images/t/The_transformer_encoder_decoder_stack.png" alt="Detailed"></p><p>인풋은 첫번째로 self-attention layer로 들어간다. 이 layer는 인코더가 인풋 문장에 있는 다른 단어들을 볼 때, 특정 단어로 인코드 하는 것을 돕는다. 이 self-attention을 중점적으로 보도록 하자. self-attention의 아웃풋은 feed forward NN으로 들어간다. 똑같이 생긴 feed forward NN이 독립적으로 각 포지션에 들어가 있다.(인코더 또는 디코더에 다 들어가 있음)</p><p>디코더는 특이한 점이 있는데, self-attention과 FFNN 모두를 갖고 있지만, 이 사이에 Encoder-Decoder Attention이라는 layer를 추가적으로 갖고 있다는 것이다. 이것은 attention layer로써 인풋 문장에 대한 적절한 부분들에 대해 집중할 수 있도록 도와주는 역할을 한다. </p><h3 id="이-구조로-번역을-해보자"><a href="#이-구조로-번역을-해보자" class="headerlink" title="이 구조로 번역을 해보자"></a>이 구조로 번역을 해보자</h3><p>번역을 위해서, 위에서 했던 것과 같이 word embedding부터 실시한다. 임베딩은 맨 아래 인코더에서부터 시작한다. 모든 인코더에 공통되는 부분은, 512차원의 벡터를 받는다는 것이다. 벡터의 길이는 하이퍼 파리미터로서 우리가 설정할 수 있는 부분이다. 보통 이 값은 훈련 셋에 있는 가장 긴 문장을 기준으로 설정된다. 단어 임베딩이 끝나면, 각 단어들은 인코더의 두 레이어로 들어가게 된다.(self attention layer, FFNN layer)</p><p>여기서 Transformer의 큰 특징이 드러난다. 각 포지션에 있는 단어는 지정된 인코더의 path를 따라 간다는 것이다. self-attention에는 이런 의존성이 존재한다. FFNN에는 의존성이 없지만 그러므로 FFNN을 타면서 여러 path들이 병렬로 처리가 가능하게 된다.</p><h3 id="Encoding"><a href="#Encoding" class="headerlink" title="Encoding"></a>Encoding</h3><p>인풋 벡터를 받으면 인코더는 이 벡터들을 self-attention 층으로 보낸다. 그리고 FFNN을 통하고, 결과물을 만들어 다음 인코더로 보내게 된다(구조상 위로 보낸다). 문장 번역을 하는 예를 들어 보자.<br>”The animal didn’t cross the street because it was too tired”<br><code>it</code>은 무엇에 해당되는 것일까? street일까 아니면 animal일까? 사람들에게는 아주 쉬운 질문이지만, 알고리즘 상으로 답을 내기에는 어려운 질문이다.</p><p>it을 처리할때, self-attention은 it을 animal과 연결하는 것을 허용한다. 모델이 각 단어를 처리할 때, self-attention은 다른 위치에 있는 인풋 시퀀스를 보는 것을 허용해서 이 단서들을 이용해 단어를 잘 인코딩 하도록 돕는 역할을 한다.</p><p>결국 self-attention은 인코딩 파트에서 Transformer가 다른 연관된 단어를 갖고 우리가 지금 처리 중인 것에 대해서 잘 이해할 수 있도록 하는 방법이다. 다른 말로하면, self-attention은 self-attention 점수를 각 단어마다 매겨서 단어와 단어끼리의 매칭 점수를 이용해 연관정도를 파악하는 것 이라고도 할 수 있다. 더 자세히 알아보자.<br><img src="https://jalammar.github.io/images/t/encoder_with_tensors_2.png" alt="encoder layer"></p><h3 id="Self-attention-in-detail"><a href="#Self-attention-in-detail" class="headerlink" title="Self-attention in detail"></a>Self-attention in detail</h3><p>self-attention이 벡터들을 갖고 어떻게 계산하는지 보도록 하자. <strong>첫 번째로</strong> self-attention의 계산에서는, 각 인코더의 인풋 벡터들에서 세 개의 벡터들을 생성한다. 각 단어에서 이제 Query Vecotor를 만들어낸다. Key Vector, Value Vector로 이루어진다. 이 벡터들은 훈련단계에서 학습된 3개의 행렬들을 곱하여 생성된다.(Q, W, K)</p><p>주목할 점은 이 새 벡터들이 임베딩 벡터보다 차원이 작다는 것이다. 이것들의 차원은 64이고, 임베딩과 인풋/아웃풋 벡터들은 512차원이다. 이 행렬들이 작아질 필요는 없다. 이것은 단순히 multihead attention 상수를 계산하기 위한 것이기 때문에 선택의 문제다.</p><h4 id="query-key-value-벡터들"><a href="#query-key-value-벡터들" class="headerlink" title="query, key, value 벡터들?"></a>query, key, value 벡터들?</h4><p>이 세 벡터들은 attention에 대해 생각할 때 유용하게 계산되는 abstraction들이다. 하단에 attention이 어떻게 계산되는지를 진행해보면, 이 세 벡터들의 역할에 대해서 잘 이해할 수 있다.</p><p><strong>두 번째로</strong> self attention점수를 내는 것이다. Thinking이라는 단어에 대해서 self-attention 점수를 계산한다고 해보자. 우리는 문장에 있는 이 단어에 대한 각 단어들의 점수가 필요하다. 점수는 특정 위치에서 단어를 인코딩 할 때 입력 문장의 다른 부분에 집중할 정도를 결정한다. 이 점수는 각 단어에 점수를 매길 때 query vector와 key vector의 dot product로 계산된다. 그래서 만약 우리가 #1포지션에서 self-attention을 한다면 첫 점수는 q1과 k1의 dot product로 계산될 것이다. 두 번째 점수는 q1과 k2의 dot product로 계산된다.</p><p><strong>세 번째와 네 번째는</strong> 점수를 8로 나눠주는 것이다.(key value의 차원에 루트 씌운 값) 이렇게 하게되면, Key 벡터의 차원이 늘어날수록 dot product 계산시 값이 증대되는 문제를 막아주게 되어 안정적으로 gradient를 흐르게 만들어 줄 수 있다. 그리고 결과를 softmax 처리에 보낸다. softmax는 점수를 normalize해서 그 값들이 모두 1까지 갖는 양수로 만든다. softmax 스코어는 이 위치에서 각 단어가 얼마나 표현될지를 보여주는 점수인데, 분명히 그 위치의 단어는 가장 높은 점수를 갖겠지만 가끔은 현재 단어와 관련된 다른 단어를 위치시키는 것이 좋을 때도 있다. 예를 들어 <code>it</code>이 어떤 걸 의미 하는가에 대해서 궁금할 때.</p><p><strong>다섯 번째는</strong> 각 value 벡터를 softmax 점수로 곱하는 것이다. 여기서의 포인트는 우리가 집중하고 싶은 단어의 값을 유지하고 관련없는 단어의 값을 떨어트리는 것이다. <strong>여섯 번째는</strong> 가중치가 곱해진 벡터들을 더하는 것이다. 이 과정을 통해 이 위치의 self-attention 레이어 값을 얻게된다. 이것을 통해 self-attention 계산이 완료된다. 결과로 나온 vector는 FFNN에 보낼 수 있는 벡터이다. 이 계산은 matrix form으로 되어있다면 더 빠르게 가능하다.(Matrix Factorization으로 한번에 계산이 가능함) 이제 단어 수준에서 계산을 살펴 보자.</p><h2 id="Matrix-Calculation-of-self-attention"><a href="#Matrix-Calculation-of-self-attention" class="headerlink" title="Matrix Calculation of self-attention"></a>Matrix Calculation of self-attention</h2><p><img src="https://jalammar.github.io/images/t/self-attention-matrix-calculation.png" alt="Q, K, V"><br>첫 번째는 Q, K, V 행렬을 계산하는 것이다. 임베딩을 matrix X로 만들 때 훈련된 가중치 행렬(WQ, WK, WV)를 곱해서 이 세가지 행렬을 이미 만들어 냈다. X와 WQ를 곱해서 Q가 나오고 WK를 곱해서 K, WV를 곱해서 V가 나오게 된다.</p><p>행렬들에 관련된 것이기 때문에, 이 2-6댠계를 하나의 공식으로 응축하여 self-attention의 아웃풋을 계산할 수 있다. Matrix Factorization을 통해서.</p><h2 id="multi-head-attention"><a href="#multi-head-attention" class="headerlink" title="multi head attention"></a>multi head attention</h2><p>multi head attention은 attention layer를 head의 수 만큼 병렬로 수행하는 것을 말하는데, 이를 통해서 모호한 문장을 해석하는데 연관된 정보를 다른 관점에서 바라보게 만들어서 퍼포먼스를 상승시키는 효과가 있다(it 구분하기 등). attention layer의 퍼포먼스는 다음 두 가지 방법을 통해 향상시킨다.  </p><ol><li>multi head attention은 단어의 위치를 잡는 능력을 여러 위치들로 잡는 것으로 확장한다. 이전에 실시해서 얻은 값에는 다른 인코딩 값이 있긴 하지만, 단어 그 자체의 값에 의해 dominate 될 수 있다. multi head attention을 이용하면 “The animal didn’t cross the street because it was too tired”라는 문장에서 우리는 it이 의미하는 것이 무엇인지 번역할 때 유용할 것이다.</li><li>multi head는 attention layer에 representation subspace들을 제공한다. multi head attention을 통해 여러개의 QKV 가중치 곱 행렬을 가질 수 있다. 각 셋들은 랜덤하게 값이 들어가고, 훈련이 끝나면, 각 셋들은 input 임베딩들을 다른 representation subspace에 투영하는데 사용된다.</li></ol><p>만약 input X를 8개의 다른 attention head에 넣고 계산하게 되면, 8개의 다른 Z 행렬들이 등장하게 된다. FFNN은 사실 8개의 행렬에 대해 예상하지 못한다. FFNN은 single 행렬을 기대하게 되는데 그래서 우리는 이 여덟개의 행렬을 응축해 하나의 matrix로 만들어야 한다. </p><ol><li>concatenate 한다</li><li>W0 행렬을 가중치 matrix와 곱해 훈련한 데이터를 만든다</li><li>결과는 정보를 가진 모든 atttention head의 값을 가진 Z matrix이다. 이걸 FFNN에 보낸다</li></ol><p>이 과정을 그림으로 요약하면 다음과 같다<br><img src="https://jalammar.github.io/images/t/transformer_multi-headed_self-attention-recap.png" alt="multi head attention"></p><p>모든 attention head를 더하면 굉장히 다양한 해석이 등장한다.<br><img src="https://jalammar.github.io/images/t/transformer_self-attention_visualization_3.png" alt="add all heads"></p><h2 id="Positional-encoding을-통한-시퀀스-순서-나타내기"><a href="#Positional-encoding을-통한-시퀀스-순서-나타내기" class="headerlink" title="Positional encoding을 통한 시퀀스 순서 나타내기"></a>Positional encoding을 통한 시퀀스 순서 나타내기</h2><p>모델을 설명하면서 하나 놓친 부분은, 인풋 시퀀스의 순서를 어떻게 설명하느냐이다. RNN에서는 문장의 길이가 짧긴 하지만 각 단어의 sequence 정보를 잘 활용할 수 있었다. 하지만, Transformer는 속도가 느린 RNN을 사용하지 않고 Matrix Factorization을 활용하기 때문에 시퀀스 정보를 전달해 주는 과정이 필요하다.<br><img src="/images/positional_encoding.png" alt="Positional Encoding"></p><p>transfomer는 각 인풋 임베딩에 벡터를 더하고, 이 벡터들은 상대적인 위치 정보들을 갖게 되어 모델이 학습하는 패턴을 따르게 된다. 이것을 통해 각 단어의 위치를 결정하고 또는 시퀀스에 있는 다른 단어들과의 거리를 결정한다. 여기서 포인트는 이러한 벡터 값을 임베딩에 더하면 Q / K / V 벡터로 투영 된 후 내적시 임베딩 벡터간에 의미있는 거리를 제공할 수 있다는 것이다. positional encoding을 통해서 얻을 수 있는 또 하나의 장점은 훈련 셋보다 긴 문장이 들어왔을 때에도 scale이 가능하다는 것이다.</p><h3 id="Residuals"><a href="#Residuals" class="headerlink" title="Residuals"></a>Residuals</h3><p>인코딩 구조에서 한 가지 더 설명할 부분은 residual이다. positional encoding은 학습이 진행될 수록 역전파에 의해서 정보가 많이 손실된다. 각 인코더에 있는 각 sub-layer에서 residual connection을 취해주고 더해줌으로써 이 정보 손실을 막아준다. Residual connection 후에는 layer-normalization 단계를 통해서 학습의 효율을 증진시켜준다. </p><p>인코더는 이렇게 작업이 끝난다. 정리하자면, 인코더는 임베딩 - multi head attention - FFNN 그리고 Residual Connection으로 이루어진다.<br><img src="https://jalammar.github.io/images/t/transformer_resideual_layer_norm_2.png" alt="residual connection in Encoder"></p><h2 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h2><p>가장 위의 encoder의 아웃풋은 attention 벡터 셋 K, V로 변환된다. 이 두 벡터들은 각 디코더의 질문에 사용된다. K와 V는 encoder-decoder attention 층에서 디코더가 인풋 시퀀스에 적절한 자리에 집중하는 것을 돕는다.  </p><p>디코더는 masked Multi head attention - multi head attention - FFNN의 구조로 이루어져 있다.  디코더 입력값은 Query로 사용되고 Encoder의 최종 결과값을 Key, Value로 사용한다. 이것은 디코더의 현재값을 Query로 encoder에 질문하는 모습이 되겠고, 인코더 출력값에서 중요한 정보를 K, V로 획득해서 디코더의 가장 적합한 다음 단어를 출력하는 과정이라고 볼 수 있다. </p><p>이 과정이 Decoder layer 에서 쭉 이어지게 되고, 이후에는 linear layer와 softmax layer를 지나게 된다. 일반적으로 softmax를 이용해서 가장 높은 확률값을 전달해주는 과정이 여기서도 이루어 지게 된다. 가장 높은 확률값을 지닌 단어가 다음 단어로 오게 된다. 하지만 여기서도 Lable smoothing을 통해 한층 더 성능을 높여준다. one hot encoding으로 값을 확확 죽이는 것 보다, 정답은 1에 가깝게, 오답은 0애 가깝게 만들어 주는 과정이다.  Thanks가 고맙다와 감사하다로 label된 것을 예로들면, 고맘다와 감사하다는 둘 다 잘못 label된 것이 아니다. 하지만 one hot encoding을 시켜버리면, 이 둘은 완전히 다른 결과값을 갖게 될 것이다. 이렇게 되면 학습이 효율적으로 학습이 진행되지 않게 되는데, 이를 방지하는 것이 label smoothing인 것이다.<br><img src="https://jalammar.github.io/images/t/transformer_decoding_1.gif" alt="encoder-decoder"></p><p>위의 과정은 <code>&lt;EOS&gt;</code>가 나올 때까지 반복된다. 각 스텝의 아웃풋이 가장 아래의 디코더에 주입되고, 디코더는 디코딩된 결과를 bubble up한다. 인코더가 그랬던 것 처럼 디코더의 인풋에 임베딩하고 임베딩 벡터에 positional 인코딩을 취해 각 단어의 위치를 가리킨다.<br><img src="https://jalammar.github.io/images/t/transformer_decoding_2.gif" alt="repeated"></p><p>encoder-decoder attention 층은 multihead self-attention과 비슷하게 작동하지만, Query Matrix를 층 아래에 생성한다는 것과 K, V matrix만 인코더 스택의 아웃풋에서 취한다는 것에서 차이가 난다.  </p><h2 id="The-Loss-Function"><a href="#The-Loss-Function" class="headerlink" title="The Loss Function"></a>The Loss Function</h2><p>‘merci’를 “thanks’로 바꾸는 작업을 한다고 해보자. 이 작업은 아웃풋이 확률 분포에서 thanks 단어를 가리키는 걸 원한다는 것을 뜻한다. 하지만 이 모델은 훈련되지 않았고, 제대로 번역되지 않을 것이다. 어떻게 잘 학습된 분포와 학습이 안된 분포를 비교할까? 간단하게, 하나를 잡고 다른 걸 빼면 된다. cross entropy나 Kullback-Leibler divergence를 살펴보자.</p><p>하지만 이 예는 너무 단순화한 예이다. 보통 우리는 문장단위의 번역을 한다. “je suis étudiant”를 “i am a student”로 번역한다고 해보자. 각 확률분포는 vocal_size의 길이로 표현된다. 여기서는 <eos>까지 포함하여 6개이다. target output은 1과 0으로 나오게 되지만 학습에서는 값이 확률로써 등장한다. </p><p><img src="https://jalammar.github.io/images/t/output_target_probability_distributions.png" alt="target model outputs example"><br><img src="https://jalammar.github.io/images/t/output_trained_model_probability_distributions.png" alt="train model outputs"></p><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Jay Alammar : <a href="https://jalammar.github.io/">https://jalammar.github.io/</a><br>허민석님 유튜브 : <a href="https://www.youtube.com/watch?v=mxGCEWOxfe8&amp;t=786s">https://www.youtube.com/watch?v=mxGCEWOxfe8&amp;t=786s</a>)<br>medium 글 : <a href="https://medium.com/@adityathiruvengadam/transformer-architecture-attention-is-all-you-need-aeccd9f50d09">https://medium.com/@adityathiruvengadam/transformer-architecture-attention-is-all-you-need-aeccd9f50d09</a></p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/04/12/transformer/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CRAFT 요약 Character Region Awarenness for Text Detection)</title>
      <link>http://tkdguq05.github.io/2020/03/29/craft/</link>
      <guid>http://tkdguq05.github.io/2020/03/29/craft/</guid>
      <pubDate>Sun, 29 Mar 2020 11:20:22 GMT</pubDate>
      <description>
      
        &lt;p&gt;이미지 효과가 있는 글자를 인식하는 CRAFT에 대해서 파헤쳐보자&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>이미지 효과가 있는 글자를 인식하는 CRAFT에 대해서 파헤쳐보자</p><a id="more"></a><h1 id="CRAFT-Character-Region-Awarenness-for-Text-Detection"><a href="#CRAFT-Character-Region-Awarenness-for-Text-Detection" class="headerlink" title="CRAFT (Character Region Awarenness for Text Detection)"></a>CRAFT (Character Region Awarenness for Text Detection)</h1><p><strong>Clova AI Research, NAVER Corp.</strong></p><hr><p><a href="https://arxiv.org/pdf/1904.01941.pdf">CRAFT 논문</a></p><p>이미지에서 정보를 얻기 위한 방법을 찾기 위해 SOTA 논문을 뒤지던 중에 발견한 논문. Naver Clova AI Research 팀에서 작성했다. </p><p>이 논문의 요약은 다음과 같다. 어떤 텍스트가 논문에 있는 글처럼 바르게 작성되어 있지 않고, 그래픽 효과로 휘어져 있거나, 크기가 각각 다른 경우에 CRAFT를 사용하면, text detection이 잘 된다는 것이다. 실제 OCR 프로젝트를 해 본 경험이 있다면, 글자가 조금만 틀어져도 인식이 제대로 되지 않는 다는 것을 느낄 수 있다. 그러한 점에서 이 논문이 눈에 띄었고 집중해서 볼 수 밖에 없었다.</p><p>그럼 도대체 왜 잘되는 것 일까? 하나 하나 파헤쳐 보자.</p><hr><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><p>CRAFT는 기본적으로 CNN으로 디자인되어 있고, 여기서 $region$ $score$과 $affinity$ $score$이 나오게 된다. $region$ $score$은 <strong>이미지에 있는 각각의 글자들을 위치</strong> 시키는 데에 사용되고, $affinity$ $score$은 <strong>각 글자들을 한 인스턴스에 묶는데</strong>에 사용된다. 문자 수준의 annotation이 부족하기 때문에 CRAFT에서는 약한 정도의 supervised leargning 프레임 워크를 제안한다. 일반적으로 사용하는 텍스트 이미지  데이터 셋에 글자 수준의 groud-truth 데이터가 없기 때문이다. 데이터 셋으로는 ICDAR을 사용했고 그 외에 MSRATD500, CTW-1500 등을 통해 실험했다.</p><h2 id="2-Related-Work"><a href="#2-Related-Work" class="headerlink" title="2. Related Work"></a>2. Related Work</h2><p>생략</p><h2 id="3-Methodology"><a href="#3-Methodology" class="headerlink" title="3. Methodology"></a>3. Methodology</h2><p>CRAFT의 주 목표는 일반 이미지에 있는 각 글자들을 정확하게 포착하는 것이다. 이를 위해 딥러닝을 학습시켜서 글자의 위치와 글자들 간의 affinity(글자 옆에 글자가 있는 것 정도로 해석)를 예측한다. 데이터를 학습시킬 때, 이와 관련된 데이터 셋, 즉 글자 하나하나 학습시키는 데이터가 없으므로, 이 모델은 약한 지도학습 방법으로 학습된다. </p><h3 id="3-1-Architecture"><a href="#3-1-Architecture" class="headerlink" title="3.1 Architecture"></a>3.1 Architecture</h3><p>VGG-16에 Batch Normalization이 적용된 네트워크를 backbone 모델로 사용했다. 이 모델에는 디코딩 파트에 <code>skip-connection</code>이 있는데 이것은 U-Net과 비슷한 구조로 Low-level의 feature들을 취합한다. 최종 아웃풋에는 score map에 해당하는 두 개의 채널이 있고, 여기에서 위에서 말한 $region$ $score$과 $affinity$ $score$이 나오게 된다.</p><p><img src="https://media.arxiv-vanity.com/render-output/2142906/x2.png" alt="Schematic illustration of Network"></p><h3 id="3-2-Training"><a href="#3-2-Training" class="headerlink" title="3.2 Training"></a>3.2 Training</h3><h4 id="3-2-1-Ground-Truth-Label-Generation"><a href="#3-2-1-Ground-Truth-Label-Generation" class="headerlink" title="3.2.1 Ground Truth Label Generation"></a>3.2.1 Ground Truth Label Generation</h4><p>Training Image를 위해서 $region$ $score$과 $affinity$ $score$에 대한 ground thruth 라벨을 생성해야 한다. 이 라벨은 글자 단위의 박스를 이용해 만든다. $region$ $score$은 주어진 픽셀이 글자의 중앙에 있을 확률이고, $affinity$ $score$는 인접한 글자들의 공간의 가운데에 있을 확률이다. 이 가운데에 있을 확률을 가우시안 히트맵으로 인코딩한다. 왜냐하면 ground truth 지역이 엄격하게 경계쳐져 있지 않기 때문이다. 이 히트맵은 $region$ $score$과 $affinity$ $score$ 모두에 사용된다.</p><p><img src="https://media.arxiv-vanity.com/render-output/2142906/x3.png" alt="Ground Truth 생성 과정"></p><p>제안된 ground truth는 receptive field의 크기가 작은걸 사용함에도 불구하고, 모델이 크거나 또는 긴 텍스트를 찾아내는 것을 가능케 한다.</p><h4 id="3-2-2-Weakly-Supervised-Learning"><a href="#3-2-2-Weakly-Supervised-Learning" class="headerlink" title="3.2.2 Weakly-Supervised Learning"></a>3.2.2 Weakly-Supervised Learning</h4><p>학습에 사용되는 데이터는 단어 단위의 annotation을 가지고 있다. weakly-supervised learning을 사용해서 실제 이미지에 단어 단위의 annotation이 들어오면, 이미지에 글자 부분을 crop하고, 학습된 모델이 이미지에 있는 글자 지역을 예측해 글자 단위의 bounding-box를 만든다. </p><p><img src="https://media.arxiv-vanity.com/render-output/2142906/x4.png" alt="Weakly-Supervised Learning"></p><p>위의 사진에서 그 구조를 파악할 수 있다.  </p><ol><li>먼저 단어 단위의 이미지들이 crop된다.   </li><li>학습된 모델이 $region$ $score$를 예측한다.   </li><li>watershed 알고리즘이 글자 단위로 쪼갠다.   </li><li>crop단계에 사용했던 inverse transform을 사용해서 글자 박스의 좌표들이 원래의 이미지 좌표로 변형해 넣는다.</li></ol><p>만약 모델이 부정확한 region score로 학습되게 된다면, 결과의 글자들은 blurred 되어 나타나게 된다. 이것을 막기 위해서, psuedo-GT(제안된 Ground Truth)의 퀄러티를 측정한다. text annotation의 강력한 시그널인 word length를 이용해서 측정하게 되는데, 이것을 이용하면 psuedo-GT의 confidence를 계산할 수 있다.</p><p><img src="/images/formula_1.png" alt="confidnce formula 1"><br>먼저 첫 번째 식에 있는 변수들에 대해서 설명해보자. $s_{conf}(w)$는 우리가 구하려는 샘플 $w$에 대한 confidence 값이다. $R(w)$와 $l(w)$는 각각 샘플 $w$d에 대한 bounding box 영역과 단어의 길이이다. 글자단위로 쪼개는 과정에서 글자들의 추정된 bounding box들과 이에 상응하는 글자들의 길이를 알아낼 수 있다. 이 길이는 $l^c(w)$로 표현된다. 결국 이 식에서 confidence라 함은, 단어의 길이라는 정보를 이용해서 얼마나 단어의 길이를 잘 인식했는지를 나타내는 수치라고 할 수 있다.</p><p><img src="/images/formula_2.png" alt="confidnce formula 2"><br>이제 두 번째 식을 보자. $S_c(p)$는 pixel-wise의 confidence map이다. 이 픽셀이  $R(w)$에 속하면 아까 구한 $s_{conf}(w)$를 사용하고, 그렇지 않으면 confidence를 1로 준다.</p><p><img src="/images/formula_3.png" alt="confidnce formula 3"><br>마지막으로 L을 구하는 식을 보면, $S_{r}^\star(p)$와 $S_{a}^*(p)$는 각각 pseudo-GT의 region score과 affinity map을 의미한다. 그리고 $S_{r}(p)$와 $S_{a}(p)$는 각각 예측된 region score과 affinity map을 의미한다. 합성 데이터로 훈련시킬 때, 우리는 진짜 ground truth를 얻을 수 있으므로, $S_{c}(p)$는 1로 설정된다. 훈련이 수행되면, CRAFT모델은 각 글자들을 더 정확하게 예측할 수 있고, confidence 점수인 $s_{conf}(w)$ 는 점진적으로 증가하게 된다. 즉, 학습할 수록 confidence가 올라가게 되어 글자가 더 잘 인식된다는 말이다.</p><p>학습을 하면서, 만약 confidence score가 0.5보다 낮으면 추정된 글자의 바운딩 박스들은 모델을 학습하는데 악영향을 주기 때문에 무시하도록 설정된다.</p><h3 id="3-3-Inference"><a href="#3-3-Inference" class="headerlink" title="3.3 Inference"></a>3.3 Inference</h3><p>추론 단계에서, 결과물이 다양한 모양으로 전달된다. 예를들어, 단어 박스나 글자 박스들이나 다른 다각형 등으로 나오게 된다. 평가를 위해서 IoU(word-level intersection-over-union)을 사용한다. $QuadBox$를 만들어서 글자를 큰 박스로 인식하고 각 글자들을 polygon을 생성한다. 이 방식을 통해서 휘어져 있는 text  전체에 대해서 효과적으로 다룰 수 있게 된다. 이것은 OpenCV에 있는 $connectedComponents$와 $minAreaRect$를 사용해 만들 수 있다.</p><h3 id="4-Discussions"><a href="#4-Discussions" class="headerlink" title="4. Discussions"></a>4. Discussions</h3><p><strong>Robustness to Scale Variance</strong> 비록 데이터 셋에 있는 텍스트의 사이즈는 매우 달랐지만, 모든 데이터에 대해서 단일 스케일의 실험을 진행했다. 상대적으로 작은 receptive fiel는 큰 이미지에 있는 작은 글자를 잡는데 적합했고, CRAFT는 이를 통해서 다양한 글자들을 잡아내는데 robust하다는 결과이다.</p><p><strong>Multi language issue</strong> IC17에는 Bangla와 Arabic 글자들이 있지만, synthetic text 데이터 셋에는 Bangla와 Arabic 글자들이 포함되어 있지 않다. 게다가, 두 언어는 각각의 글자들을 개별적으로 세그먼트하기가 힘들다. 왜냐하면 모든 글자들이 필기체로 이루어져있기 때문이다. 그러므로 이 모델을 두 글자들을 분간해 내지 못하고, Latin이나 한글, 중국어, 일본어 등을 찾지 못한다.</p><p><strong>Generalization ability</strong> 3개의 다른 데이터 셋들로,  fine-tuning을 하지않고 실험 해 보았을 때, SOTA의 퍼포먼스를 보여주는 것을 확인했다. 이 모델이 한 데이터 셋에 오버피팅 되는 것 보다, 여러 글자들에 일반적인 성능을 내는 것을 증명하는 결과이다.</p><h3 id="5-결론"><a href="#5-결론" class="headerlink" title="5. 결론"></a>5. 결론</h3><p>글자 단위의 annotation이 주어지지 않았을 때 각 글자들을 detect하는 CRAFT 모델을 제시했다. $region$ $score$과 $affinity$ $score$로 다양한 모양의 텍스트 모양들을 커버할 수 있다. 여기에 weakly supervised learning을 사용해 pseudo-ground truth를 만들어 내었다. CRAFT는 SOTA에 해당하는 퍼포먼스를 보여줬으며 일반화 성능과 scale 변동에 덜 민감하지만, multi language를 다루지는 못한다는 점에서 한계를 보인다.</p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/03/29/craft/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Airflow Basic</title>
      <link>http://tkdguq05.github.io/2020/03/14/airflow-start/</link>
      <guid>http://tkdguq05.github.io/2020/03/14/airflow-start/</guid>
      <pubDate>Sat, 14 Mar 2020 07:25:23 GMT</pubDate>
      <description>
      
        &lt;p&gt;Airflow의 기본적인 컨셉에 대해서 이해해보자&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Airflow의 기본적인 컨셉에 대해서 이해해보자</p><a id="more"></a><h1 id="Workflow-관리-Airflow-컨셉을-알아보자"><a href="#Workflow-관리-Airflow-컨셉을-알아보자" class="headerlink" title="Workflow 관리! Airflow 컨셉을 알아보자"></a>Workflow 관리! Airflow 컨셉을 알아보자</h1><p>요즘 왠만한 회사에서 Airflow를 안 쓰는 곳이 없습니다. 파이프라인 관련 세션을 들으면 심심치 않게 들을 수 있는 것이 Airflow를 이용한 워크플로우 관리일 것 입니다. 최근 저희 회사에서도 Airflow를 도입했습니다. 여러 세션에서 관련 내용을 기억해두고 정리해 두었다가, 잡 스케쥴을 관리할 필요성이 생겨서 Airflow 도입을 제안했습니다. 현재 Airflow를 이용해서 추천 쪽에 적용하고 있고, 대략 <code>전처리-모델링-Prediction</code>의 플로우를 돌리려고 합니다.  test를 계속해서 진행 중이고 시행착오법 끝에 DAG들이 잘 돌아가는 것을 확인하고 있습니다. </p><p>오늘 글은 간단하게 Airflow의 컨셉에 대해서 알아보는 내용입니다. 위에서도 등장한, Airflow의 핵심인 DAG에 대해서 알아보고, DAG안에 들어가는 요소들을 살펴보겠습니다.</p><h3 id="Workflow-Airflow"><a href="#Workflow-Airflow" class="headerlink" title="Workflow? Airflow?"></a>Workflow? Airflow?</h3><p>Airflow는 AirBnB에서 만든 Workflow 관리 툴입니다. workflow라고 하면, 대략적으로 ‘아 작업의 흐름’이라고 할 수 있겠습니다만, workflow를 조금 더 자세히 설명하자면 워크플로우는 작업 절차를 통한 정보 또는 업무의 이동을 의미하며, 더 자세히 말하면, 워크플로는 작업 절차의 운영적 측면이라고 할 수 있습니다.(출처 위키피디아) 여기서 업무라는 것이 등장합니다. Airflow에서 업무는 Task라고 합니다. 이 Task들이 연결 된 것이 Workflow고 이것을 관리하는 것이 Airflow입니다. 쉽게 말하자면, Airflow는 Task들을 잘 연결시키고 관리하는 툴이라고 볼 수 있겠습니다. Airflow를 활용하는 예는 다양합니다. 데이터 분야에서는 ETL 파이프라인에 사용해 데이터들을 관리할 수 있고, 모델의 학습주기를 관리할 수도 있습니다. 학습된 모델을 이용해 prediction해 배치성으로 결과들을 주기적으로 저장해 놓을 수도 있겠네요. 마케팅 도메인에서 활용한다면, 마케팅 자동화에 적용해서, 이메일을 자동으로 보내주는 일 등에도 활용할 수 있겠습니다. 어떤 작업이 성공했을때 다음 작업을 하게 한다거나(의존성, branching) 등의 작업도 가능하기 때문에 굉장히 다양하게 활용할 수 있습니다. </p><h3 id="DAG"><a href="#DAG" class="headerlink" title="DAG"></a>DAG</h3><p>방금 전까지 Airflow가 어떻게 흐르는지 알아봤습니다. 이 흐름은 어떻게 만들까요? Airflow에 대해서 찾아보면 다음과 같은 가지들을 볼 수 있습니다.<br><img src="/images/simple_dag.png" alt="깔끔한 DAG"></p><p>간단한 DAG라 보기 굉장히 편합니다. 하지만 DAG를 어떻게 짜느냐에 따라, 작업이 얼마나 복잡하냐에 따라 DAG는 복잡하게 변할 수 있습니다.<br><img src="/images/complex_dag.png" alt="흉악한 DAG"><br>그래도 이렇게 눈으로 보고 확인할 수 있으니 얼마나 편한지 모르겠습니다. 이걸 airflow없이 코드로 일일이 보고 작업 스케쥴 관리를 하려면 몸과 마음이 지쳐 월요일부터 글또 채널에 pass권을 사용할지도 모릅니다.</p><p>다행히도, 우리에겐 Airflow가 있고 Task들을 DAG를 통해서 이어주면 한 눈에 알아볼 수 있습니다. DAG는 Directed Acyclic Graph의 약자입니다. 번역하자면, ‘방향성 비순환 그래프’입니다. 노드와 노드가 단방향으로 연결되고 한번 노드로 향하면, 돌아오지 않는 특성을 가진다는 정도만 알면 될 것 같습니다. </p><p>DAG는 Python script로 작성되어 있습니다. 따라서 python에 익숙한 분들이라면 DAG작성은 별로 어렵지 않을 것입니다. DAG를 구성하는 요소들에 대한 개념만 알면 쉽게 쉽게 짤 수 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta, datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> utils.slack_alert <span class="keyword">import</span> SlackAlert</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> airflow <span class="keyword">import</span> DAG</span><br><span class="line"><span class="keyword">from</span> airflow.models <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">from</span> airflow.contrib.operators.bigquery_operator <span class="keyword">import</span> BigQueryOperator</span><br><span class="line"><span class="keyword">from</span> airflow.contrib.operators.bigquery_check_operator <span class="keyword">import</span> BigQueryCheckOperator</span><br><span class="line"></span><br><span class="line">alert = SlackAlert(<span class="string">'#test'</span>)</span><br><span class="line"><span class="comment"># Config variables</span></span><br><span class="line">dag_config = Variable.get(<span class="string">"bigquery_github_trends_variables"</span>, deserialize_json=<span class="keyword">True</span>)</span><br><span class="line">BQ_CONN_ID = dag_config[<span class="string">"bq_conn_id"</span>]</span><br><span class="line">BQ_PROJECT = dag_config[<span class="string">"bq_project"</span>]</span><br><span class="line">BQ_DATASET = dag_config[<span class="string">"bq_dataset"</span>]</span><br><span class="line"></span><br><span class="line">default_args = &#123;</span><br><span class="line">    <span class="string">'owner'</span>: <span class="string">'Jose Lee'</span>,</span><br><span class="line">    <span class="string">'depends_on_past'</span>: <span class="keyword">True</span>,    </span><br><span class="line">    <span class="string">'start_date'</span>: datetime(<span class="number">2018</span>, <span class="number">12</span>, <span class="number">1</span>),</span><br><span class="line">    <span class="string">'end_date'</span>: datetime(<span class="number">2018</span>, <span class="number">12</span>, <span class="number">5</span>),</span><br><span class="line">    <span class="string">'email_on_failure'</span>: <span class="keyword">True</span>,</span><br><span class="line">    <span class="string">'email_on_retry'</span>: <span class="keyword">False</span>,</span><br><span class="line">    <span class="string">'retries'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'retry_delay'</span>: timedelta(minutes=<span class="number">5</span>),</span><br><span class="line">    <span class="string">'on_failure_callback'</span> : alert.slack_fail_alert</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set Schedule: Run pipeline once a day. </span></span><br><span class="line"><span class="comment"># Use cron to define exact time. Eg. 8:15am would be "15 08 * * *"</span></span><br><span class="line">schedule_interval = <span class="string">"00 21 * * *"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define DAG: Set ID and assign default args and schedule interval</span></span><br><span class="line">dag = DAG(</span><br><span class="line">    <span class="string">'bigquery_github_trends'</span>, </span><br><span class="line">    default_args=default_args, </span><br><span class="line">    schedule_interval=<span class="string">'@once'</span></span><br><span class="line">    <span class="comment"># schedule_interval</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Config variables</span></span><br><span class="line">BQ_CONN_ID = <span class="string">'my_gcp_conn'</span></span><br><span class="line"><span class="comment"># BQ_PROJECT = 'airflow-268501'</span></span><br><span class="line"><span class="comment"># BQ_DATASET = 'github_trends'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Task 1: check that the github archive data has a dated table created for that date</span></span><br><span class="line">t1 = BigQueryCheckOperator(</span><br><span class="line">        task_id=<span class="string">'bq_check_githubarchive_day'</span>,</span><br><span class="line">        sql=<span class="string">'''</span></span><br><span class="line"><span class="string">        #standardSQL</span></span><br><span class="line"><span class="string">        SELECT</span></span><br><span class="line"><span class="string">          table_id</span></span><br><span class="line"><span class="string">        FROM</span></span><br><span class="line"><span class="string">          `githubarchive.day.__TABLES_SUMMARY__`</span></span><br><span class="line"><span class="string">        WHERE</span></span><br><span class="line"><span class="string">          table_id = "&#123;&#123; yesterday_ds_nodash &#125;&#125;"</span></span><br><span class="line"><span class="string">        '''</span>,</span><br><span class="line">        use_legacy_sql=<span class="keyword">False</span>,</span><br><span class="line">        bigquery_conn_id=BQ_CONN_ID,</span><br><span class="line">        dag=dag</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>제가 연습하느라 사용했던 DAG를 보면서 설명해보겠습니다. import를 뭘하는지 보면 방금까지 설명한 DAG, 그리고 Variable과 operator가 보입니다. </p><h3 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h3><p>Variable은 Airflow UI를 보면서 설명을 해야 할 것 같습니다.  UI에 Variable의 탭이 별도로 존재하기 때문입니다.<br><img src="/images/airflow_variable.png" alt="Airflow의 Variable탭"></p><p>위의 화면이 Variable을 보여주고 있습니다. Key와 Value로 이루어진 걸 알 수 있습니다. Key Value로 이루어진 데이터를 이용하고 싶다면, Variable에 등록해두면 편하게 dict로 값을 받듯이 <code>Variable.get</code>를 이용해서 값을 얻을 수 있습니다. 위의 예시에서는 <code>dag_config = Variable.get(&quot;bigquery_github_trends_variables&quot;, deserialize_json=True)</code><br><code>BQ_CONN_ID = dag_config[&quot;bq_conn_id&quot;]</code>이 부분이 되겠습니다. 저희 회사의 경우에는 각 고객사의 서비스키와 캠페인키를 Variable에 넣어두고 사용하고 있습니다. 신규 고객사가 발생하면 코드를 일일이 만들 필요없이 간단하게 Variable에 넣어두고 DAG를 태우면 끝입니다! </p><h3 id="default-args"><a href="#default-args" class="headerlink" title="default_args"></a>default_args</h3><p>default_args는 dictionary로 이루어져 있고 DAG에 들어가게 됩니다. 여기에 작성한 내용들이 operator들에 적용될 것입니다. 일일이 operator에 넣을 필요없이 default_args에 넣어서 수정하면 되니까 굉장히 간편하게 여러 오퍼레이터에 들어갈 파라미터들을 관리 할 수 있습니다.</p><h3 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a>Operator</h3><p>DAG가 워크 플로우를 어떻게 run할지를 설명한다면, Operator는 실제 Task가 수행하는 작업을 결정합니다. 실제 Task가 돌아가는 것을 Operator를 통해서 지정해준다고 보면 됩니다. operator의 종류는 굉장히 다양합니다. 대표적으로는</p><ul><li>BashOperator : bash 커맨드를 실행시킨다</li><li>PythonOperator : python 함수를 호출한다</li><li>EmailOperator : 이메일을 보낸다</li><li>SimpleHttpOperator : HTTP 요청을 보낸다<br>이런 것들이 있습니다. 위의 코드에서는 BigQueryCheckOperator를 사용했습니다. Bigquery에 접근해서 쿼리를 보내고 싶었기 때문입니다. Google Cloud Platform에 지원되는 다양한 Operator들이 있고, 저희 회사는 AWS를 주로 사용하기 때문에 AWS operator를 많이 사용하고 있습니다. 추가로 SlackAPIOperator 등도 있으니 아이디어만 있다면 왠만한 작업은 다 처리가 가능할 것 입니다.</li></ul><p>슬랙 이야기가 나와서 덧붙이자면,  default_args에 보면 <code>&#39;on_failure_callback&#39; : alert.slack_fail_alert</code>이 있습니다. 대략 유추가 가능하겠지만, 실패시에 슬랙에 알럿을 띄우려고 만들어 둔 파라미터 입니다. Airflow 작업을 하다가 실패가 나면 슬랙을 통해서 알럿을 보고 대응하기 위해서 작성해 두었습니다. 슬랙에 알람을 보내는 내용은 다음 글에서 다뤄보도록 하겠습니다.</p><p>이렇게 간단한 DAG가 만들어지고 airflow_home에 있는 dag폴더에 업로드가 되면 airflow UI에서 DAG가 떠있는 것을 확인할 수 있습니다.<br>(Airflow UI<a href="http://localhost:8080">http://localhost:8080</a>)<br><img src="/images/airflow_main.png" alt="내가 만든 DAG"><br><img src="/images/airflow_task.png" alt="DAG로 들어가면 Task들의 상태를 확인할 수 있다"></p><p>Task들의 상태는 다음과 같이 나눠집니다.<br><img src="/images/task_stages.png" alt="Task들의 상태들"></p><p>이제 이 상태들을 확인해 보면서 워크플로우를 관리해 나가면 됩니다. </p><hr><p>이번 글에서는 Airflow의 정말 기본적인 개념들에 대해서 다뤄봤습니다. 간단한 DAG를 직접 작성해보고 success를 한번 띄워보면 Airflow가 어떤 건지 대략적인 감을 잡을 수 있을 것 이라고 생각합니다. 다음 글에서는 슬랙을 통해서 메세지 알람을 보내는 걸 작성해 보려고 합니다. 저도 공부를 하는 입장이라 부족한 내용일 수 있지만, 보시면서 틀린 부분이나 수정할 부분 알려주시면 감사하겠습니다. </p>]]></content:encoded>
      
      <comments>http://tkdguq05.github.io/2020/03/14/airflow-start/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
